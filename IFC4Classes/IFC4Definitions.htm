<!DOCTYPE html>
<head>
                <title>IFC4 classes and definitions</title>
                <meta charset='UTF-8'>
</head>
<body>
                                <h1>IfcActorRole</h1>
                                
                                <p>This entity indicates a role which is performed by an actor, either a person, an organization or a 
person related to an organization.</p>

<blockquote class="note">
NOTE&nbsp; The list of roles of the enumeration values of the <i>Role</i> attribute can never
be complete. Therefore using enumeration value USERDEFINED, the user can provide any role as a value 
of the attribute <i>UserDefinedRole</i>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>organization_role</strong> and <strong>person_role</strong> defined in ISO&nbsp;10303-41.
</blockquote>



<h1>IfcActorSelect</h1>
                                
                                <h1>IfcAddress</h1>
                                
                                <p>This abstract entity represents various kinds of postal and telecom addresses.</p>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>address</strong> defined in ISO&nbsp;10303-41.
</blockquote>



<h1>IfcAddressTypeEnum</h1>
                                
                                <h1>IfcOrganization</h1>
                                
                                <p>A named and structured grouping with a corporate identity.</p>

<blockquote class="note">
NOTE&nbsp; The relationships between <span class="self-ref">IfcOrganization</span>'s, like between department within a company, can be expressed using the objectified relationship <strong>IfcOrganizationRelationship</strong>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>organization</strong> defined in ISO&nbsp;10303-41.
</blockquote>





<h1>IfcOrganizationRelationship</h1>
                                
                                <p>
      The <span class="self-ref">IfcOrganizationRelationship</span> establishes an
      association between one relating organization and one or more
      related organizations.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from <strong>organization_relationship</strong> defined in ISO&nbsp;10303-41.
    </blockquote>
    
    
<h1>IfcPerson</h1>
                                
                                <p>This entity represents an individual human being.</p>

<blockquote class="note">
NOTE&nbsp; Many countries have legislation concerning the identification of individual persons within databases. Although the intent of the IFC Model is to act as a specification for data exchange 
and sharing, an IFC file might in some situations be considered to be a database that enables identification of a particular person under the terms of such legislation. Users should be aware of the constraints of legislation that might apply in the places where IFC files are used.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>person</strong> defined in ISO&nbsp;10303-41.
</blockquote>





<h1>IfcPersonAndOrganization</h1>
                                
                                <p>This entity represents a person acting on behalf of an organization.</p>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>person_and_organization</strong> defined in ISO&nbsp;10303-41.
</blockquote>



<h1>IfcPostalAddress</h1>
                                
                                <p>This entity represents an address for delivery of paper based mail and other postal deliveries.</p>



<h1>IfcRoleEnum</h1>
                                
                                <h1>IfcTelecomAddress</h1>
                                
                                <p>This entity represents an address to which telephone, electronic mail and other forms of telecommunications should be addressed.</p>





<h1>IfcApproval</h1>
                                
                                <p>An <span class="self-ref">IfcApproval</span> represents information about approval processes such as for a plan, a design, a proposal, or a change order in a construction or facilities management project. <span class="self-ref">IfcApproval</span> is referenced by <strong>IfcRelAssociatesApproval</strong> in <i>IfcControlExtension</i> schema, and thereby can be related to all subtypes of <strong>IfcRoot</strong>. An approval may also be given to resource objects using <strong>IfcResourceApprovalRelationship</strong>
</p>





<h1>IfcApprovalRelationship</h1>
                                
                                <p>An <span class="self-ref">IfcApprovalRelationship</span> associates approvals (one
relating approval and one or more related approvals), each having different status or level as the approval process or the approved
objects evolve.</p>





<h1>IfcResourceApprovalRelationship</h1>
                                
                                <p>An <span class="self-ref">IfcResourceApprovalRelationship</span> is used for
associating an approval to resource objects. A single approval
might be given to one or many items via <strong>IfcResourceObjectSelect</strong>.</p>



<h1>IfcDoorLiningProperties</h1>
                                
                                <p>The door lining is the frame which enables the door leaf to be fixed in position. The door lining is used to hang the door leaf. 
The parameters of the door lining (<span class="self-ref">IfcDoorLiningProperties</span>) define the geometrically relevant parameter of the lining.</p>

<blockquote class="note">
NOTE&nbsp; The <span class="self-ref">IfcDoorLiningProperties</span> shall only be applied by the receiving application to parametrically define the 3D shape 
of a door, if the attribute <i>IfcDoorType.ParameterTakesPrecedence</i> is set TRUE.
</blockquote>

<p>The <span class="self-ref">IfcDoorLiningProperties</span> are included in the list of properties of <i>IfcDoorType.HasPropertySets</i>. More
information about the door lining can be included in the same list of the <i>IfcDoorTyype</i> using another
<strong>IfcPropertySet</strong> for dynamic extensions.</p>




<p class="use-head">Geometry use definitions</p>
<p>The <span class="self-ref">IfcDoorLiningProperties</span> does not hold its own geometric representation. However it defines parameters which can
be used to create the shape of the door style (which is inserted by the <strong>IfcDoor</strong> into the spatial context of the
project) as shown in 
<p>The parameters of the <span class="self-ref">IfcDoorLiningProperties</span> define a standard door lining, including (if given) a threshold and a
transom. The outer boundary of the lining is determined by the occurrence parameter assigned to the <strong>IfcDoor</strong>, which
inserts the <strong>IfcDoorStyle</strong>.</p>

<table>
 <tr>
  <td>
   <table border="1" cellpadding="2" cellspacing="2">
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorLiningProperties-Fig01.png" alt="lining 1" border="0" height="250" width="280"></td>
     <td align="left" valign="top">The lining is applied to the left, right and upper side of the opening reveal. The parameters are:
      <ul>
       <li><i>LiningDepth</i>, <span class="change">if omited, equal to wall thickness - this only takes effect if a value for
        <i>LiningThickness</i> is given. If both parameters are not given, then there is no lining.</span></li>
       <li><i>LiningThickness</i></li>
       <li><i>LiningToPanelOffsetX</i></li>
       <li><i>LiningToPanelOffsetY</i></li>
      </ul>
      <blockquote class="note">NOTE&nbsp; The parameters <i>LiningToPanelOffsetX</i> and <i>LiningToPanelOffsetY</i> are added in IFC4.</blockquote>
     </td>
    </tr>
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorLiningProperties-Fig02.png" alt="lining 2"border="0" height="250" width="280"></td>
     <td align="left" valign="top">The lining can only cover part of the opening reveal.
      <ul>
       <li><i>LiningOffset</i> : given if lining edge has an offset to the x axis of the local placement.</li>
      </ul>
      <blockquote class="note">NOTE&nbsp; In addition to theÂ <i>LiningOffset</i>, the local placement of the <strong>IfcDoor</strong> can already have an
       offset to the wall edge and thereby shift the lining along the y axis. The actual position of the lining is calculated from the
       origin of the local placement along the positive y axis with the distance given by <i>LiningOffset</i>.</blockquote>
     </td>
    </tr>
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorLiningProperties-Fig03.png" alt="lining 3" border="0" height="250" width="280"></td>
     <td align="left" valign="top">The lining may include a casing, which covers part of the wall faces around the opening. The
      casing covers the left, right and upper side of the lining on both sides of the wall. The parameters are:
      <ul>
       <li><i>CasingDepth</i></li>
       <li><i>CasingThickness</i></li>
      </ul>
     </td>
    </tr>
    <tr>
     <td align="left" valign="top"><img src="../../../figures/IfcDoorLiningProperties-Fig04.png" alt="lining 4" border="0" height="250" width="250"></td>
     <td align="left" valign="top">The lining may include a threshold, which covers the bottom side of the opening. The parameters are:
      <ul>
       <li><i>ThresholdDepth</i> &mdash; if omited, equal to wall thickness - this only takes effect if a value for <i>ThresholdThickness</i> is
        given. If both parameters are not given, then there is no threshold.</li>
       <li><i>ThresholdThickness</i></li>
       <li><i>ThresholdOffset</i> (not shown in figure): given, if the threshold edge has an offset to the x axis of the local placement.</li>
      </ul>
     </td>
    </tr>
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorLiningProperties-Fig05.png" alt="lining 5" border="0" height="300" width="250"></td>
     <td align="left" valign="top">The lining may have a transom which separates the door panel from a window panel. The transom, if given, is defined by:
      <ul>
       <li><i>TransomOffset</i> : a parallel edge to the x axis of the local placement</li>
       <li><i>TransomThickness</i></li>
      </ul>
      <p>The depth of the transom is identical to the depth of the lining and not given as separate parameter.</p>
     </td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="figure">
 </tr>
</table>

<blockquote class="note">NOTE&nbsp; <i>LiningDepth</i> describes the length of the lining along the reveal of the door opening. It can be given by an absolute value if the door lining has a specific depth depending on the door style. However often it is equal to the wall thickness. If the same door style is used (like the same type of single swing door), but inserted into different walls with different thicknesses, it would be necessary to create a special door style for each wall thickness. Therefore several CAD systems allow to set the value to "automatically aligned" to wall thickness. This should be exchanged by leaving the optional attribute LiningDepth unassigned. The same agreement applies to <i>ThresholdDepth</i>.
</blockquote>

<h1>IfcDoorPanelOperationEnum</h1>
                                
                                <h1>IfcDoorPanelPositionEnum</h1>
                                
                                <h1>IfcDoorPanelProperties</h1>
                                
                                <p>A door panel is normally a door leaf that opens to allow people or
goods to pass. The parameters of the door panel define the
geometrically relevant parameter of the panel,</p>

<p>The <span class="self-ref">IfcDoorPanelProperties</span> are used to parametrically
describe the shape and operation of door panels. The parametric
definition can be added solely or additionally to the explicit
shape representation of the door.</p>

<p>The <strong>IfcDoorStyle</strong> can define doors consisting of more
then one panel. In this case, one instance of
<span class="self-ref">IfcDoorPanelProperties</span> has to be included for each door
panel. The <i>PanelPosition</i> attribute, in conjunction with
the <i>IfcDoorStyle.OperationType</i> attribute, determines to
which panel the <span class="self-ref">IfcDoorPanelProperties</span> apply.</p>
<p>The <span class="self-ref">IfcDoorPanelProperties</span> are included in the list of
properties , given by attribute <i>HasPropertySets</i> of the
<strong>IfcDoorStyle</strong>. More information about the door panel can be
included in the same list of the <strong>IfcDoorStyle</strong> using the
<strong>IfcPropertySet</strong> for dynamic extensions.</p>




<p class="use-head">Geometry use definitions</p>

<p>The <span class="self-ref">IfcDoorPanelProperties</span> does not hold a geometric representation. However it defines parameters which can be used to create the shape of the door style (which is inserted by the <strong>IfcDoor</strong> into the spatial context of the project) as shown in 
<p>The parameters of the <span class="self-ref">IfcDoorPanelProperties</span> define a standard door panel, including (if given) a proportional width to define non-uniform double swing (or sliding, or folding) doors. The outer boundary of the panel is determined by the occurrence parameter assigned to the <strong>IfcDoor</strong>, which inserts the <strong>IfcDoorStyle</strong>. It has to take the lining parameter into account as well.</p>

<table>
 <tr>
  <td>
   <table border="1" cellpadding="2" cellspacing="2">
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorPanelProperties-Fig01.gif" alt="panel 1" border="0" height="187" width="266"></td>
     <td align="left" valign="top">The depth of the panel (swinging, double-acting, and sliding panels) is defined by the <i>PanelDepth</i> parameter.
      <ul>
       <li><i>PanelDepth</i></li>
      </ul>
     </td>
    </tr>
    <tr valign="top">
     <td align="left" valign="top"><img src="../../../figures/IfcDoorPanelProperties-Fig02.gif" alt="panel 2" border="0" height="259" width="304"></td>
     <td align="left" valign="top">For door operation types that include more than one panel, the width of (at least) one panel is
      given by a normalised ratio measure. It determines the width of that panel, which is defined as a ratio of the overall width of the door opening.
      <ul>
       <li><i>PanelWidth</i></li>
      </ul>
     </td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="figure">
 </tr>
</table>

<h1>IfcDoorStyle</h1>
                                
                                <p>Definition: The door style, <span class="self-ref">IfcDoorStyle</span>, defines a particular style of doors, which may be included into the spatial context of the building model through instances of <strong>IfcDoor</strong>. A door style defines the overall parameter of the door style and refers to the particular parameter of the lining and one (or several) panels through the <strong>IfcDoorLiningProperties</strong> and the <strong>IfcDoorPanelProperties</strong>.</p>

<p>The door entity, <strong>IfcDoor</strong>, defines a particular occurrence of a door inserted in the spatial context of a
project. The actual parameter of the door and/or its shape is defined at the <span class="self-ref">IfcDoorStyle</span>, to which the <strong>IfcDoor</strong>
is related by the inverse relationship <i>IsDefinedBy</i> pointing to <i>IfcRelDefinedByType</i>. The <span class="self-ref">IfcDoorStyle</span>
also defines the particular attributes for the lining<i>, IfcDoorLiningProperties</i>, and panels, <strong>IfcDoorPanelProperties</strong>.</p>


<blockquote class="deprecated">
DEPRECATION&nbsp; The entity is deprecated and shall not be used. The new entity <strong>IfcDoorType</strong> shall be used instead.
</blockquote>

<p class="use-head">Geometry use definitions</p>

<p>The <span class="self-ref">IfcDoorStyle</span> defines the baseline geometry, or the representation map, for all occurrences of the door style, given
by the <strong>IfcDoor</strong>, pointing to this style. The representation of the door style may be given by the agreed set of minimal
parameters, defined for the door lining and the door panel(s), or it may be given by a geometric representation used by the
<strong>IfcRepresentationMap</strong>. The attribute <i>ParameterTakesPrecedence</i> decides, whether the set of parameters can be used to exactly represent the shape of the door style (TRUE), or whether the attached <strong>IfcRepresentationMap</strong>
holds the exact representation (FALSE).</p>

<p>The <i>IfcDoorStyleOperationTypeEnum</i> defines the general layout of the door style. Depending on the enumerator, the
appropriate instances of <strong>IfcDoorLiningProperties</strong> and <strong>IfcDoorPanelProperties</strong> are attached in the list of
<i>HasPropertySets</i>. The <i>IfcDoorStyleOperationTypeEnum</i> mainly determines the hinge side (left hung, or right hung), the
operation (swinging, sliding, folding, etc.)Â and the number of panels.</p>

<p>See geometry use definitions at <i>IfcDoorStyleOperationTypeEnum</i> for the correct usage of opening symbols for different operation types.</p>

<h1>IfcDoorStyleConstructionEnum</h1>
                                
                                <h1>IfcDoorStyleOperationEnum</h1>
                                
                                <h1>IfcPermeableCoveringOperationEnum</h1>
                                
                                <h1>IfcPermeableCoveringProperties</h1>
                                
                                <p>This entity is a description of a panel within a
door or window (as fillers for opening) which allows for air
flow. It is given by its properties
(<span class="self-ref">IfcPermeableCoveringProperties</span>). A permeable covering is
a casement, such as a component, fixed or opening, consisting
essentially of a frame and the infilling. The infilling is
normally a grill, a louver or a screen. The way of operation is
defined in the operation type.</p>
<p>The <span class="self-ref">IfcPermeableCoveringProperties</span> are included in the
list of properties (<i>HasPropertySets</i>) of the
<strong>IfcWindowStyle</strong> or the <strong>IfcDoorStyle</strong>. More
information about the permeable covering can be included in the
same list of the window or door style using the
<strong>IfcPropertySet</strong> for dynamic extensions. This particularly
applies for additional properties for the various operation
types</p>




<p class="use-head">Geometry use definitions</p>
<p>The <span class="self-ref">IfcPermeableCoveringProperties</span> does not hold a geometric representation. However it defines parameters which can be used to create the shape of the <strong>IfcWindowStyle</strong> (which is inserted by the <strong>IfcWindow</strong> into the spatial context of the project), or of the <strong>IfcDoorStyle</strong> (which is inserted by the <strong>IfcDoor</strong>).</p>
<p>The parameters at the <span class="self-ref">IfcPermeableCoveringProperties</span> define a standard permeable covering. The outer boundary of the panel is determined by the occurrence parameter assigned to the
<strong>IfcWindow</strong> or <strong>IfcDoor</strong>. It has to take the lining parameter into account as well. The position of the permeable covering within the overall window or door is determined by the
<i>PanelPosition</i> attribute.</p>


<p>

<table>
<tr><td><img src="../../../figures/IfcPermeableCoveringProperties.gif" alt=
"covering" width="400" height="215" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcWindowLiningProperties</h1>
                                
                                <p>The window lining is the outer
frame which enables the window to be fixed in position. The
window lining is used to hold the window panels or other
casements. The parameter of the <span class="self-ref">IfcWindowLiningProperties</span>
define the geometrically relevant parameter of the lining.</p>

<blockquote class="note">
NOTE&nbsp; The <span class="self-ref">IfcWindowLiningProperties</span>
shall only be applied to construct the 3D shape of a window, if
the attribute <i>IfcWindowStyle.ParameterTakesPrecedence</i> is
set TRUE.
</blockquote>

<p>The <span class="self-ref">IfcWindowLiningProperties</span> are included in the set
of properties of <i>IfcWindowStyle.HasPropertySets</i>. More
information about the window lining can be included in the same
set of the <strong>IfcWindowStyle</strong> using another
<strong>IfcPropertySet</strong> for dynamic extensions.</p>




<p class="use-head">Geometry use definitions</p>
<p>The <span class="self-ref">IfcWindowLiningProperties</span> does not hold a geometric representation. However it defines parameters which can be used to create the shape of the window style (which is inserted by the <strong>IfcWindow</strong> into the spatial context of the project) as shown in 
<p>The parameters at the <span class="self-ref">IfcWindowLiningProperties</span> define a standard window lining, including (if given) a mullion and a transom (for horizontal and vertical splits). The outer boundary of the lining is determined by the occurrence parameter assigned to the <strong>IfcWindow</strong>, which inserts the <strong>IfcWindowStyle</strong>.</p>

<table>
 <tr>
  <td>
   <table border="1" cellpadding="2" cellspacing="2">
    <tr>
     <td><img src="../../../figures/IfcWindowLiningProperties-Fig05.png" alt="lining 5" width="280" height="250" border="0"></td>
     <td valign="top" align="left"><p>The lining is applied to all faces of the opening reveal. The parameter are:</p>
      <ul>
       <li><i>LiningDepth</i></li>
       <li><i>LiningThickness</i></li>
       <li><i>LiningOffset</i></li>
       <li><i>LiningToPanelOffsetX</i></li>
       <li><i>LiningToPanelOffsetY</i></li>
      </ul>
      <blockquote class="note">NOTE&nbsp; Parameters <i>LiningOffset</i>, <i>LiningToPanelOffsetX</i>, <i>LiningToPanelOffsetY</i> added in IFC4.
      </blockquote>
      <p>The inner side is defined as the direction of the window panel opening operation.</p>
     </td>
    </tr>
    <tr>
     <td><img src="../../../figures/IfcWindowLiningProperties-Fig01.png" alt="lining 1" width="250" height="200" border="0"></td>
     <td valign="top" align="left">
      <p>If the <i>OperationType</i> of the window style is</p>
      <ul>
       <li>DoublePanelVertical (shown)</li>
       <li>TriplePanelBottom</li>
       <li>TriplePanelTop</li>
       <li>TriplePanelLeft</li>
       <li>TriplePanelRight</li>
      </ul>
      <p>the following additional parameter apply:</p>
      <ul>
       <li><i>MullionThickness</i></li>
       <li><i>FirstMullionOffset</i> - measured as offset to the Z axis (in XZ plane)</li>
      </ul>
     </td>
    </tr>
    <tr>
     <td><img src="../../../figures/IfcWindowLiningProperties-Fig02.png" alt="lining 2" width="250" height="200" border="0"></td>
     <td valign="top" align="left">
      <p>If the <i>OperationType</i> of the window style is</p>
      <ul>
       <li>DoublePanelHorizontal</li>
       <li>TriplePanelBottom</li>
       <li>TriplePanelTop</li>
       <li>TriplePanelLeft</li>
       <li>TriplePanelRight</li>
      </ul>
      <p>the following additional parameter apply</p>
      <ul>
       <li><i>TransomThickness</i></li>
       <li><i>FirstTransomOffset</i> measured as offset to the X axis (in XZ plane)</li>
      </ul>
     </td>
    </tr>
    <tr>
     <td><img src="../../../figures/IfcWindowLiningProperties-Fig03.png" alt="lining 3" width="280" height="200" border="0"></td>
     <td valign="top" align="left">
      <p>If the <i>OperationType</i> of the window style is</p>
      <ul>
       <li><i>TriplePanelVertical</i></li>
      </ul>
      <p>the following additional parameter apply</p>
      <ul>
       <li><i>SecondMullionOffset</i></li>
      </ul>
     </td>
    </tr>
    <tr>
     <td><img src="../../../figures/IfcWindowLiningProperties-Fig04.png" alt="lining 4" width="250" height="250" border="0"></td>
     <td valign="top" align="left">
      <p>If the <i>OperationType</i> of the window style is</p>
      <ul>
       <li><i>TriplePanelHorizontal</i></li>
      </ul>
      <p>the following additional parameter apply</p>
      <ul>
       <li><i>SecondTransomOffset</i></li>
      </ul>
     </td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="figure">
 </tr>
</table>

<p>NOTE</p>
<ol>
<li>All offsets are given as a normalized ratio measure.</li>
</ol>

<h1>IfcWindowPanelOperationEnum</h1>
                                
                                <h1>IfcWindowPanelPositionEnum</h1>
                                
                                <h1>IfcWindowPanelProperties</h1>
                                
                                <p>A window panel is a casement, that is, a component, fixed or opening, consisting essentially of a frame and the infilling. The
infilling of a window panel is normally glazing. The way of operation is defined in the operation type.</p>
<p>The <span class="self-ref">IfcWindowPanelProperties</span> are used to parametrically describe the shape and operation of window panels. The parametric
definition can be added solely or additionally to the explicit shape representation of the window.</p>
<p>The <strong>IfcWindowStyle</strong> can define windows consisting of more then one panel. In this case, one instance of
<span class="self-ref">IfcWindowPanelProperties</span> has to be included for each window panel. The <i>PanelPosition</i> attribute, in conjunction
with the <i>IfcWindowStyle.OperationType</i> attribute, determines to which panel the <span class="self-ref">IfcWindowPanelProperties</span>apply.</p>
<p>The <span class="self-ref">IfcWindowPanelProperties</span> are included in the list of properties (<i>HasPropertySets</i>) of the
<strong>IfcWindowStyle</strong>. More information about the window panel can be included in the same list of the <strong>IfcWindowStyle</strong>
using the <strong>IfcPropertySet</strong> for dynamic extensions.</p>




<p class="use-head">Geometry use definitions</p>
<p>The <span class="self-ref">IfcWindowPanelProperties</span> does not hold an own geometric representation. However it defines parameter, which can
be used to create the shape of the <strong>IfcWindowType</strong> (which is inserted by the <strong>IfcWindow</strong> into the spatial context of
the project).</p>
<p>The parameters at the <span class="self-ref">IfcWindowPanelProperties</span> define a standard window panel. The outer boundary of the panel is
determined by the occurrence parameter assigned to the IfcWindow, which inserts the IfcWindowStyle. It has to take the lining
parameter into account as well. The position of the window panel within the overall window is determined by the
<i>PanelPosition</i> attribute.</p>

<p>As shown in 
The following parameter apply to that panel: <i>FrameDepth</i>, <i>FrameThickness</i>.</p>

<table border="0">
 <tr>
  <td><img src="../../../figures/IfcWindowPanelProperties-Fig01.gif" alt="panel 1" width="239" height="129" border="0"></td>
 </tr>
 <tr>
  <td><p class="figure">
 </tr>
</table>

<h1>IfcWindowStyle</h1>
                                
                                <p>The window style defines a particular style of windows, which may be included into the spatial context of the building model through instances of <strong>IfcWindow</strong>. A window style defines the overall parameter of the window style and refers to the particular parameter of the lining and one (or several) panels through <strong>IfcWindowLiningProperties</strong> and <strong>IfcWindowPanelProperties</strong>.</p>

<p>The window entity (<strong>IfcWindow</strong>) defines a particular occurrence of a window inserted in the spatial context of a project. The actual parameter of the window and/or its shape is defined at the <span class="self-ref">IfcWindowStyle</span>, to which the <strong>IfcWindow</strong> related by the inverse relationship <i>IsDefinedBy</i> pointing to <strong>IfcRelDefinesByType</strong>. The <span class="self-ref">IfcWindowStyle</span> also defines the particular attributes for the lining (<strong>IfcWindowLiningProperties</strong>) and panels (<strong>IfcWindowPanelProperties</strong>).</p>


<blockquote class="deprecated">
IFC4 CHANGE&nbsp; The entity has been deprecated and shall not be used. The new entity <strong>IfcWindowType</strong> shall be used instead.
</blockquote>

<p class="use-head">Geometry use definitions</p>
<p>The <span class="self-ref">IfcWindowStyle</span> defines the baseline geometry, or the representation map, for all occurrences of the window style,
given by the IfcWindow, pointing to this style. The representation of the window style may be given by the agreed set
of minimal parameters, defined for the window lining and the window panel(s), or it may be given by a geometric representation
used by the <strong>IfcRepresentationMap</strong>. The attribute <i>ParameterTakesPrecedence</i> decides, whether the set of
parameters can be used to exactly represent the shape of the window style (TRUE), or whether the attached <strong>IfcRepresentationMap</strong> holds the exact representation (FALSE).</p>

<p>The <i>IfcWindowStyleOperationTypeEnum</i> defines the general layout of the window style. Depending on the enumerator, the
appropriate instances of <strong>IfcWindowLiningProperties</strong> and <strong>IfcWindowPanelProperties</strong> are attached in the list of
<i>HasPropertySets</i>. See geometry use definitions there.</p>

<h1>IfcWindowStyleConstructionEnum</h1>
                                
                                <h1>IfcWindowStyleOperationEnum</h1>
                                
                                <h1>IfcActuator</h1>
                                
                                <p>An actuator is a mechanical device for moving or controlling a mechanism or system. An actuator takes energy, usually created by air, electricity, or liquid, and converts that into some kind of motion.</p> 
 


<h1>IfcActuatorType</h1>
                                
                                <p>The distribution control element type <b>IfcActuatorType</b> defines commonly shared information for occurrences of actuators. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a actuator type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcActuatorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcActuatorType</b> are represented by instances of <strong>IfcActuator</strong>. 
Refer to the documentation at <strong>IfcActuator</strong> for supported property sets, materials, composition, and ports.</p>
 


<h1>IfcActuatorTypeEnum</h1>
                                
                                <h1>IfcAlarm</h1>
                                
                                <p>An alarm is a device that signals the existence of a condition or situation that is outside the boundaries of normal expectation or that activates such a device.</p>
              <p>Alarms include the provision of break glass buttons and manual pull boxes that are used to activate alarms.</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcAlarmType</h1>
                                
                                <p>The distribution control element type <b>IfcAlarmType</b> defines commonly shared information for occurrences of alarms. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a alarm type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcAlarmType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcAlarmType</b> are represented by instances of <strong>IfcAlarm</strong>. 
Refer to the documentation at <strong>IfcAlarm</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcAlarmTypeEnum</h1>
                                
                                <h1>IfcController</h1>
                                
                                <p>A controller is a device that monitors inputs and controls outputs within a building automation system.</p>
              <p>A controller may be physical (having placement within a spatial structure) or logical (a software interface or aggregated within a programmable physical controller).</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcControllerType</h1>
                                
                                <p>The distribution control element type <b>IfcControllerType</b> defines commonly shared information for occurrences of controllers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a controller type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcControllerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcControllerType</b> are represented by instances of <strong>IfcController</strong>. 
Refer to the documentation at <strong>IfcController</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcControllerTypeEnum</h1>
                                
                                <h1>IfcFlowInstrument</h1>
                                
                                <p>A flow instrument reads and displays the value of a particular property of a system at a point, or displays the difference in the value of a property between two points.</p>
              <p>Instrumentation is typically for the purpose of determining the value of the property at a point in time. It is not the purpose of an instrument to record or integrate the values over time (although they may be connected to recording devices that do perform such a function). This entity provides for all forms of mechanical flow instrument (thermometers, pressure gauges etc.) and electrical flow instruments (ammeters, voltmeters etc.)</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcFlowInstrumentType</h1>
                                
                                <p>The distribution control element type <b>IfcFlowInstrumentType</b> defines commonly shared information for occurrences of flow instruments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a flow instrument type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFlowInstrumentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFlowInstrumentType</b> are represented by instances of <strong>IfcFlowInstrument</strong>. 
Refer to the documentation at <strong>IfcFlowInstrument</strong> for supported property sets, materials, composition, and ports.</p>

<h1>IfcFlowInstrumentTypeEnum</h1>
                                
                                <h1>IfcSensor</h1>
                                
                                <p>A sensor is a device that measures a physical quantity and converts it into a signal which can be read by an observer or by an instrument.</p> 
 
<blockquote class="note"></blockquote>

<p class="use-head">Connection Use Definition</p>
<p>The <b>IfcSensor</b> may be connected to other objects as follows using the indicated relationship:</p>
<ul>
<li><b><strong>IfcDistributionFlowElement</strong></b> (<strong>IfcRelFlowControlElements</strong>): Sensors may be connected to a flow element for which an aspect of the fluid or flow is measured.</li>
<li><b><strong>IfcElement</strong></b> (<strong>IfcRelConnectsElements</strong>): Sensors may be attached to the exterior of an element.</li>
</ul>



<h1>IfcSensorType</h1>
                                
                                <p>The distribution control element type <b>IfcSensorType</b> defines commonly shared information for occurrences of sensors. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a sensor type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSensorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSensorType</b> are represented by instances of <strong>IfcSensor</strong>. 
Refer to the documentation at <strong>IfcSensor</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcSensorTypeEnum</h1>
                                
                                <h1>IfcUnitaryControlElement</h1>
                                
                                <p>A unitary control element combines a number of control components into a single product, such as a thermostat or humidistat.</p>
<p>A unitary control element provides a housing for an aggregation of control or electrical distribution elements that, in combination, perform a singular (unitary) purpose. Each item in the aggregation may have its own geometric representation and location.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcUnitaryControlElementType</h1>
                                
                                <p>The distribution control element type <b>IfcUnitaryControlElementType</b> defines commonly shared information for occurrences of unitary control elements. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a unitary control element type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcUnitaryControlElementType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcUnitaryControlElementType</b> are represented by instances of <strong>IfcUnitaryControlElement</strong>. 
Refer to the documentation at <strong>IfcUnitaryControlElement</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcUnitaryControlElementTypeEnum</h1>
                                
                                <h1>IfcBenchmarkEnum</h1>
                                
                                <h1>IfcConstraint</h1>
                                
                                <p>An <span class="self-ref">IfcConstraint</span> is used to define a constraint or limiting value or boundary condition that may be applied to an object or to the value of a property. </p> 

<p><span class="self-ref">IfcConstraint</span> may be associated with any subtype of <strong>IfcRoot</strong> (unless restricted in specific subtypes) through the <strong>IfcRelAssociatesConstraint</strong> relationship in the <i>IfcControlExtension</i> schema, or may be associated with <strong>IfcProperty</strong> by <i>IfcPropertyConstraintRelationship</i>.</p> 

<p>A constraint must have a name applied through the <i>IfcConstraint.Name</i> attribute and optionally, a description through <i>IfcConstraint.Description</i>. The grade of the constraint (hard, soft, advisory) must be specified through <i>IfcConstraint.ConstraintGrade</i> or <i>IfcConstraint.UserDefinedGrade</i> whilst the source, creating actor and time at which the constraint is created may be optionally asserted through <i>IfcConstraint.ConstraintSource</i>, <i>IfcConstraint.CreatingActor</i> and <i>IfcConstraint.CreationTime</i>.</p> 

<p>A constraint may also have additional external information (such as classification or document information) associated to it by <strong>IfcExternalReferenceRelationship</strong>, accessible through inverse attribute <i>IfcConstraint.HasExternalReferences</i></p>

 



<h1>IfcConstraintEnum</h1>
                                
                                <h1>IfcLogicalOperatorEnum</h1>
                                
                                <h1>IfcMetric</h1>
                                
                                <p>
      An <span class="self-ref">IfcMetric</span> is used to capture quantitative
      resultant metrics that can be applied to objectives.
    </p>
    <p>
      <span class="self-ref">IfcMetric</span> is a subtype of <strong>IfcConstraint</strong> and
      may be associated with any subtype of <strong>IfcRoot</strong>
      through the <strong>IfcRelAssociatesConstraint</strong> relationship
      in the <i>IfcControlExtension</i> schema, or may be
      associated with <strong>IfcProperty</strong> by
      <strong>IfcResourceConstraintRelationship</strong>.
    </p>
    <p>
      The aim of <span class="self-ref">IfcMetric</span> is to capture the quantitative
      aspects of a constraint.
    </p>

    
    


<h1>IfcMetricValueSelect</h1>
                                
                                <h1>IfcObjective</h1>
                                
                                <p>An <span class="self-ref">IfcObjective</span> captures qualitative information for an objective-based constraint.</p>

<p><span class="self-ref">IfcObjective</span> is a subtype of <strong>IfcConstraint</strong> and may be associated with any subtype of <strong>IfcRoot</strong> through the <strong>IfcRelAssociatesConstraint</strong> relationship in the <i>IfcControlExtension</i> schema, or may be associated with <strong>IfcProperty</strong> by <strong>IfcResourceConstraintRelationship</strong>.</p>

<p>The aim of <span class="self-ref">IfcObjective</span> is to specify the purpose for which the constraint is applied and to capture the benchmark metrics of the constraint.</p> 



 

<h1>IfcObjectiveEnum</h1>
                                
                                <h1>IfcReference</h1>
                                
                                <p>This entity is used to refer to a value of an attribute on an instance.  
It may refer to the value of a scalar attribute or a value within a collection-based attribute.
Referenced attributes may be direct values, object references, collections, inverse object references, and inverse collections.
References may be chained to form a path of object-attribute references.
</p><h1>IfcResourceConstraintRelationship</h1>
                                
                                <p>
      An <span class="self-ref">IfcResourceConstraintRelationship</span> is a
      relationship entity that enables a constraint to be related
      to one or more resource level objects.
    </p>
    <p>
      An <span class="self-ref">IfcResourceConstraintRelationship</span> allows for the
      specification of a constraint to be applied to many entity
      types. An important case is to apply constraints to
      properties. The constraints applied therefore enable a
      property to carry values identifying requirements as well as
      those identifying the fulfilment of those requirements.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; 
      applied to a property within a property set. For simplicity,
      only the mandatory attributes are shown as asserted. It shows
      how a property 'ThingWeight' which has a nominal value of
      19.5 kg has two constraints that are logically aggregated by
      an AND connection. One of the constraints has a benchmark of
      'GREATERTHANOREQUALTO' whilst the second has a benchmark of
      'LESSTHANOREQUALTO'. This means that the constraint must lie
      between these two bounding values. The relating constraint is
      instantiated as an objective named as 'Weight Constraint' and
      qualified as a SPECIFICATION constraint. The two related
      constraints are both specified as metrics since they can have
      specific values.
    </blockquote>
    <blockquote>
      <table summary="constraint of properties">
        <tr valign="top">
          <td>
            <img src=
            "../../../figures/IfcResourceConstraintRelationship_fig-1.png"
            alt="Constraint usage for properties" border="0">
          </td>
        </tr>
        <tr>
          <td>
            <p class="figure">
          </td>
        </tr>
      </table>
    </blockquote>
    
    
<h1>IfcConstructionEquipmentResource</h1>
                                
                                <p><span class="self-ref">IfcConstructionEquipmentResource</span> is usage of construction equipment to assist in the performance of construction. Construction Equipment resources are wholly or partially consumed or occupied in the performance of construction.
</p> 
 


<p>Occurrences of <span class="self-ref">IfcConstructionEquipmentResource</span> are products that are used as resources to assist the process of construction. More specifically, they are products that are standalone items brought to a project to fulfil a particular purpose. Examples might be a tower crane or other mobile crane, a screwing machine, or a lifting hoist. 

<p>
Instances of any subtype of <strong>IfcProduct</strong> may be assigned to the 
equipment resource using <strong>IfcRelAssignsToResource</strong> in order to 
characterize the equipment further, as described at the supertype 
<strong>IfcResource</strong>.  Examples of relevant subtypes of <strong>IfcProduct</strong> are 
<strong>IfcTransportElement</strong>, <strong>IfcDiscreteAccessory</strong>, or <strong>IfcProxy</strong> (for particular 
cases where more precise usage details are not available)
</p>

<p></p>

<h1>IfcConstructionEquipmentResourceType</h1>
                                
                                <p>The resource type <i>IfcConstructionEquipmentType</i> defines commonly shared information for occurrences of construction equipment resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>
<p>It is used to define a construction equipment resource specification (the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcConstructionEquipmentResourceType</span> are represented by instances of <strong>IfcConstructionEquipmentResource</strong>.</p>



<p class="use-head">Assignment use definition</p>
<p>In addition to assignments specified at the base class <strong>IfcConstructionResourceType</strong>, a construction equipment resource type may have assignments of its own using <strong>IfcRelAssignsToResource</strong> where <i>RelatingResource</i> refers to the <span class="self-ref">IfcConstructionEquipmentResourceType</span> and <i>RelatedObjects</i> contains one or more <strong>IfcTypeProduct</strong> subtypes.  Such relationship indicates the type of equipment to be used as input, which is instantiated as an occurrence assigned for each resource occurrence.  There may be multiple chains of production where such product type may have its own task and resource types assigned indicating how to assemble such equipment.</p>

<h1>IfcConstructionEquipmentResourceTypeEnum</h1>
                                
                                <h1>IfcConstructionMaterialResource</h1>
                                
                                <p><span class="self-ref">IfcConstructionMaterialResource</span> identifies a material resource type in a construction project.</p> 





<p>Occurrences of <span class="self-ref">IfcConstructionMaterialResource</span> are consumed (wholly or partially), or occupied during a construction work task (<strong>IfcTask</strong>).</p> 

<p>Similar to <strong>IfcConstructionProductResource</strong>, sometimes things such as 5000kg of gravel are already instantiated as an instance of an <strong>IfcProduct</strong> subtype because it is a result of a work task (for example, &#145;transporting gravel&#146;). In this case, the instance of <span class="self-ref">IfcConstructionMaterialResource</span> can be associated with the product instance &#145;5000kg of gravel&#146; to provide more information for resource uses. Nevertheless, <span class="self-ref">IfcConstructionMaterialResource</span> should only be used to represent resource usage, but not product substances.</p> 

<blockquote class="note">NOTE&nbsp; 
This entity is not the same as <strong>IfcMaterial</strong>.  One one hand, 
<span class="self-ref">IfcConstructionMaterialResource</span> represents usage of bulk materials 
such as sand, gravels, nails and so on.  Physical manifestations can be instantiated from 
<strong>IfcProduct</strong> as well, depending on their uses in the system, and such an 
<strong>IfcProduct</strong> object can be assigned to the <span class="self-ref">IfcConstructionMaterialResource</span> 
object via <strong>IfcRelAssignsToResource</strong>.  On the other hand, <strong>IfcMaterial</strong> is 
about physical materials that a physical building element consists of, 
possibly with detailed material layering information."
</blockquote>

<h1>IfcConstructionMaterialResourceType</h1>
                                
                                <p>The resource type <i>IfcConstructionMaterialType</i> defines commonly shared information for occurrences of construction material resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>
<p>It is used to define a construction material resource specification (the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcConstructionMaterialResourceType</span> are represented by instances of <strong>IfcConstructionMaterialResource</strong>.</p>



<p class="use-head">Assignment Use Definition</p>
<p>In addition to assignments specified at the base class <strong>IfcConstructionResourceType</strong>, a construction material resource type may have assignments of its own using <strong>IfcRelAssignsToResource</strong> where <i>RelatingResource</i> refers to the <span class="self-ref">IfcConstructionMaterialResourceType</span> and <i>RelatedObjects</i> contains one or more <strong>IfcTypeProduct</strong> subtypes.  Such relationship indicates material specifications to be used as input, which is instantiated as an occurrence assigned for each resource occurrence.  The <strong>IfcGeographicElementType</strong> product type may be used to hold the material representation (via <strong>IfcRelAssociatesMaterial</strong>. There may be multiple chains of production where such product type may have its own task and resource types assigned indicating how to transport or extract such material.</p>

<h1>IfcConstructionMaterialResourceTypeEnum</h1>
                                
                                <h1>IfcConstructionProductResource</h1>
                                
                                <p><span class="self-ref">IfcConstructionProductResource</span> defines the role of a product that is consumed (wholly or partially), or occupied in the performance of construction.</p> 
	 
 

<p>Occurrences of <span class="self-ref">IfcConstructionProductResource</span> are usage of products to assist the process of construction. More specifically, they are usage of products that result from some construction processes and that are then used as resources to facilitate further construction. For instance, formworks can be instantiated as products resulting from the process &#145;constructing formwork&#146;. However, they are used as resources in the process &#145;pouring concrete&#146; in a later stage of the project. 
</p> 


<h1>IfcConstructionProductResourceType</h1>
                                
                                <p>The resource type <i>IfcConstructionProductType</i> defines commonly shared information for occurrences of construction product resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>
<p>It is used to define a construction product resource specification (i.e. the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcConstructionProductResourceType</span> are represented by instances of <strong>IfcConstructionProductResource</strong>.</p>



<p class="use-head">Assignment use definition</p>
<p>In addition to assignments specified at the base class <strong>IfcConstructionResourceType</strong>, a construction product resource type may have assignments of its own using <strong>IfcRelAssignsToResource</strong> where <i>RelatingResource</i> refers to the <span class="self-ref">IfcConstructionProductResourceType</span> and <i>RelatedObjects</i> contains one or more <strong>IfcTypeProduct</strong> subtypes.  Such relationship indicates the type of product to be used as input, which is instantiated as an occurrence assigned for each resource occurrence.  There may be multiple chains of production where such product type may have its own task and resource types assigned.</p>

<h1>IfcConstructionProductResourceTypeEnum</h1>
                                
                                <h1>IfcConstructionResource</h1>
                                
                                <p><span class="self-ref">IfcConstructionResource</span> is an abstract generalization of the different resources used in
construction projects, mainly labour, material, equipment and product resources, plus subcontracted resources and aggregations such as a crew resource.</p>

<p>A resource represents "use of something" and does not necessarily correspond to a single item such as a person or vehicle, but
represents a pool of items having limited availability such as general labor or an equipment fleet. A resource can represent either a generic resource pool (not having any task assignment) or a task-specific resource allocation (having an <strong>IfcTask</strong>
assignment).</p>




<p class="use-head">Declaration use definition</p>
<p>A root-level resource (specifically <strong>IfcCrewResource</strong> or <strong>IfcSubContractResource</strong>) is declared within the project by <strong>IfcRelDeclares</strong> where <i>RelatingContext</i> refers to the single <strong>IfcProject</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span>, and other root-level objects within the project.</p>

<p class="use-head">Assignment use definition</p>
<p>A resource may be assigned to an actor by <strong>IfcRelAssignsToActor</strong> where <i>RelatingActor</i> refers to an <strong>IfcActor</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span> or other objects. Such relationship indicates the actor responsible for allocating the resource such as partitioning into task-specific allocations, delegating to other actors, and/or scheduling over time. Note that this assignment does not indicate the person or organization performing the work; that is indicated by <strong>IfcRelAssignsToResource</strong>. The actor responsible for the resource may or may not be the same as any actor(s) performing work.</p>
<p>A resource may be assigned to a control by <strong>IfcRelAssignsToControl</strong> where <i>RelatingProduct</i> refers to an <strong>IfcControl</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span> or other objects. Most commonly an <strong>IfcWorkCalendar</strong> is assigned indicating availability of the resource, where such calendar is nested within a base calendar or an <strong>IfcWorkPlan</strong> which in turn is assigned to the <strong>IfcProject</strong>.</p>
<p>A resource may be assigned to a group by <strong>IfcRelAssignsToGroup</strong> where <i>RelatingGroup</i> refers to an <strong>IfcGroup</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span> or other objects. Most commonly an <strong>IfcAsset</strong> is assigned indicating the asset to be tracked, where such asset is nested within an <strong>IfcInventory</strong> which in turn is assigned to the <strong>IfcProject</strong>.</p>
<p>A resource may be assigned to a product by <strong>IfcRelAssignsToProduct</strong> where <i>RelatingProduct</i> refers to an <strong>IfcProduct</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span> or other objects. Most commonly an <strong>IfcElement</strong> subtype is assigned indicating the product to be constructed, where such product is connected to a spatial
structure which in turn is aggregated within the <strong>IfcProject</strong>.</p>
<p>A resource may be assigned to a process by <strong>IfcRelAssignsToProcess</strong> where <i>RelatingProcess</i> refers to an <strong>IfcProcess</strong> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcConstructionResource</span> or other objects. Most commonly an <strong>IfcTask</strong> is assigned indicating the task to be performed by the resource, where such task is nested within a summary task which in turn is assigned to the <strong>IfcProject</strong>.</p> 
<p>A resource may have assignments of other objects using <strong>IfcRelAssignsToResource</strong> where <i>RelatingResource</i> refers to the <span class="self-ref">IfcConstructionResource</span> and <i>RelatedObjects</i> refers to one or more objects such as <strong>IfcActor</strong> or <strong>IfcProduct</strong> subtypes. This relationship indicates specific objects assigned to fulfill resource usage.</p>
<p>
<table>
<tr><td><img alt="Assignment Use Definition" src="../../../figures/IfcConstructionResource-Assignment.png"></td></tr>
<tr><td><p class="figure">
</table>

<p class="use-head">Baseline use definition</p>
<p>A resource may have any number of baselines defined using the relationship <strong>IfcRelDefinesByObject</strong> where <i>RelatingObject</i> is the "current" resource and <i>RelatedObjects</i> consists of multiple "baseline" resources, each representing a copy of the resource as it existed at an earlier point in time as shown in 
<i>PredefinedType=BASELINE</i>, <i>IfcWorkSchedule.CreationDate</i> indicating the date of the baseline, and
<i>IfcWorkSchedule.Name</i> indicating the name of the baseline.</p>
<table>
<tr><td><img alt="Baseline Use Definition" src="../../../figures/IfcConstructionResource-Baseline.png"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcConstructionResourceType</h1>
                                
                                <p><span class="self-ref">IfcConstructionResourceType</span> is an abstract generalization of the different resource types used in construction projects, mainly labor, material, equipment and product resource types, plus subcontracted resource types and aggregations such as a crew resource type.</p> 

<p>A resource type represents a model of "use of something" and does not necessarily correspond to a specific type of object such as a person or vehicle, but represents possible usages of such objects such as general labor or an equipment fleet.  A resource type can either represent usage in general (consumption attributes defined but no task type assignment) or a task-specific resource type (production attributes defined and having an <strong>IfcTask</strong> assignment).</p>

<p>A construction resource type captures common productivities and cost rates for applying resources to particular task types.</p>



<p class="use-head">Composition use definition</p>
<p>Resource types may be decomposed into nested resource types indicating productivities when applying the resource to specific task types using the <strong>IfcRelNests</strong> relationship where <i>IfcRelNests.RelatingObject</i> refers to the general resource type and <i>IfcRelNests.RelatedObjects</i> refers to one or more task-specific productivities.  For example, an <strong>IfcLaborResourceType</strong> may be defined for "Carpenter" which may have a nested <strong>IfcLaborResourceType</strong> for "Carpenter - Wall Framing" and another nested <strong>IfcLaborResourceType</strong> for "Carpenter - Drywall", each of which may have productivities based according to specific task types (<strong>IfcTaskType</strong>).</p> 

<p class="use-head">Assignment use definition</p>
<p>Resource types may be assigned to process types (<strong>IfcTypeProcess</strong> subtypes) using the <strong>IfcRelAssignsToProcess</strong> relationship as shown in 
<table>
<tr><td><img alt="Assignment Use Definition" src="../../../figures/IfcConstructionResourceType-Assignment.png"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcCrewResource</h1>
                                
                                <p><span class="self-ref">IfcCrewResource</span> represents a collection of internal resources used in construction processes.</p> 

 

<p>Identification of people and equipment of a crew is achieved through their specification at the level of the component. Therefore, knowing which persons are within a crew is achieved through identifying the persons assigned to each <strong>IfcLaborResource</strong> within the <span class="self-ref">IfcCrewResource</span>.  Similarly, identifying that a screwing machine for pipe fitting forms part of the crew is achieved by relating an appropriate instance of <strong>IfcElementComponent</strong> to the <strong>IfcConstructionEquipmentResource</strong> forming an element of the <span class="self-ref">IfcCrewResource</span>.</p>

<h1>IfcCrewResourceType</h1>
                                
                                <p>The resource type <span class="self-ref">IfcCrewResourceType</span> defines commonly shared information for occurrences of crew resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>
<p>It is used to define a crew resource specification (the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcCrewResourceType</span> are represented by instances of <strong>IfcCrewResource</strong>.</p>



<h1>IfcCrewResourceTypeEnum</h1>
                                
                                <h1>IfcLaborResource</h1>
                                
                                <p>An <span class="self-ref">IfcLaborResource</span> is used in construction with particular skills or crafts required to perform certain types of construction or management related work. </p> 

 



<p>The purpose of an <span class="self-ref">IfcLaborResource</span> is to identify a skillset that may be required or used. The skillset identified may be (for instance) charge-hand, foreman, labourer, plumbers mate etc. and provides a designation of a particular level of skill. It can be used to identify the generic type of labour resource that is required for a purpose without having to be specific about the actor (person or organization) providing the resource occurrence. It may be particularly useful when creating an overall plan for a process or processes. For instance, within maintenance or work planning there may be a known task that needs to be done which is planned to require a 'chargehand pipe fitter'. There may be several such labour resources available and so the need to identify which will be used is not necessary at the planning stage.</p>

<p>At a later stage, individual actors can be determined for the labour resources. This is achieved through specifying the actor through <strong>IfcActor</strong>. The actor is then identified as the labour resource occurrence through the <i>IfcRelAssignsToResource.RelatedResource</i> attribute. The <span class="self-ref">IfcLaborResource</span> provides the <strong>IfcRelAssignsToResource</strong>.<i>RelatingResource</i> attribute. </p>

<h1>IfcLaborResourceType</h1>
                                
                                <p>The resource type <span class="self-ref">IfcLaborResourceType</span> defines commonly shared information for occurrences of labour resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>

<p>It is used to define a labour resource specification (the specific resource information that is common to all occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>

<p>Occurrences of the <span class="self-ref">IfcLaborResourceType</span> are represented by instances of <strong>IfcLaborResource</strong>.</p>



<h1>IfcLaborResourceTypeEnum</h1>
                                
                                <h1>IfcSubContractResource</h1>
                                
                                <p><span class="self-ref">IfcSubContractResource</span> is a construction resource needed in a construction process that represents a sub-contractor. </p> 

 


<p>An <span class="self-ref">IfcSubContractResource</span> can be used in cost estimating and work planning with or without specifying the subcontractor and contract agreement.</p> 
<p>The purpose of an <span class="self-ref">IfcSubContractResource</span> is to indicate work of a particular type that is that is to be engaged through the use of a sub-contract. Its aim is to identify the description of the sub-contract work required. It can be used to identify the generic type of sub-contract resource that is required for a purpose without having to be specific about the actor (person or organization) providing the resource occurrence. It may be particularly useful when creating an overall plan for a process or processes. For instance, within maintenance or work planning there may be a known task that needs to be done which is planned to require an 'insulation specialist'. </p>
<p>A subcontract resource may be described at various stages and levels of detail through its assignments:</p>
<ul>
<li>Subcontract resource designated for particular tasks</li>
<li>Actors identified to request bids</li>
<li>Cost schedules (bids) received from actors</li>
<li>Project order (work order, change order, etc.) executed</li>
</ul>

<h1>IfcSubContractResourceType</h1>
                                
                                <p>The resource type <span class="self-ref">IfcSubContractResourceType</span> defines commonly shared information for occurrences of subcontract resources. The set of shared information may include:</p>
<ul>
<li>common productivities</li>
<li>common cost rates</li>
<li>common properties within shared property sets</li>
</ul>
<p>It is used to define a subcontract resource specification (the specific resource information that is common to all
occurrences of that resource). Resource types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcSubContractResourceType</span> are represented by instances of <strong>IfcSubContractResource</strong>.</p>



<h1>IfcSubContractResourceTypeEnum</h1>
                                
                                <h1>IfcPerformanceHistory</h1>
                                
                                <p><span class="self-ref">IfcPerformanceHistory</span> is used to document the actual performance of an occurrence instance over time. It includes machine-measured data from building automation systems and human-specified data such as task and resource usage.  The data may represent actual conditions, predictions, or simulations.</p>

<p>The realtime data tracked by performance history takes the form of property sets where all properties are based on time series. Unlike design-based data at occurrences and types, performance-driven data is time-sensitive and may change in realtime by some measurement device. Data may be captured at irregular intervals such as when values change beyond established thresholds, or at regular intervals of specified duration.</p>


<h4>Declaration use definition</h4>

<p><span class="self-ref">IfcPerformanceHistory</span> may be declared within a project using <strong>IfcRelDeclares</strong> where <i>RelatingContext</i> refers to the <strong>IfcProject</strong> and <i>RelatedDefinitions</i> includes the <span class="self-ref">IfcPerformanceHistory</span>. Default units (used for property sets) are indicated by the declaring project. Only top-level objects are declared; nested performance history objects (through <strong>IfcRelNests</strong>) do not participate in such relationship.</p>

 

<h1>IfcPerformanceHistoryTypeEnum</h1>
                                
                                <h1>IfcRelAssociatesApproval</h1>
                                
                                <p>The entity <span class="self-ref">IfcRelAssociatesApproval</span> is used to apply approval information defined by <strong>IfcApproval</strong>, in <i>IfcApprovalResource</i> schema, to subtypes of <strong>IfcRoot</strong>.
</p>

 

<h1>IfcRelAssociatesConstraint</h1>
                                
                                <p>The entity <span class="self-ref">IfcRelAssociatesConstraint</span> is used to apply constraint information defined by <strong>IfcConstraint</strong>, in the <i>IfcConstraintResource</i> schema, to subtypes of <strong>IfcRoot</strong>.
</p>

 

<h1>IfcAppliedValue</h1>
                                
                                <p>This entity captures a value driven by a formula, with additional qualifications including unit basis, valid date range, and categorization.</p> 

<p>The extent of the <span class="self-ref">IfcAppliedValue</span> is determined by the <i>AppliedValue</i> attribute which may be defined either as an <strong>IfcMeasureWithUnit</strong> or as an <strong>IfcMonetaryMeasure</strong> or as an <strong>IfcRatioMeasure</strong> via the <strong>IfcAppliedValueSelect</strong> type. </p> 

<p>Optionally, an <span class="self-ref">IfcAppliedValue</span> may have an applicable date. This is intended to fix the date on which the value became relevant for use. It may be the date on which the value was set in the model or it may be a prior or future date when the value becomes operable. Similarly, an <span class="self-ref">IfcAppliedValue</span> may have a 'fixed until' date. This is intended to fix the date on which the value ceases to be relevant for use.</p> 

<p>An instance of <span class="self-ref">IfcAppliedValue</span> may have a unit basis asserted.  This is defined as an <strong>IfcMeasureWithUnit</strong> that determines the extent of the unit value for application purposes. It is assumed that when this attribute is asserted, then the value given to <span class="self-ref">IfcAppliedValue</span> is that for unit quantity. This is not enforced within the schema and thus needs to be controlled within an application.</p>

<p>Applied values may be referenced from a document (such as a price list). The relationship between one or more occurrences of <span class="self-ref">IfcAppliedValue</span> (or its subtypes) is achieved through the use of the <strong>IfcExternalReferenceRelationship</strong> in which the document provides the <i>IfcExternalReferenceRelationship.RelatingExtReference</i> and the value occurrences are the <i>IfcExternalReferenceRelationship.RelatedResourceObjects</i>.</p>

 
 

<h1>IfcAppliedValueSelect</h1>
                                
                                <h1>IfcArithmeticOperatorEnum</h1>
                                
                                <h1>IfcCostValue</h1>
                                
                                <p><span class="self-ref">IfcCostValue</span> is an amount of money or a value that affects an amount of money.</p> 

<p>Each instance of <span class="self-ref">IfcCostValue</span> may also have a category. There are many possible types of cost value that may be identified. While there is a broad understanding of the meaning of names that may be assigned to different types of costs, there is no general standard for naming cost types nor are there any broadly defined classifications. </p>

<p>The following defines some cost categories that might be applied to the <i>Category</i> attribute: </p> 
<ul>
<li>Annual rate of return</li>
<li>Bonus</li>
<li>Bulk purchase rebate</li>
<li>Contract</li>
<li>Consultancy</li>
<li>Delivery</li>
<li>Estimated cost</li>
<li>Hire</li>
<li>Installation</li>
<li>Interest rate</li>
<li>Labor</li>
<li>Lease</li>
<li>List price</li>
<li>Maintenance</li>
<li>Material</li>
<li>Overhead</li>
<li>Postage and packing</li>
<li>Profit</li>
<li>Purchase</li> 
<li>Rental</li>
<li>Repair</li>
<li>Replacement</li>
<li>Sale</li>
<li>Small quantity surcharge</li>
<li>Spares</li>
<li>Storage</li>
<li>Sub-Contract</li>
<li>Trade discount</li>
<li>Transportation</li>
<li>Waste allowance</li>
<li>Whole life</li>
</ul>

<blockquote class="note">NOTE&nbsp; In the absence of any well-defined standard, it is recommended that local agreements should be made to define allowable and understandable cost value types within a project or region.</blockquote> 

 
	 
<h1>IfcCurrencyRelationship</h1>
                                
                                <p><span class="self-ref">IfcCurrencyRelationship</span> defines the rate of exchange
that applies between two designated currencies at a particular time
and as published by a particular source.</p>

<p>An <span class="self-ref">IfcCurrencyRelationship</span> is used where there may be a need to reference an <strong>IfcCostValue</strong> in one currency to an <strong>IfcCostValue</strong> in another currency. It takes account of fact that currency exchange rates may vary by requiring the recording the date and time of the currency exchange rate used and the source that publishes the rate. There may be many sources and there are different strategies for currency conversion (spot rate, forward buying of currency at a fixed rate).</p>
<p>The source for the currency exchange is defined as an instance of <strong>IfcLibraryInformation</strong> that includes a name and a URL.</p>




<h1>IfcDataOriginEnum</h1>
                                
                                <h1>IfcDate</h1>
                                
                                <h1>IfcDateTime</h1>
                                
                                <h1>IfcDayInMonthNumber</h1>
                                
                                <h1>IfcDayInWeekNumber</h1>
                                
                                <h1>IfcDuration</h1>
                                
                                <h1>IfcEventTime</h1>
                                
                                <h1>IfcIrregularTimeSeries</h1>
                                
                                <h1>IfcIrregularTimeSeriesValue</h1>
                                
                                <h1>IfcLagTime</h1>
                                
                                <h1>IfcMonthInYearNumber</h1>
                                
                                <h1>IfcRecurrencePattern</h1>
                                
                                <h1>IfcRecurrenceTypeEnum</h1>
                                
                                <h1>IfcRegularTimeSeries</h1>
                                
                                <h1>IfcResourceTime</h1>
                                
                                <h1>IfcSchedulingTime</h1>
                                
                                <h1>IfcTaskDurationEnum</h1>
                                
                                <h1>IfcTaskTime</h1>
                                
                                <h1>IfcTaskTimeRecurring</h1>
                                
                                <h1>IfcTime</h1>
                                
                                <h1>IfcTimeOrRatioSelect</h1>
                                
                                <h1>IfcTimePeriod</h1>
                                
                                <h1>IfcTimeSeries</h1>
                                
                                <h1>IfcTimeSeriesDataTypeEnum</h1>
                                
                                <h1>IfcTimeSeriesValue</h1>
                                
                                <h1>IfcTimeStamp</h1>
                                
                                <h1>IfcWorkTime</h1>
                                
                                <h1>IfcAudioVisualAppliance</h1>
                                
                                <p>An audio-visual appliance is a device that displays, captures, transmits, or receives audio or video.</p>
<p>Audio-visual appliances may be fixed in place or may be able to be moved from one space to another. They may require an electrical supply that may be supplied either by an electrical circuit or provided from a local battery source. Audio-visual appliances may be connected to data circuits including specialist circuits for audio visual purposes only.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcAudioVisualApplianceType</h1>
                                
                                <p>The flow terminal type <b>IfcAudioVisualApplianceType</b> defines commonly shared information for occurrences of audio visual appliances. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a audio visual appliance type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcAudioVisualApplianceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcAudioVisualApplianceType</b> are represented by instances of <strong>IfcAudioVisualAppliance</strong>. 
Refer to the documentation at <strong>IfcAudioVisualAppliance</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcAudioVisualApplianceTypeEnum</h1>
                                
                                <h1>IfcCableCarrierFitting</h1>
                                
                                <p>A cable carrier fitting is a fitting that is placed at junction or transition in a cable carrier system.</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcCableCarrierFittingType</h1>
                                
                                <p>The flow fitting type <b>IfcCableCarrierFittingType</b> defines commonly shared information for occurrences of cable carrier fittings. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cable carrier fitting type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCableCarrierFittingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCableCarrierFittingType</b> are represented by instances of <strong>IfcCableCarrierFitting</strong>. 
Refer to the documentation at <strong>IfcCableCarrierFitting</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCableCarrierFittingTypeEnum</h1>
                                
                                <h1>IfcCableCarrierSegment</h1>
                                
                                <p>A cable carrier segment is a flow segment that is specifically used to carry and support cabling.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcCableCarrierSegmentType</h1>
                                
                                <p>The flow segment type <b>IfcCableCarrierSegmentType</b> defines commonly shared information for occurrences of cable carrier segments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cable carrier segment type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCableCarrierSegmentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCableCarrierSegmentType</b> are represented by instances of <strong>IfcCableCarrierSegment</strong>. 
Refer to the documentation at <strong>IfcCableCarrierSegment</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCableCarrierSegmentTypeEnum</h1>
                                
                                <h1>IfcCableFitting</h1>
                                
                                <p>A cable fitting is a fitting that is placed at a junction, transition or termination in a cable system.</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcCableFittingType</h1>
                                
                                <p>The flow fitting type <b>IfcCableFittingType</b> defines commonly shared information for occurrences of cable fittings. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cable fitting type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCableFittingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCableFittingType</b> are represented by instances of <strong>IfcCableFitting</strong>. 
Refer to the documentation at <strong>IfcCableFitting</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCableFittingTypeEnum</h1>
                                
                                <h1>IfcCableSegment</h1>
                                
                                <p>A cable segment is a flow segment used to carry electrical power, data, or telecommunications signals.</p>
<p>A cable segment is used to typically join two sections of an electrical network or a network of components carrying the electrical service.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcCableSegmentType</h1>
                                
                                <p>The flow segment type <b>IfcCableSegmentType</b> defines commonly shared information for occurrences of cable segments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cable segment type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCableSegmentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCableSegmentType</b> are represented by instances of <strong>IfcCableSegment</strong>. 
Refer to the documentation at <strong>IfcCableSegment</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCableSegmentTypeEnum</h1>
                                
                                <h1>IfcCommunicationsAppliance</h1>
                                
                                <p>A communications appliance transmits and receives electronic or digital information as data or sound.</p>
<p>Communication appliances may be fixed in place or may be able to be moved from one space to another. Communication appliances require an electrical supply that may be supplied either by an electrical circuit or provided from a local battery source.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcCommunicationsApplianceType</h1>
                                
                                <p>The flow terminal type <b>IfcCommunicationsApplianceType</b> defines commonly shared information for occurrences of communications appliances. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a communications appliance type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCommunicationsApplianceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCommunicationsApplianceType</b> are represented by instances of <strong>IfcCommunicationsAppliance</strong>. 
Refer to the documentation at <strong>IfcCommunicationsAppliance</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCommunicationsApplianceTypeEnum</h1>
                                
                                <h1>IfcElectricAppliance</h1>
                                
                                <p>An electric appliance is a device intended for consumer usage that is powered by electricity.</p>


<p>Electric appliances may be fixed in place or may be able to be moved from one space to another. Electric appliances require an electrical supply that may be supplied either by an electrical circuit or provided from a local battery source.</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcElectricApplianceType</h1>
                                
                                <p>The flow terminal type <b>IfcElectricApplianceType</b> defines commonly shared information for occurrences of electric appliances. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric appliance type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricApplianceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricApplianceType</b> are represented by instances of <strong>IfcElectricAppliance</strong>. 
Refer to the documentation at <strong>IfcElectricAppliance</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricApplianceTypeEnum</h1>
                                
                                <h1>IfcElectricDistributionBoard</h1>
                                
                                <p>A distribution board is a flow controller in which instances of electrical devices are brought together at a single place for a particular purpose.</p>
<p>A distribution provides a housing for connected electrical distribution elements so that they can be viewed, operated or acted upon from a single place. Each connected item may have its own geometric representation and location.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcElectricDistributionBoardType</h1>
                                
                                <p>The flow controller type <b>IfcElectricDistributionBoardType</b> defines commonly shared information for occurrences of electric distribution boards. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric distribution board type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricDistributionBoardType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricDistributionBoardType</b> are represented by instances of <strong>IfcElectricDistributionBoard</strong>. 
Refer to the documentation at <strong>IfcElectricDistributionBoard</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricDistributionBoardTypeEnum</h1>
                                
                                <h1>IfcElectricFlowStorageDevice</h1>
                                
                                <p>An electric flow storage device is a device in which electrical energy is stored and from which energy may be progressively released.</p> 
 
<blockquote class="note"></blockquote>



<h1>IfcElectricFlowStorageDeviceType</h1>
                                
                                <p>The flow storage device type <b>IfcElectricFlowStorageDeviceType</b> defines commonly shared information for occurrences of electric flow storage devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric flow storage device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricFlowStorageDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricFlowStorageDeviceType</b> are represented by instances of <strong>IfcElectricFlowStorageDevice</strong>. 
Refer to the documentation at <strong>IfcElectricFlowStorageDevice</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricFlowStorageDeviceTypeEnum</h1>
                                
                                <h1>IfcElectricGenerator</h1>
                                
                                <p>An electric generator is an engine that is a machine for converting mechanical energy into electrical energy.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcElectricGeneratorType</h1>
                                
                                <p>The energy conversion device type <b>IfcElectricGeneratorType</b> defines commonly shared information for occurrences of electric generators. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric generator type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricGeneratorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricGeneratorType</b> are represented by instances of <strong>IfcElectricGenerator</strong>. 
Refer to the documentation at <strong>IfcElectricGenerator</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricGeneratorTypeEnum</h1>
                                
                                <h1>IfcElectricMotor</h1>
                                
                                <p>An electric motor is an engine that is a machine for converting electrical energy into mechanical energy.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcElectricMotorType</h1>
                                
                                <p>The energy conversion device type <b>IfcElectricMotorType</b> defines commonly shared information for occurrences of electric motors. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric motor type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricMotorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricMotorType</b> are represented by instances of <strong>IfcElectricMotor</strong>. 
Refer to the documentation at <strong>IfcElectricMotor</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricMotorTypeEnum</h1>
                                
                                <h1>IfcElectricTimeControl</h1>
                                
                                <p>An electric time control is a device that applies control to the provision or flow of electrical energy over time.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcElectricTimeControlType</h1>
                                
                                <p>The flow controller type <b>IfcElectricTimeControlType</b> defines commonly shared information for occurrences of electric time controls. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a electric time control type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElectricTimeControlType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElectricTimeControlType</b> are represented by instances of <strong>IfcElectricTimeControl</strong>. 
Refer to the documentation at <strong>IfcElectricTimeControl</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcElectricTimeControlTypeEnum</h1>
                                
                                <h1>IfcJunctionBox</h1>
                                
                                <p>A junction box is an enclosure within which cables are connected.</p>
<p>Cables may be members of an electrical circuit (for electrical power systems) or be information carriers (in a telecommunications system). A junction box is typically intended to conceal a cable junction from sight, eliminate tampering or provide a safe place for electrical connection.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcJunctionBoxType</h1>
                                
                                <p>The flow fitting type <b>IfcJunctionBoxType</b> defines commonly shared information for occurrences of junction boxs. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a junction box type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcJunctionBoxType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcJunctionBoxType</b> are represented by instances of <strong>IfcJunctionBox</strong>. 
Refer to the documentation at <strong>IfcJunctionBox</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcJunctionBoxTypeEnum</h1>
                                
                                <h1>IfcLamp</h1>
                                
                                <p>A lamp is an artificial light source such as a light bulb or tube.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcLampType</h1>
                                
                                <p>The flow terminal type <b>IfcLampType</b> defines commonly shared information for occurrences of lamps. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a lamp type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcLampType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcLampType</b> are represented by instances of <strong>IfcLamp</strong>. 
Refer to the documentation at <strong>IfcLamp</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcLampTypeEnum</h1>
                                
                                <h1>IfcLightFixture</h1>
                                
                                <p>A light fixture is a container that is designed for the purpose of housing one or more lamps and optionally devices that control, restrict or vary their emission.</p> 
 
<blockquote class="note"></blockquote><h1>IfcLightFixtureType</h1>
                                
                                <p>The flow terminal type <b>IfcLightFixtureType</b> defines commonly shared information for occurrences of light fixtures. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a light fixture type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcLightFixtureType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcLightFixtureType</b> are represented by instances of <strong>IfcLightFixture</strong>. 
Refer to the documentation at <strong>IfcLightFixture</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcLightFixtureTypeEnum</h1>
                                
                                <h1>IfcMotorConnection</h1>
                                
                                <p>A motor connection provides the means for connecting a motor as the driving device to the driven device.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcMotorConnectionType</h1>
                                
                                <p>The energy conversion device type <b>IfcMotorConnectionType</b> defines commonly shared information for occurrences of motor connections. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a motor connection type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcMotorConnectionType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcMotorConnectionType</b> are represented by instances of <strong>IfcMotorConnection</strong>. 
Refer to the documentation at <strong>IfcMotorConnection</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcMotorConnectionTypeEnum</h1>
                                
                                <h1>IfcOutlet</h1>
                                
                                <p>An outlet is a device installed at a point to receive one or more inserted plugs for electrical power or communications.</p>
<p>Power outlets are commonly connected within a junction box; data outlets may be directly connected to a wall. For power outlets sharing the same circuit within a junction box, the ports should indicate the logical wiring relationship to the enclosing junction box, even though they may be physically connected to a cable going to another outlet, switch, or fixture.</p> 
 
<blockquote class="note"></blockquote><h1>IfcOutletType</h1>
                                
                                <p>The flow terminal type <b>IfcOutletType</b> defines commonly shared information for occurrences of outlets. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a outlet type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcOutletType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcOutletType</b> are represented by instances of <strong>IfcOutlet</strong>. 
Refer to the documentation at <strong>IfcOutlet</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcOutletTypeEnum</h1>
                                
                                <h1>IfcProtectiveDevice</h1>
                                
                                <p>A protective device breaks an electrical circuit when a stated electric current that passes through it is exceeded.</p>
<p>A protective device provides protection against electrical current only (not as a general protective device). It may be used to represent the complete set of elements including both the tripping unit and the breaking unit that provide the protection. This may be particularly useful at earlier stages of design where the approach to breaking the electrical supply may be determined but the method of tripping may not. Alternatively, this entity may be used to specifically represent the breaking unit alone (in which case the tripping unit will also be specifically identified). This entity is specific to dedicated protective devices and excludes electrical outlets that may have circuit protection.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcProtectiveDeviceTrippingUnit</h1>
                                
                                <p>A protective device tripping unit breaks an electrical circuit at a separate breaking unit when a stated electric current that passes through the unit is exceeded.</p>

<blockquote class="note"></blockquote><h1>IfcProtectiveDeviceTrippingUnitType</h1>
                                
                                <p>The distribution control element type <b>IfcProtectiveDeviceTrippingUnitType</b> defines commonly shared information for occurrences of protective device tripping units. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a protective device tripping unit type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcProtectiveDeviceTrippingUnitType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcProtectiveDeviceTrippingUnitType</b> are represented by instances of <strong>IfcProtectiveDeviceTrippingUnit</strong>. 
Refer to the documentation at <strong>IfcProtectiveDeviceTrippingUnit</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcProtectiveDeviceTrippingUnitTypeEnum</h1>
                                
                                <h1>IfcProtectiveDeviceType</h1>
                                
                                <p>The flow controller type <b>IfcProtectiveDeviceType</b> defines commonly shared information for occurrences of protective devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a protective device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcProtectiveDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcProtectiveDeviceType</b> are represented by instances of <strong>IfcProtectiveDevice</strong>. 
Refer to the documentation at <strong>IfcProtectiveDevice</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcProtectiveDeviceTypeEnum</h1>
                                
                                <h1>IfcSolarDevice</h1>
                                
                                <p>A solar device converts solar radiation into other energy such as electric current or thermal energy.</p> 
 
<blockquote class="note"></blockquote><h1>IfcSolarDeviceType</h1>
                                
                                <p>The energy conversion device type <b>IfcSolarDeviceType</b> defines commonly shared information for occurrences of solar devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a solar device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSolarDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSolarDeviceType</b> are represented by instances of <strong>IfcSolarDevice</strong>. 
Refer to the documentation at <strong>IfcSolarDevice</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcSolarDeviceTypeEnum</h1>
                                
                                <h1>IfcSwitchingDevice</h1>
                                
                                <p>A switch is used in a cable distribution system (electrical circuit) to control or modulate the flow of electricity.</p>
<p>Switches include those used for electrical power, communications, audio-visual, or other distribution system types as determined by the available ports.</p> 
 
<blockquote class="note"></blockquote><h1>IfcSwitchingDeviceType</h1>
                                
                                <p>The flow controller type <b>IfcSwitchingDeviceType</b> defines commonly shared information for occurrences of switching devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a switching device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSwitchingDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSwitchingDeviceType</b> are represented by instances of <strong>IfcSwitchingDevice</strong>. 
Refer to the documentation at <strong>IfcSwitchingDevice</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcSwitchingDeviceTypeEnum</h1>
                                
                                <h1>IfcTransformer</h1>
                                
                                <p>A transformer is an inductive stationary device that transfers electrical energy from one circuit to another.</p>
<p><span class="self-ref">IfcTransformer</span> is used to transform electric power; conversion of electric signals for other purposes is handled at other entities: <strong>IfcController</strong> converts arbitrary signals, <strong>IfcAudioVisualAppliance</strong> converts signals for audio or video streams, and <strong>IfcCommunicationsAppliance</strong> converts signals for data or other communications usage.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcTransformerType</h1>
                                
                                <p>The energy conversion device type <b>IfcTransformerType</b> defines commonly shared information for occurrences of transformers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a transformer type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcTransformerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcTransformerType</b> are represented by instances of <strong>IfcTransformer</strong>. 
Refer to the documentation at <strong>IfcTransformer</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcTransformerTypeEnum</h1>
                                
                                <h1>IfcClassification</h1>
                                
                                <p>An <span class="self-ref">IfcClassification</span> is used for the arrangement of objects into a class or category according to a common purpose or their possession of common characteristics. A classification in the sense of <span class="self-ref">IfcClassification</span> is taxonomy, or taxonomic scheme, arranged in a hierarchical structure. A category of objects relates to other categories in a generalization-specialization relationship. Therefore the classification items in an classification are organized in a tree structure.</p>

<p>The <span class="self-ref">IfcClassification</span> identifies the classification system or source to which a classification reference refers to. Each classification reference may reference an instance of <span class="self-ref">IfcClassification</span>. A classification system declared may be either formally published, or it may be a locally defined method of classifiying information.</p>

<blockquote class="note">
NOTE&nbsp; Examples for such formally published classifications are Omniclass, Uniclass, Masterformat, or DIN277.
</blockquote>

<p>There are two methods to define and reference a classification system:</p>
<ol>
<li>Including the classification system structure within the dataset: Here a hierarchical tree of <strong>IfcClassificationReference</strong>'s is included that defines the classification system including the relationship between the classification items. The <i>ReferencedSource</i> attribute of <strong>IfcClassificationReference</strong> links the classification item to the parent item, and the parent item finally to the <span class="self-ref">IfcClassification</span>.</li>
<li>Referencing the classification system by a classification key or id: Here the <strong>IfcClassificationReference</strong> is used to assign a classification id or key as <i>Identification</i> attribute and it may link by <i>ReferencedSource</i> attribute directly to the <span class="self-ref">IfcClassification</span>.</li>
</ol>




<h1>IfcClassificationReference</h1>
                                
                                <p>An <span class="self-ref">IfcClassificationReference</span> is a reference into a classification system or source (see <strong>IfcClassification</strong>) for a specific classification key (or notation).</p>

<p>The inherited attributes have the following meaning:</p>
<ul>
<li><i>Identification</i>: holds the key provided for a specific references to classification items (or tables).</li>
<li><i>Name</i>: allows for a human interpretable designation of a classification notation.</li>
<li><i>Location</i>: optionally holds a direct URI link into the classification system (or source) to hyperlink the classification key.</li>
</ul>

<p>The <span class="self-ref">IfcClassificationReference</span> can either be assigned directly to the <strong>IfcClassification</strong>, such as if no classification hierarchy has to be included, or it references the parent classification notation, if the fully classification hierarchy is included in the data set. The first is refered to as "lightweight classification", and the second as "full classification". The attribute <i>ReferencedSource</i> then holds the following information (choice by <strong>IfcClassificationReferenceSelect</strong>):</p>
<ol>
<li>being of type <strong>IfcClassification</strong>: direct reference to the classification system (with meta information provided);</li>
<li>being of type <span class="self-ref">IfcClassificationReference</span>: reference to the parent classification notation within the classification hierarchy.</li>
</ol>

<blockquote class="example">
EXAMPLE&nbsp; The <span class="self-ref">IfcClassificationReference</span> can be used as a form of 'lightweight' classification through the '<i>Identification</i>' attribute inherited from the abstract <strong>IfcExternalReference</strong> class. In this case, the '<i>Identification</i>' could take (for instance) the Uniclass notation "L6814" which, if the classification was well understood by all parties and was known to be taken from a particular classification source, would be sufficient. The <i>Name</i> attribute could be the title "Tanking". This would remove the need for the overhead of the more complete classification structure of the model.</p>
</blockquote>




<h1>IfcClassificationReferenceSelect</h1>
                                
                                <h1>IfcClassificationSelect</h1>
                                
                                <h1>IfcDocumentConfidentialityEnum</h1>
                                
                                <h1>IfcDocumentInformation</h1>
                                
                                <p><span class="self-ref">IfcDocumentInformation</span> captures "metadata" of an external document.
The actual content of the document is not defined in this specification;
instead, it can be found following the <i>Location</i> attribute.</p>
<p>The same <span class="self-ref">IfcDocumentInformation</span> can be referenced from the exchange
structure in total or in parts (e.g. by refering to particular chapters or
paragraphs) using the <strong>IfcDocumentReference</strong>. All
<strong>IfcDocumentReference</strong>'s that utilize the
<span class="self-ref">IfcDocumentInformation</span> are accessible by the inverse relationship
<i>HasDocumentReferences</i>.</p>


<h1>IfcDocumentInformationRelationship</h1>
                                
                                <p>An <span class="self-ref">IfcDocumentInformationRelationship</span> is a relationship entity that enables a document to have the ability to reference other documents. It is used to describe relationships in which one document may reference one or more other sub documents or where a document is used as a replacement for another document (but where both the original and the replacing document need to be retained).</p>




<h1>IfcDocumentReference</h1>
                                
                                <p>An <span class="self-ref">IfcDocumentReference</span> is a reference 
to the location of a document. The reference is given by a system 
interpretable <i>Location</i> attribute (a URL string) where the document can be found, and an optional inherited
 internal reference <i>Identification</i>, which refers to a system
 interpretable position within the document. The optional inherited
<i>Name</i> attribute is meant to have meaning for human readers. Optional 
document metadata can also be captured through reference to 
<strong>IfcDocumentInformation</strong>.</p>









<h1>IfcDocumentSelect</h1>
                                
                                <h1>IfcDocumentStatusEnum</h1>
                                
                                <h1>IfcExternalInformation</h1>
                                
                                <p>An <span class="self-ref">IfcExternalInformation</span> is the identification of an information source that is not explicitly represented in the current model or in the project database (as an implementation of the current model). The <span class="self-ref">IfcExternalInformation</span> identifies the external source (classification, document, or library), but not the particular items such as a dictionary entry, a classification notation, or a document reference within the external source</p>

<p>The <span class="self-ref">IfcExternalInformation</span> is an abstract supertype of
all external information entities.</p>



<h1>IfcExternalReference</h1>
                                
                                <p>An <span class="self-ref">IfcExternalReference</span> is the identification of information that is not explicitly represented in the current model or in the project database (as an implementation of the current model). Such information may be contained in classifications, documents or libraries. The <span class="self-ref">IfcExternalReference</span> identifies a particular item, such as a
dictionary entry, a classification notation, or a document reference within the external source.</p>

<p>Only the <i>Location</i> (as a URL) is given to describe the place where the information can be found. Also an optional
<i>Identification</i> as a key to allow more specific references (as to sections or tables) is provided. The <i>Identification</i> defines a system interpretable method to identify the relevant part of information at the source. In addition a human interpretable <i>Name</i> can be assigned to identify the information subject, such as a classification code.</p>

<p><span class="self-ref">IfcExternalReference</span> is an abstract supertype of all external reference entities.</p>





<h1>IfcExternalReferenceRelationship</h1>
                                
                                <p><span class="self-ref">IfcExternalReferenceRelationship</span> is a relationship entity that enables objects from the
<strong>IfcResourceObjectSelect</strong> to have the ability to be tagged by external references.</p>

<blockquote class="note">
NOTE&nbsp; This relationship is used to assign classification, library or document information to entities that
do not inherit from <strong>IfcRoot</strong>. It has a similar functionality as the subtypes of <strong>IfcRelAssociates</strong>.
</blockquote>



<h1>IfcLanguageId</h1>
                                
                                <h1>IfcLibraryInformation</h1>
                                
                                <p>
      An <span class="self-ref">IfcLibraryInformation</span> describes a library where a
      library is a structured store of information, normally
      organized in a manner which allows information lookup through
      an index or reference value. <span class="self-ref">IfcLibraryInformation</span>
      provides the library <i>Name</i> and optional
      <i>Description</i>, <i>Version</i>, <i>VersionDate</i>
      and <i>Publisher</i> attributes. A <i>Location</i> may be
      added for electronic access to the library.
    </p>
    <p>
      In a broder sense, <span class="self-ref">IfcLibraryInformation</span> includes
      the meta data for capture the revision information when
      checking in library and other data into a revision control
      system.
    </p>
    
    
<h1>IfcLibraryReference</h1>
                                
                                <p>An <span class="self-ref">IfcLibraryReference</span> is a reference into a library of information by <i>Location</i> (provided as a URI). It also provides an optional inherited <i>Identification</i> key to allow more specific references to library sections or tables. The inherited <i>Name</i> attribute allows for a human interpretable identification of the library item. Also, general information on the library from which the reference is taken, is given by the <i>ReferencedLibrary</i> relation which identifies the relevant occurrence of <strong>IfcLibraryInformation</strong>.</p>

<p>The <i>ifcLibraryReference</i> additionally provides the capability to handle multilingual library entries. The <i>Language</i> attribute then holds the language tag for the language used by the strings kept in the <i>Name</i> and the <i>Description</i> attribute.</p>




<h1>IfcLibrarySelect</h1>
                                
                                <h1>IfcResourceLevelRelationship</h1>
                                
                                <p><span class="self-ref">IfcResourceLevelRelationship</span> is an abstract base entity for relationships between resource-level entities.</p>



<h1>IfcResourceObjectSelect</h1>
                                
                                <h1>IfcURIReference</h1>
                                
                                <h1>IfcConnectionCurveGeometry</h1>
                                
                                <p><span class="self-ref">IfcConnectionCurveGeometry</span> is used to describe the geometric constraints that facilitate the physical connection of two objects at a curve or at an edge with curve geometry associated. It is envisioned as a control that applies to the element connection relationships. </p>

<p>The <strong>IfcCurve</strong> (or the <strong>IfcEdgeCurve</strong> with an associated <strong>IfcCurve</strong>) at the <i>CurveOnRelatingElement</i> attribute defines the curve where the basic geometry items of the connected elements connects. The curve geometry and coordinates are provided within the local coordinate system of the <i>RelatingElement</i>, as specified at the <strong>IfcRelConnects</strong> subtype that utilizes the <span class="self-ref">IfcConnectionCurveGeometry</span>. Optionally, the same curve geometry and coordinates can also be provided within the local coordinate system of the <i>RelatedElement</i> by using the <i>CurveOnRelatedElement</i> attribute. </p>
<blockquote class="example">
EXAMPLE&nbsp; The connection relationship between two walls has a geometric constraint which describes the end caps (or cut-off of the wall ends) by a <i>CurveOnRelatingElement</i> for the first wall and a <i>CurveOnRelatedElement</i> for the second wall. The exact usage of the <span class="self-ref">IfcConnectionCurveGeometry</span> is further defined in the geometry use sections of the elements that use it.
</blockquote>

<p>The available geometry for the connection constraint may be further restricted to only allow straight segments by applying <strong>IfcPolyline</strong>
only. Such an usage constraint is provided at the object definition of the <strong>IfcElement</strong> subtype, utilizing the element connection by referring to the subtype of <strong>IfcRelConnects</strong> with the associated&nbsp;<i>IfcConnectionCurveGeometry.</i></p>







<h1>IfcConnectionGeometry</h1>
                                
                                <p><span class="self-ref">IfcConnectionGeometry</span> is used to describe the geometric and topological constraints that facilitate the physical connection of two objects. It is envisioned as a control that applies to the element connection relationships.</p>

<blockquote class="note">
NOTE&nbsp; The element connection relationship normally provides for a logical connection information, by referencing the relating and related elements. If in addition an <span class="self-ref">IfcConnectionGeometry</span> is provided, physical connection information is given by specifying exactly where at the relating and related element the element connection occurs. 
Using the eccentricity subtypes, the connection can also be described when there is a physical distance (or eccentricity) between the connection elements.
</blockquote>

<p>The <span class="self-ref">IfcConnectionGeometry</span> allows for the provision of connection constraints between geometric and topological elements, the following connection geometry/topology types are in scope:</p>
<ul>
  <li>point | vertex point,</li>
  <li>curve | edge curve,</li>
  <li>surface | face surface,</li>
</ul>





<h1>IfcConnectionPointEccentricity</h1>
                                
                                <p><span class="self-ref">IfcConnectionPointEccentricity</span> is used to describe the geometric constraints that facilitate the physical connection of two objects at a point or vertex point with associated point coordinates. There is a physical distance, or eccentricity, etween the connection points of both object. The eccentricity can be either given by:</p>
<ul>
<li>providing the <i>PointOnRelatingElement</i> and the <i>PointOnRelatedElement</i>, where bothÂ point coordinates are not identical within a common parent coordinate system (latestly within the world coordinate system),</li>
<li>providing the <i>PointOnRelatingElement</i> and the three distance measures, <i>EccentricityInX</i>, <i>EccentricityInY</i>, and <i>EccentricityInZ</i> (or only <i>EccentricityInX</i>, and <i>EccentricityInY</i> if the
underlying coordinate system is two-dimensional), or</li>
<li>providing both.</li>
</ul>

<blockquote class="note">
NOTEÂ  If both, <i>PointOnRelatedElement</i>, and <i>EccentricityInX</i>, <i>EccentricityInY</i>, (<i>EccentricityInZ</i>) are provided, the values should be consistent. In case of any non-consistency, the calculated distance between <i>PointOnRelatingElement</i> and <i>PointOnRelatedElement</i> takes precedence.
</blockquote>

<p>The <strong>IfcPoint</strong> (or the <strong>IfcVertexPoint</strong> with an associated <strong>IfcPoint</strong>) at the <i>PointOnRelatingElement</i> attribute defines the point where the basic geometry items of the connected elements connects. The point coordinates are provided within the local coordinate system of the <i>RelatingElement</i>, as specified at the <strong>IfcRelConnects</strong> subtype that utilizes the <strong>IfcConnectionPointGeometry</strong>. Optionally, the same point coordinates can also be provided within the local coordinate system of the <i>RelatedElement</i> by using the <i>PointOnRelatedElement</i> attribute, otherwise the distance to the point at the RelatedElement has to be given by the three eccentricity values.</p>

<p>The explicit values for <i>EccentricityInX</i>, <i>EccentricityInY</i>, and <i>EccentricityInZ</i> are always
measured in the following direction and coordinate system (defining when the value is positive or negative):</p>
<ul>
<li>from the <i>PointOnRelatedElement</i> to <i>PointOnRelatingElement</i> within the coordinate system of the <i>RelatingElement</i>.</li>
<li>in addition: when used to specify connections in structural analysis models, the <strong>IfcStructuralMember</strong> is to be used as the <i>RelatingElement</i> of the relationship object utilizing <span class="self-ref">IfcConnectionPointEccentricity</span>, and the <strong>IfcStructuralConnection</strong> is the <i>RelatedElement</i>.</li>
</ul>






<h1>IfcConnectionPointGeometry</h1>
                                
                                <p><span class="self-ref">IfcConnectionPointGeometry</span>
is used to describe the geometric constraints that facilitate the
physical connection of two objects at a point (here <strong>IfcCartesianPoint</strong>) or at an vertex with point
coordinates associated. It is envisioned as a control that applies to the element connection relationships. </p>

<blockquote class="example">
EXAMPLE&nbsp; The connection relationship between two path based elements (like a column and a beam) has a geometric constraint which describes the connection points by a <i>PointOnRelatingElement</i> for the column and a <i>PointOnRelatedElement</i> for the beam. The exact usage of the <span class="self-ref">IfcConnectionPointGeometry</span> is further defined in the geometry use sections of the elements that use it.
</blockquote>

<p>The <strong>IfcPoint</strong> (or the <strong>IfcVertexPoint</strong> with an associated <strong>IfcPoint</strong>) at the <i>PointOnRelatingElement</i> attribute defines the point where the basic geometry items of the connected elements connect. The point coordinates are provided within the local coordinate system of the <i>RelatingElement</i>, as specified at the <i>IfcRelConnectsSubtype</i> that utilizes the <span class="self-ref">IfcConnectionPointGeometry</span>. Optionally, the same point coordinates can also be provided within the local coordinate system of the <i>RelatedElement</i> by using the <i>PointOnRelatedElement</i> attribute. If both point coordinates are not identical within a common parent coordinate system (ultimately within the world coordinate system), the subtype <strong>IfcConnectionPointEccentricity</strong> shall be used. </p>

<blockquote class="note">
NOTE&nbsp; If the point connection has an offset (if the two points or vertex points at the relating and related element do not physically match), the subtype <strong>IfcConnectionPointEccentricity</strong> shall be used.
</blockquote>







<h1>IfcConnectionSurfaceGeometry</h1>
                                
                                <p><span class="self-ref">IfcConnectionSurfaceGeometry</span> is used to describe the geometric constraints that facilitate the physical connection of two objects at a surface or at a face with surface geometry associated. It is envisioned as a control that applies to the element connection relationships. </p>

<p>The <strong>IfcSurface</strong> (or the <strong>IfcFaceSurface</strong> with an associated <strong>IfcSurface</strong>) at the <i>SurfaceOnRelatingElement</i> attribute defines the surface where the basic geometry items of the connected elements connects. The surface geometry and coordinates are provided within the local coordinate system of the <i>RelatingElement</i>, as specified at the <i>IfcRelConnectsSubtype</i> that utilizes the <span class="self-ref">IfcConnectionSurfaceGeometry</span>. Optionally, the same&nbsp;surface geometry and coordinates can also be provided within the local coordinate system of the <i>RelatedElement</i> by using the <i>SurfaceOnRelatedElement</i> attribute.</p>





<h1>IfcConnectionVolumeGeometry</h1>
                                
                                <p><span class="self-ref">IfcConnectionVolumeGeometry</span> is used to describe the geometric constraints that facilitate the physical connection (or overlap) of two objects at a volume defined by a solid or closed shell. It is envisioned as a control that applies to the element connection or interference relationships.</p>

<p>The <strong>IfcSolidModel</strong> (or the <strong>IfcClosedShell</strong>) at the <i>VolumeOnRelatingElement</i> attribute defines the volume where the basic geometry items of the interfering elements overlap. The volume geometry and coordinates are provided within the local coordinate system of the <i>RelatingElement</i>, as specified at the subtypes of the relationship <strong>IfcRelConnects</strong> that utilizes the <strong>IfcConnectionSurfaceGeometry</strong>. Optionally, the sameÂ volume geometry and coordinates can also be provided within the local coordinate system of the <i>RelatedElement</i> by using the <i>VolumeOnRelatedElement</i> attribute.</p>



<h1>IfcCorrectLocalPlacement</h1>
                                
                                <h1>IfcCurveOrEdgeCurve</h1>
                                
                                <h1>IfcGridAxis</h1>
                                
                                <p>An individual axis, <span class="self-ref">IfcGridAxis</span>, is defined in the context of a design grid.  The axis definition is based on a curve of dimensionality 2. The grid axis is positioned within the XY plane of the position coordinate system defined by the <strong>IfcGrid</strong>.</p>

<p>The standard geometric representation of <span class="self-ref">IfcGridAxis</span> is defined using a 2D curve entity. Grid axes are normally defined by an offset to another axis. The <strong>IfcOffsetCurve2D</strong> supports this concept. Each grid axis has a sense given by the parameterization of the curve. The attribute <i>SameSense</i> is an indicator of whether or not the sense of the grid axis agrees with, or
opposes, that of the underlying curve.</p>

<table cellpadding="2" cellspacing="2">
<tr>
<td><img src="../../../figures/IfcGridAxis-Layout1.gif" alt="design grid"
border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p class="small">As shown in 
the xy plane of the position coordinate system. Any curve can be
used to define a grid axis, most common is the use of IfcLine for
linear grids and <strong>IfcCircle</strong> for radial grids.</p>
<p class="small">Most grids are defined by a pair of axis
lists, each defined by a base grid axis and axes given by an
offset to the base axis. The use of <strong>IfcOffsetCurve2D</strong> as
underlying AxisCurve supports this concept.</p>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td>
</tr>
</table>



<h1>IfcGridPlacement</h1>
                                
                                <p><span class="self-ref">IfcGridPlacement</span> provides a specialization of <strong>IfcObjectPlacement</strong> in which
the placement and axis direction of the object coordinate system is defined by a reference to the design grid as defined in <strong>IfcGrid</strong>.</p>
<p>The location of the object coordinate system is given by the attribute <i>PlacementLocation</i>. It is defined as an
<strong>IfcVirtualGridIntersection</strong>, that is, an intersection between two grid axes with optional offsets.</p>
<p>The axis direction of the x-axis of the object coordinate
system is given either:</p>
<ul>
<li><i>PlacementRefDirection</i> = NIL: by the tangent of the first grid axis (<i>PlacementLocation.IntersectingAxes[1]</i>) at the virtual intersection (maybe using the offset curve, if <i>PlacementLocation.OffsetDistances</i> is given);</li>
<li><i>PlacementRefDirection</i> = <strong>IfcDirection</strong>: by the explicitly provided direction information;</li>
<li><i>PlacementRefDirection</i> = <strong>IfcVirtualGridIntersection</strong>: by the tangent between the virtual grid intersection of <i>PlacementLocation</i> and the virtual grid intersection of <i>PlacementRefDirection</i>. Offsets as potentially provided in the <strong>IfcVirtualGridIntersection</strong>'s of <i>PlacementLocation</i> and <i>PlacementRefDirection</i> have to be taken into account.</li>
</ul>
<p>The direction of the y-axis of the <span class="self-ref">IfcGridPlacement</span> is the orthogonal complement to the x-axis. The plane defined by the x and y axis shall be co-planar to the xy plane of the local placement of the <strong>IfcGrid</strong>.Â </p> 
<p>The direction of the z-axis is the orientation of the cross product of the x-axis and the y-axis, i.e. the z-axis of the <span class="self-ref">IfcGridPlacement</span> shall be co-linear to the z-axis of the local placement of the <strong>IfcGrid</strong>.</p>

<blockquote class="note">
NOTE&nbsp; The <strong>IfcGrid</strong> local placement, that can be provided relative to the local placement of another spatial structure element, has to be taken into account for calculating the absolute placement of the virtual grid intersection.
</blockquote>
<blockquote class="note">
NOTE&nbsp; The <i>PlacementLocation.OffsetDistances[3]</i> and the <i>PlacementRefDirection.OffsetDistances[3]</i> shall either not be assigned or should have the same z offset value.
</blockquote>

<p>The following figures show the usage of placement location and direction for an <span class="self-ref">IfcGridPlacement</span>.</p>

<table cellpadding="2" cellspacing="2" summary="Geometry use definition">
<tr><td align="left" valign="top"><img src="../../../figures/IfcGridPlacement-Layout1.png" alt="without ref direction" border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p>
<ul>
<li><u>its location</u>: given by the virtual grid intersection of <i>PlacementLocation</i></li>
<li><u>its x-axis direction</u>: given by the tangent of the first intersecting axis in the offset location of the virtual grid intersection</li>
</ul>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td>
</tr>
</table>

<table cellpadding="2" cellspacing="2" summary="Geometry use definition">
<tr>
<td align="left" valign="top"><img src="../../../figures/IfcGridPlacement-Layout3.png" alt="with ref direction" border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p>
<ul>
<li><u>its location</u>: given by the virtual grid intersection of <i>PlacementLocation</i></li>
<li><u>its x-axis direction</u>: given by the <i>DirectionRatios</i> of the <strong>IfcDirection</strong>, only the ratios for x and y are taken into account,</li>
</ul>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td>
</tr>
</table>

<table cellpadding="2" cellspacing="2" summary="Geometry use definition">
<tr><td align="left" valign="top"><img src="../../../figures/IfcGridPlacement-Layout2.png" alt="with ref direction" border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p>
<ul>
<li><u>its location</u>: given by the virtual grid intersection of <i>PlacementLocation</i></li>
<li><u>its x-axis direction</u>: given by the tangent of the line between the virtual grid intersection of the <i>PlacementLocation</i> and the virtual grid intersection of the <i>PlacementRefDirection</i>.</li>
</ul>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td>
</tr>
</table>




<h1>IfcGridPlacementDirectionSelect</h1>
                                
                                <h1>IfcLocalPlacement</h1>
                                
                                <p>An <span class="self-ref">IfcLocalPlacement</span> defines the relative placement of a product in relation to the
placement of another product or the absolute placement of a product within the geometric representation context of the project. </p>
<p>The <span class="self-ref">IfcLocalPlacement</span> allows that an <strong>IfcProduct</strong> can be placed by this <span class="self-ref">IfcLocalPlacement</span> (through
the attribute<i>ObjectPlacement</i>) within the local coordinate system of the object placement of another <strong>IfcProduct</strong>,
which is referenced by the <i>PlacementRelTo</i>. Rules to prevent cyclic relative placements have to be introduced on the
application level.</p>
<p>If the <i>PlacementRelTo</i> is not given, then
the <strong>IfcProduct</strong> is placed absolutely within the
world coordinate system.</p>

<p>The following conventions shall apply as default relative positions if the relative placement is used. The conventions are given for all five direct subtypes of <strong>IfcProduct</strong>, the <strong>IfcSpatialStructureElement</strong>, <strong>IfcElement</strong>, <strong>IfcAnnotation</strong>, <strong>IfcGrid</strong>, <strong>IfcPort</strong>. More detailed placement information is given at the level of subtypes of those five types mentioned.</p>
<ul>
  <li>For the subtypes of <strong>IfcSpatialStructureElement</strong> the following conventions apply
    <ul>
      <li><strong>IfcSite</strong> shall be placed absolutely within the world coordinate system established by the geometric
representation context of the <strong>IfcProject</strong> </li>
      <li><strong>IfcBuilding</strong> shall be placed relative to the local placement of <strong>IfcSite</strong> </li>
      <li><strong>IfcBuildingStorey</strong> shall be placed relative to the local placement of <strong>IfcBuilding</strong> </li>
    </ul>
  </li>
  <li>For <strong>IfcGrid</strong> and <strong>IfcAnnotation</strong> the convention applies that it shall be placed relative
    <ul>
      <li> to the local placement of its container, either <strong>IfcSite</strong>, <strong>IfcBuilding</strong>, or <strong>IfcBuildingStorey</strong>
        <ul>
          <li>it should be the same container element that is referenced by the <strong>IfcRelContainedInSpatialStructure</strong>
containment relationship,</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>For <strong>IfcPort</strong> the convention applies that it shall be placed relative
    <ul>
      <li> to the local placement of the <strong>IfcElement</strong> it belongs to
        <ul>
          <li>it should be the same element that is referenced by the <strong>IfcRelConnectsPortToElement</strong> connection
relationship,</li>
        </ul>
      </li>
    </ul>
  </li>
  <li> For <strong>IfcElement</strong> the convention applies that it shall be placed relative:
    <ul>
      <li> to the local placement of its container, either <strong>IfcSite</strong>, <strong>IfcBuilding</strong>, or <strong>IfcBuildingStorey</strong>
        <ul>
          <li>it should be the same container element that is referenced by the <strong>IfcRelContainedInSpatialStructure</strong>
containment relationship,</li>
        </ul>
      </li>
      <li>to the local placement of the <strong>IfcElement</strong> to which it is tied by an element composition relationship
        <ul>
          <li>for features that are located relative to the main component (such as openings), as expressed by <strong>IfcRelVoidsElement</strong> and <strong>IfcRelProjectsElement</strong>;</li>
          <li>for elements that fill an opening (such as doors or windows), as expressed by <strong>IfcRelFillsElement</strong>;</li>
          <li>for coverings that cover the element, as expressed by <strong>IfcRelCoversBldgElements</strong>;</li>
          <li>for sub components that are aggregated to the main component, as expressed by <strong>IfcRelAggregates</strong> and <strong>IfcRelNests</strong>.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>



<h1>IfcObjectPlacement</h1>
                                
                                <p><span class="self-ref">IfcObjectPlacement</span> is an abstract supertype for the special types defining the object coordinate system. The
<span class="self-ref">IfcObjectPlacement</span> has to be provided for each product that has a shape representation.</p>
<p>The object placement can be given:</p>
<ul>
<li>absolute: by an axis2 placement, relative to the world coordinate system,</li>
<li>relative: by an axis2 placement, relative to the object placement of another product,</li>
<li>by grid reference: by the virtual intersection and reference direction given by two axes of a design grid.</li>
</ul>
<p>In any case the object placement has to unambiguously define the object coordinate system as either two-dimensional axis placement (<strong>IfcAxis2Placement2D</strong>) or three-dimensional axis placement (<strong>IfcAxis2Placement3D</strong>). The axis placement may have to be calculated.</p>



<h1>IfcPointOrVertexPoint</h1>
                                
                                <h1>IfcSolidOrShell</h1>
                                
                                <h1>IfcSurfaceOrFaceSurface</h1>
                                
                                <h1>IfcVirtualGridIntersection</h1>
                                
                                <p><span class="self-ref">IfcVirtualGridIntersection</span> defines the derived location of the intersection between two grid axes. Offset values may be given to set an offset distance to the grid axis for the calculation of the virtual grid intersection.</p>

<p>The two intersecting axes (<i>IntersectingAxes</i>) define the intersection point, which exact location (in terms of the Cartesian point representing the intersection) has to be calculated from the geometric representation of the two participating curves.</p>

<blockquote class="note">
NOTE&nbsp; The <strong>IfcGrid</strong> local placement, that can be provided relative to the local placement of another spatial structure element, has to be taken into account for calculating the absolute placement of the <span class="self-ref">IfcVirtualGridIntersection</span>. Where rules and informal rules ensure, that the <i>IntersectingAxes</i> belong to the same <strong>IfcGrid</strong>
</blockquote>

<p>Offset values may be given (<i>OffsetDistances</i>). If given, the position within the list of <i>OffsetDistances</i>
corresponds with the position within the list of <i>IntersectingAxes</i>. Therefore:</p>
<ul>
<li><i>OffsetDistances[1]</i> sets the offset to <i>IntersectingAxes[1]</i>,</li>
<li><i>OffsetDistances[2]</i> sets the offset to <i>IntersectingAxes[2]</i>, and</li>
<li><i>OffsetDistances[3]</i> sets the offset to the virtual intersection in direction of the orientation of the cross product
of <i>IntersectingAxes[1]</i> and the orthogonal complement of the <i>IntersectingAxes[1]</i> (which is the positive or negative
direction of the z axis of the design grid position).</li>
</ul>

<p>The following figures explain the usage of the <i>OffsetDistances</i> and <i>IntersectingAxes</i> attributes.</p>

<table cellpadding="2" cellspacing="2">
<tr valign="top"><td align="left" valign="top"><img src=
"../../../figures/IfcVirtualGridIntersection-Layout1.gif" alt="2D offsets" border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p class="small">
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td></tr>
</table>

<table cellpadding="2" cellspacing="2"><tr valign="top"><td align="left" valign="top"><img src=
"../../../figures/IfcVirtualGridIntersection-Layout2.gif" alt="3D offsets"
border="0" height="300" width="400"></td>
<td style="vertical-align:bottom">
<p class="small">
z-axis of the design grid placement) to the virtual intersection in the xy plane of the grid axis placement.</p>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td></tr>
</table>

<p>The distance of the offset curve (<i>OffsetDistances[n]</i>) is measured from the basis curve. The distance may be positive,
negative or zero. A positive value of distance defines an offset in the direction which is normal to the curve in the sense of an
anti-clockwise rotation through 90 degrees from the tangent vector T at the given point. (This is in the direction of
orthogonal complement(T).) This can be reverted by the <i>SameSense</i> attribute at <strong>IfcGridAxis</strong> which may switch
the sense of the <i>AxisCurve</i>.</p>

<table cellpadding="2" cellspacing="2">
<tr><td align="left" valign="top" width="400"><img src="../../../figures/IfcVirtualGridIntersection-Offset1.gif" alt="offset direction" border="0" height="211" width="306"></td>
<td style="vertical-align:bottom">
<p class="small">
<ul>
<li class="small"><i>IntersectingAxes[1].AxisCurve</i> is an
<strong>IfcTrimmedCurve</strong> with an <strong>IfcCircle</strong> as
<i>BasisCurve</i> and <i>SenseAgreement</i> = TRUE.</li>
<li class="small"><i>IntersectingAxes[1].SameSense</i> = TRUE.</li>
<li class="small"><i>OffsetDistances[1]</i> is a negative length measure</li>
</ul>
</td>
</tr>
<tr><td><p class="figure">
<td>&nbsp;</td></tr>
</table>




<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Both, <i>IntersectingAxes[1]</i> and
<i>IntersectingAxes[2]</i> shall be two <strong>IfcGridAxis</strong>
defined by the same <strong>IfcGrid</strong>.</li>
<li><i>IntersectingAxes[1]</i> and <i>IntersectingAxes[2]</i>
shall not be part of the same row of grid axes, i.e. both shall
not be within the same set of <i>IfcGrid.UAxes</i> or
<i>IfcGrid.VAxes</i> of the corresponding <strong>IfcGrid</strong>.</li>
</ol>

<h1>IfcAdvancedBrep</h1>
                                
                                <p>An advanced B-rep is a boundary representation model in which
all faces, edges and vertices are explicitly represented. It is a
solid with explicit topology and elementary or free-form geometry.
The faces of the B-rep are of type <strong>IfcAdvancedFace</strong>. An
advanced B-rep has to meet the same topological constraints as the
manifold solid B-rep.</p>

<blockquote class="note">NOTE&nbsp; The advanced B-rep has been
introduced in order to support the increasing number of
applications that can define and exchange B-rep models based on
NURBS or other b-spline surfaces.</blockquote>

<table summary="faceted brep" border="0">
<tr>
<td valign="top"><img src="../../../figures/IfcAdvancedBrep_01.png" alt=
"faceted brep instantiation" width="600" height="600"></td>
<td style="vertical-align:bottom">
<p>
boundary representation models with b-spline surfaces. The diagram
shows the topological and geometric representation items that are
used for advanced B-reps, based on <strong>IfcAdvancedFace</strong>.</p>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>

<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>advanced_brep_shape_representation</strong> defined in ISO
10303-514.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>each face is a face surface;</li>
<li>each face surface has its geometry defined by an elementary
surface, swept surface or a b-spline surface;</li>
<li>the edges used to define the boundaries of the face shall all
reference an edge curve</li>
<li>each curve used to define the geometry of the faces and face
bounds shall be either a conic, or a line or a polyline or a
b-spline curve</li>
<li>the edges used to define the face boundaries shall all be
trimmed by vertices of type vertex point</li>
<li>no loop used to define a face bound shall be of the oriented
subtype</li>
</ol>

<h1>IfcAdvancedBrepWithVoids</h1>
                                
                                <p>The <span class="self-ref">IfcAdvancedBrepWithVoids</span> is a specialization of an
advanced B-rep which contains one or more voids in its interior.
The voids are represented as closed shells which are defined so
that the shell normal point into the void.</p>

<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>advanced_brep_shape_representation</strong> defined in ISO
10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Each void shell shall be disjoint from the outer shell and
from every other void shell</li>
<li>Each void shell shall be enclosed within the outer shell but
not within any other void shell. In particular the outer shell is
not in the set of void shells</li>
<li>Each shell in the <strong>IfcManifoldSolidBrep</strong> shall be
referenced only once.</li>
<li>All the faces of all the shells in the <strong>IfcAdvancedBrep</strong>
and the <i>IfcAdvancedBrepWithVoids.Voids</i> shall be of type
<strong>IfcAdvancedFace</strong>.</li>
</ol>
<h1>IfcBlock</h1>
                                
                                <p>The <span class="self-ref">IfcBlock</span> is a Construction Solid Geometry (CSG) 3D primitive. It is defined by a position and a positve
distance along the three orthogonal axes. The inherited <i>Position</i> attribute has the <i>IfcAxisPlacement3D</i>
type and provides:</p>
<ul>
<li><i>SELF\IfcCsgPrimitive3D.Position</i>: The location and orientation of the axis system for the primitive.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Location</i>: The block has one vertex at location and the edges are aligned
with the placement axes in the positive sense.</li>
</ul>
<p>The <i>XLength</i>, <i>YLength</i>, and <i>ZLength</i> attributes define the size of the IfcBlock along the
three axes.</p>
<table cellpadding="2" cellspacing="2" summary="block geometry">
<tr>
<td><img alt="block" src="../../../figures/IfcBlock-Layout1.png" border="0" height="300" width="400"></td>
<td style="vertical-align:bottom;">
<p class="small">
coordinate system. The values for <i>XLength</i>, <i>YLength</i>, and <i>ZLength</i> are applied to the positive
direction of the X, Y, and Z axis.</p>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A block is a solid rectangular parallelepiped, defined with a location and placement coordinate system. The block is
specified by the positive lengths x, y, and z along the axes of the placement coordinate system, and has one vertex at
the origin of the placement coordinate system.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>block</strong> defined in ISO
10303-42.</blockquote>

<p class="use-head">Texture definition</p>
<p>On each side face, textures are aligned facing upright. On the top and bottom faces, textures are aligned facing
front-to-back. Textures are stretched or repeated to the extent of each face according to <i>RepeatS</i> and
<i>RepeatT</i>.</p>
<p>
on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right
shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the
left, and the Z axis points up.</p>
<p>&nbsp;</p>
<table summary="block texture" class="gridtable">
<tr>
<td><img src="../../../figures/IfcBlock-Texture.png" alt="texture"></td>
</tr>
<tr>
<td>
<table summary="texture" width="512"  class="gridtable">
<tr>
<th>Side</th>
<th>Normal</th>
<th>Origin X</th>
<th>Origin Y</th>
<th>Origin Z</th>
<th>S Axis</th>
<th>T Axis</th>
</tr>
<tr>
<td>Left</td>
<td>-X</td>
<td>0</td>
<td>+YLength</td>
<td>0</td>
<td>-Y</td>
<td>+Z</td>
</tr>
<tr>
<td>Right</td>
<td>+X</td>
<td>+XLength</td>
<td>0</td>
<td>0</td>
<td>+Y</td>
<td>+Z</td>
</tr>
<tr>
<td>Front</td>
<td>-Y</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>+X</td>
<td>+Z</td>
</tr>
<tr>
<td>Back</td>
<td>+Y</td>
<td>+XLength</td>
<td>+YLength</td>
<td>0</td>
<td>-X</td>
<td>+Z</td>
</tr>
<tr>
<td>Bottom</td>
<td>-Z</td>
<td>0</td>
<td>+YLength</td>
<td>0</td>
<td>+X</td>
<td>-Y</td>
</tr>
<tr>
<td>Top</td>
<td>+Z</td>
<td>0</td>
<td>0</td>
<td>+ZLength</td>
<td>+X</td>
<td>+Y</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<h1>IfcBooleanClippingResult</h1>
                                
                                <p>A clipping result is defined as a special subtype of the general <strong>IfcBooleanResult</strong>. It constrains the
operands and the operator of the Boolean result.</p>
<p>A clipping result is the Boolean difference between a swept solid and a half space solid, or between the result of
the Boolean difference and a half space solid. Hence more than one difference operation can be applied to achieve the
final Boolean result.</p>

<h1>IfcBooleanOperand</h1>
                                
                                <h1>IfcBooleanOperator</h1>
                                
                                <h1>IfcBooleanResult</h1>
                                
                                <p>The <span class="self-ref">IfcBooleanResult</span> is the result of applying a Boolean operation to two operands being solids.</p>
<blockquote class="example">EXAMPLE&nbsp; If the first operand is a block and the second operand is a solid cylinder of
suitable dimensions and location, the boolean result produced with the difference operator would be a block with a
circular hole.</blockquote>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A Boolean result is the result of a regularized operation on two solids to create a new solid. Valid operations are
regularized union, regularized intersection, and regularized difference. For purpose of Boolean operations, a solid is
considered to be a regularized set of points. The final Boolean result depends upon the operation and the two operands.
In the case of the difference operator the order of the operands is also significant. The operator can be either union,
intersection or difference. The effect of these operators is described below:
<ul style="font-size:inherit;">
<li style="font-size:inherit;">Union on two solids is the new solid that is the regularization of the set of all points
that are in either the first operand or the second operand or in both.</li>
<li style="font-size:inherit;">Intersection on two solids is the new solid that is the regularization of the set of all
points that are in both the first operand and the second operand.</li>
<li style="font-size:inherit;">The result of the difference operation on two solids is the regularization of the set of
all points which are in the first operand, but not in the second operand.</li>
</ul>
</blockquote>
<blockquote class="note">NOTE&nbsp; Corresponding STEP type <strong>boolean_result</strong> defined in ISO
10303-42.</blockquote>

<h1>IfcBoundingBox</h1>
                                
                                <p>The <span class="self-ref">IfcBoundingBox</span> defines an orthogonal box oriented parallel to the axes of the object coordinate system
in which it is defined. It is defined by a <i>Corner</i> being a three-dimensional Cartesian point and three length
measures defining the X, Y and Z parameters of the box in the direction of the positive axes.</p>
<blockquote class="note">NOTE&nbsp; Any subtype of <strong>IfcProduct</strong> having a product shape representation may have a
bounding box representation. The 'Box' representation identifier defined at IfcShapeRepresentation utilizes the
<span class="self-ref">IfcBoundingBox</span> as the simpliest 3D shape representation.</blockquote>
<table cellpadding="2" cellspacing="2">
<tr>
<td><img src="../../../figures/IfcBoundingBox-Layout1.gif" alt="half space solid" width="400" height="300" border="0"></td>
<td style="vertical-align:bottom;">
<p class="small">As shown in 
<span class="self-ref">IfcBoundingBox</span> relative to the geometric coordinate system. The <span class="self-ref">IfcBoundingBox</span> is defined by the
lower left corner (<i>Corner</i>) and the upper right corner (<i>XDim, YDim, ZDim</i> measured within the parent
co-ordinate system).</p>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<blockquote class="note">NOTE&nbsp; Corresponding STEP type <strong>box_domain</strong> defined in ISO
10303-42.</blockquote>

<h1>IfcBoxedHalfSpace</h1>
                                
                                <p>The <span class="self-ref">IfcBoxedHalfSpace</span> is used (as its supertype <strong>IfcHalfSpaceSolid</strong>) only within Boolean operations.
It divides the domain into exactly two subsets, where the domain in question is that of the attribute
<i>Enclosure</i>.</p>
<p>The purpose of the attribute <i>Enclosure</i> is to provide a search box for the other operand in the Boolean
operation. It shall be sufficiently large to fully enclose the resulting solid after the Boolean operation with the
half space. It however does not alter the final result. The result of the Boolean operation would be the same, as if
executed by the supertype <strong>IfcHalfSpaceSolid</strong>. See 
<table summary="boxed half space">
<tr>
<td><img src="../../../figures/IfcBoxedHalfSpace_01.png" alt="correct use of enclosure" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<p>The <strong>IfcBoundingBox</strong> that provides the enclosure is given for the
convenience of the receiving application to enable the use of size box comparison for efficiency (for example, to check
first whether size boxes intersect, if not no calculations has to be done to check whether the solids of the entities
intersect).</p>
<table summary="boxed half space">
<tr>
<td width="600" valign="top" align="left"><img src="../../../figures/IfcBoxedHalfSpace-Layout1.png" border="0" height="480"
width="600" alt="boxed half space"></td>
<td>The <i>Enclosure</i> therefore helps to prevent dealing with infinite-size related issues. The enclosure box is
positioned within the object coordinate system, established by the <i>ObjectPlacement</i> of the element represented
(for example, by <strong>IfcLocalPlacement</strong>). 
fully enclose the Boolean result.</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<p>&nbsp;</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
This entity is a subtype of the half space solid which is trimmed by a surrounding rectangular box. The box has its
edges parallel to the coordinate axes of the geometric coordinate system.<br>
The purpose of the box is to facilitate CSG computations by producing a solid of finite size.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>boxed_half_space</strong> defined in ISO
10303-42.</blockquote>




<h1>IfcCartesianPointList</h1>
                                
                                <p>The <span class="self-ref">IfcCartesianPointList</span> is the abstract supertype of list of points.</p>
<blockquote class="note">NOTE&nbsp; The <span class="self-ref">IfcCartesianPointList</span> is introduced to provide a compact representation of potentially large list
of points, such as in point clouds, and in indexable representation of points.
</blockquote>

<h1>IfcCartesianPointList3D</h1>
                                
                                <p>
      The <strong>IfcCartesianPointList</strong> defines an ordered
      collection of Cartesian points. Each Cartesian point is
      provided as an three-dimensional point by a fixed list of
      three coordinates. The attribute <i>CoordList</i> is a
      two-dimensional list, where
    </p>
    <ul>
      <li>first dimension is an unbounded list representing each 3D
      Cartesian point;
      </li>
      <li>second dimension is a fixed list of three list members,
      where [1] is the x-coordinate, [2] the y-coordinate and [3]
      the z-coordinate of the Cartesian point.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The <strong>IfcCartesianPointList</strong> is introduced
      to provide a compact representation of potentially large list
      of points, such as in point clouds, and in indexable
      representation of points used as vertices in tessellated
      items.
    </blockquote>
    
  <h1>IfcCsgPrimitive3D</h1>
                                
                                <p><span class="self-ref">IfcCsgPrimitive3D</span> is an abstract supertype of all three dimensional primitives used as either tree root
item, or as Boolean results within a CSG solid model. All 3D CSG primitives are defined within a three-dimensional
placement coordinate system.</p>

<h1>IfcCsgSelect</h1>
                                
                                <h1>IfcCsgSolid</h1>
                                
                                <p>An <span class="self-ref">IfcCsgSolid</span> is the representation of a 3D shape using constructive solid geometry model. It is
represented by a single 3D CSG primitive, or as a result of a Boolean operation. The operants of a Boolean operation
can be Boolean operations themselves forming a CSG tree. The following volumes can be parts of the CSG tree: solid
models, such as faceted B-Rep (<strong>IfcFacetedBrep</strong>, <strong>IfcFacetedBrepWithVoids</strong>), swept area solids
(<strong>IfcExtrudedAreaSolid</strong>, <strong>IfcRevolvedAreaSolid</strong>, <strong>IfcSurfaceCurveSweptAreaSolid</strong>), swept disk solids
(<strong>IfcSweptDiskSolid</strong>), half space solids (<strong>IfcHalfSpaceSolid</strong> and subtypes), and CSG primitives (subtypes
of <strong>IfcCsgPrimitive3D</strong>).</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A solid represented as a CSG model is defined by a collection of so-called primitive solids, combined using regularized
Boolean operations. The allowed operations are intersection, union, and difference. As a special case a CSG solid can
also consists of a single CSG primitive.<br>
<br>
A CSG solid requires two kinds of information for its complete definition: geometric and structural.
<ul style=" font-size:inherit;">
<li style=" font-size:inherit;">The geometric information is conveyed by solid models. These typically primitive
volumes such as cylinders, wedges and extrusions, but can include general B-Rep models. Solid models can also be half
space solids.</li>
<li style=" font-size:inherit;">The structural information is in a tree (strictly an acyclic directed graph) of Boolean
result and CSG solids, which represent a &lsquo;recipe&rsquo; for building the solid. The terminal nodes are the
geometric primitives and other solids. Every CSG solid has precisely one Boolean result associated with it which is the
root of the tree that defines the solid. (There may be further Boolean results within the tree as operands). The
significance of a CSG solid entity is that the solid defined by the associated tree is thus identified as a significant
object itself, and in this way it is distinguished from other Boolean result entities representing intermediate results
during the construction process.</li>
</ul>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>csg_solid</strong> is defined in ISO
10303-42.</blockquote>

<h1>IfcDirectionList</h1>
                                
                                <p>
      The <span class="self-ref">IfcDirectionList</span> defines an ordered
      collection of directions. Each direction is
      a three-dimensional direction provided by a fixed list of
      three parameter values. The attribute <i>DirectionList</i> is a
      two-dimensional list, where
    </p>
    <ul>
      <li>first dimension is an unbounded list representing each 3D
      direction;
      </li>
      <li>second dimension is a fixed list of three list members,
      where [1] is the x-coordinate, [2] the y-coordinate and [3]
      the z-coordinate of the direction.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The <span class="self-ref">IfcDirectionList</span> is introduced
      to provide a compact representation of an indexable
      representation of direction used as normals in tessellated
      items.
    </blockquote>
    
  <h1>IfcDotProduct</h1>
                                
                                <h1>IfcExtrudedAreaSolid</h1>
                                
                                <p>The <span class="self-ref">IfcExtrudedAreaSolid</span> is defined by sweeping a cross section provided by a profile definition. The
direction of the extrusion is given by the <i>ExtrudedDirection</i> attribute and the length of the extrusion is
given by the <i>Depth</i> attribute. If the planar area has inner boundaries (holes defined), then those holes shall
be swept into holes of the solid. </p>
<p>The resulting solid is positioned by the <strong>IfcSweptAreaSolid</strong>.<i>Position</i> relative to the object coordinate system. If provided, it allows to reposition the extruded solid. If not provided, it defaults to the current object coordinate system. The <i>ExtrudedDirection</i> is given within the position coordinate system as defined by <strong>IfcSweptAreaSolid</strong>.<i>Position</i>. The extruded direction can be any direction which is not perpendicular to the z axis of the position coordinate system.</p>
<p>&nbsp;</p>
<table summary="geometry" cellpadding="2" cellspacing="2" border="0">
<tr>
<td valign="top" align="left"><img src="../../../figures/IfcExtrudedAreaSolid-Fig1.png" alt="extruded area solid" border="0"></td>
<td>
<blockquote class="example">EXAMPLE&nbsp; 
extrusion of a 2D area by an direction and depth. The result is a solid.</blockquote>
<blockquote><ul>
<li class="small">The profile to be swept is defined:
<ul>
 <li class="small">as a 2D primitive, here <strong>IfcRectangleProfileDef</strong>, that is placed relative to the xy plane of object coordinate system</li>
 <li class="small">since no 2D profile position coordinate system is provided, here <strong>IfcParameterizedProfileDef</strong>.<i>Position</i> = NIL, the profile is positioned without transformation into the xy plane of the object coordinate system (by default, centric at 0.,0. with no rotation)</li>
</ul></li>
<li class="small">The resulting swept solid is not repositioned, as no position coordinate system is provided, here IfcSweptAreaSolid</i>.<i>Position</i> = NIL.</li>
</ul></blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<table summary="geometry" cellpadding="2" cellspacing="2" border="0">
<tr>
<td valign="top" align="left"><img src="../../../figures/IfcExtrudedAreaSolid-Fig2.png" alt="extruded area solid repositioned" border="0"></td>
<td>
<blockquote class="example">EXAMPLE&nbsp; 
<blockquote><ul>
<li class="small">The profile to be swept is defined:
<ul>
 <li class="small">as a 2D primitive, here <strong>IfcRectangleProfileDef</strong>, that is placed relative to the xy plane of object coordinate system</li>
 <li class="small">a 2D profile position coordinate system is provided that positions the profile relative to the xy plane (here at a corner of the rectangle)</li>
</ul></li>
<li class="small">The resulting swept solid is repositioned, here it is moved into local z and rotated by 15' along the y axis.</li>
</ul></blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<p>&nbsp;</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An extruded area solid is a solid defined by sweeping a bounded planar surface. The direction of translation is defined
by a direction vector, and the length of the translation is defined by a distance depth. The planar area may have holes
which will sweep into holes in the solid.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>extruded_area_solid</strong> defined in ISO
10303-42.</blockquote>

<p class="use-head">Texture use definition</p>
<p>For side faces, textures are aligned facing upright continuously along the sides with origin at the first point of
an arbitrary profile, and following the outer bound of the profile counter-clockwise (as seen from above). For
parameterized profiles, the origin is defined at the +Y extent for rounded profiles (having no sharp edge) and the
first sharp edge counter-clockwise from the +Y extent for all other profiles. Textures are stretched or repeated on
each side along the outer boundary of the profile according to <i>RepeatS</i>. Textures are stretched or repeated on
each side along the extrusion axis according to <i>RepeatT</i>.</p>
<p>For top and bottom caps, textures are aligned facing front-to-back, with the origin at the minimum X and Y extent.
Textures are stretched or repeated on the top and bottom to the extent of each face according to <i>RepeatS</i> and
<i>RepeatT</i>.</p>
<p>For profiles with voids, textures are aligned facing upright along the inner side with origin at the first point of
an arbitrary profile, and following the inner bound of the profile clockwise (as seen from above). For parameterized
profiles, the origin of inner sides is defined at the +Y extent for rounded profiles (having no sharp edge such as
hollow ellipses or rounded rectangles) and the first sharp edge clockwise from the +Y extent for all other
profiles.</p>
<table summary="texture">
<tr>
<td width="520px">
<p><img src="../../../figures/IfcExtrudedAreaSolid-Texture.png" alt="texture" border="0"></p>
</td>
<td>
<blockquote class="example">EXAMPLE&nbsp; 
The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows
the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and
the Z axis points up. For an <span class="self-ref">IfcExtrudedAreaSolid</span> having a profile of <strong>IfcIShapeProfileDef</strong>, the side
texture coordinate origin is the first corner counter-clockwise from the +Y axis, which equals<br><br>
(-0.5*IfcIShapeProfileDef.OverallWidth, +0.5*IfcIShapeProfileDef.OverallDepth),<br><br> while the top (end cap) texture
coordinates start at <br><br>(-0.5*IfcIShapeProfileDef.OverallWidth, -0.5*IfcIShapeProfileDef.OverallDepth).</blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<h1>IfcExtrudedAreaSolidTapered</h1>
                                
                                <p><span class="self-ref">IfcExtrudedAreaSolidTapered</span> is defined by sweeping a cross
section along a linear spine. The cross section may change along
the sweep from the shape of the start cross section into the
shape of the end cross section. The resulting solid is bounded by
three or more faces: A start face, an end face (each defined by
start and end planes and sections), and one or more lateral
faces. Each lateral face is a ruled surface defined by a pair of
corresponding edges of the start and end section.</p>
<blockquote class="note">NOTE&nbsp; Given that the start and end section is
provided by a polygon, the corresponding vertices of the start
and end cross section are connected, forming a quadrilateral
polygon between each pair of corresponding vertices. The surface
defined by the bounding quadrilateral polygon is a ruled surface,
that could be approximated by triangulation.</blockquote>
<p>The linear spine is defined by:</p>
<ul>
<li>Start point:
<i>SELF\IfcSweptAreaSolid.Position.Location</i></li>
<li>Direction:
<i>SELF\IfcExtrudedAreaSolid.ExtrudedDirection</i></li>
<li>Distance: <i>SELF\IfcExtrudedAreaSolid.Depth</i></li>
</ul>
<p>The start cross section is defined by
<i>SELF\IfcSweptAreaSolid.SweptArea</i>:</p>
<ul>
<li>A bounded planar surface lying in the XY plane of the
position coordinate system defined by
<i>SELF\IfcSweptAreaSolid.Position.P[1]</i> and
<i>SELF\IfcSweptAreaSolid.Position.P[2]</i></li>
<li>The linear spine starts at the plane of the start cross
section. The spine is not necessarily perpendicular to the
plane.</li>
</ul>
<p>The end cross section is defined by <i>EndSweptArea</i>:</p>
<ul>
<li>A bounded planar surface lying in the XY plane of the
position coordinate system defined by translating the start
position coordinates provided by
<i>SELF\IfcSweptAreaSolid.Position</i> along the spine direction
by the spine distance. The plane of the end cross section is
coplanar to the plane of the start cross section.</li>
<li style="list-style: none">
<ul>
<li>The end cross section is topologically similar to the start
cross section (i.e. having the same number of vertices and
edges).</li>
<li>The end cross section can either be defined by the same
paramteric profile using different parameter values, or by a 2D
Cartesian transformation of the start profile within the end
cross section plane.</li>
</ul>
</li>
</ul>
<p>In case of two parameterized profiles the shape is constructed
as follows:</p>
<ul>
<li>The end profile, defined by a cross section based on the same
profile paramterization as the start profile, is translated by
the spine distance along the spine direction.</li>
<li>It may be shifted within the XY plane of the end postion
coordinate system and may be twisted using the rotation
parameter.</li>
<li>The shift and rotation parameter are provided by the end
cross section being of type <strong>IfcParameterizedProfileDef</strong>,
where
<ul>
<li>Shift is
<i>EndSweptArea\IfcParameterizedProfileDef.Position.Location</i></li>
<li>Rotation is
<i>EndSweptArea\IfcParameterizedProfileDef.Position.RefDirection</i></li>
</ul>
</li>
<li>Corresponding vertices of the start and end cross section are
connected. Lateral faces are constructed as ruled surfaces
between corresponding edges of start and end cross section.</li>
</ul>
<p>In case of Cartesian transformation of the start cross section
the shape is constructed as follows:</p>
<ul>
<li>The cross section curve, which starts as a curve in the XY
plane of the position coordinate system, is first scaled about
the origin by the scale parameter. It is then translated by the
spine distance along the spine direction. It maybe twisted by
using the rotation parameter.</li>
<li>The scale and rotation parameter are provided by the end
cross section being of type <strong>IfcDerivedProfileDef</strong>, where
<ul>
<li>Scale is
<i>EndSweptArea\IfcDerivedProfileDef.Operator.Scale</i></li>
<li>Rotation is
<i>EndSweptArea\IfcDerivedProfileDef.Operator.Axis1</i></li>
</ul>
</li>
<li>Corresponding vertices of the start and end cross section are
connected. Lateral faces are constructed as ruled surfaces
between corresponding edges of start and end cross section.</li>
</ul>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Mirroring within <i>IfcDerivedProfileDef.Operator</i> shall
not be used</li>
</ol>

<h1>IfcFaceBasedSurfaceModel</h1>
                                
                                <p>The <span class="self-ref">IfcFaceBasedSurfaceModel</span> represents the a shape by connected face sets. The connected faces have a dimensionality 2 and are placed in a coordinate space of dimensionality 3.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A face based surface model is described by a set of connected face sets of dimensionality 2. The connected face sets
shall not intersect except at edges and vertices, except that a face in one connected face set may overlap a face in
another connected face set, provided the face boundaries are identical. There shall be at least one connected face
set.<br>
A connected face set may exist independently of a surface model.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>face_based_surface_model</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The connected face sets shall not overlap or intersect except at common faces, edges or vertices.</li>
<li>The fbsm faces have dimensionality 2.</li>
</ol>
<h1>IfcFacetedBrep</h1>
                                
                                <p>
      The <span class="self-ref">IfcFacetedBrep</span> is a manifold solid brep with the
      restriction that all faces are planar and bounded polygons.
    </p>
    <p>
      &nbsp;
    </p>
    <table summary="faceted brep" border="0">
      <tr>
        <td valign="top">
          <img src="../../../figures/IfcFacetedBrep_01.png" alt=
          "faceted brep instantiation" width="500" height="400">
        </td>
        <td valign="top">
          <blockquote class="note">
            NOTE&nbsp; Use of <span class="self-ref">IfcFacetedBrep</span> is restricted
            for boundary representation models with planar surfaces
            only. Those surfaces are implicitly represented by the
            bounding polygons. The diagram shows the topological
            and geometric representation items that are used for
            faceted breps.<br>
            <br>
            Each <strong>IfcCartesianPoint</strong>, used within the
            <span class="self-ref">IfcFacetedBrep</span> shall be referenced three times
            by an <strong>IfcPolyLoop</strong> bounding a different
            <strong>IfcFace</strong>.
          </blockquote>
        </td>
      </tr>
      <tr style="vertical-align:bottom">
        <td>
          <p class="figure">
            <span class="self-ref">IfcFacetedBrep</span>
          </p>
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
      A faceted B-rep is a simple form of boundary representation
      model in which all faces are planar and all edges are
      straight lines. Unlike the B-rep model, edges and vertices
      are not represented explicitly in the model but are
      implicitly available through the poly loop entity. A faceted
      B-rep has to meet the same topological constraints as the
      manifold solid B-rep.
    </blockquote>
    <blockquote class="extDef">
      The faceted B-rep has been introduced in order to support the
      larger number of systems that allow boundary type solid
      representations with planar surfaces only.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>manifold_solid_brep</strong> defined in ISO 10303-42.
    </blockquote>
    
    <p>
      &nbsp;
    </p>
    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>All the bounding loops of all the faces of all the shells
      in the <span class="self-ref">IfcFacetedBrep</span> shall be of type
      <strong>IfcPolyLoop</strong>.
      </li>
      <li>All vertices shall be referenced by all polyloops,
      sharing the vertex. I.e., each Cartesian point shall be
      references by at least three polyloops.
      </li>
    </ol>
<h1>IfcFacetedBrepWithVoids</h1>
                                
                                <p>
      The <span class="self-ref">IfcFacetedBrepWithVoids</span> is a specialization of a
      faceted B-rep which contains one or more voids in its
      interior. The voids are represented as closed shells which
      are defined so that the shell normal point into the void.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>brep_with_voids</strong> AND
      <strong>faceted_brep</strong> defined in ISO 10303-42.
    </blockquote>
    
    
    <p>
      &nbsp;
    </p>
    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>Each void shell shall be disjoint from the outer shell
      and from every other void shell
      </li>
      <li>Each void shell shall be enclosed within the outer shell
      but not within any other void shell. In particular the outer
      shell is not in the set of void shells
      </li>
      <li>Each shell in the <strong>IfcManifoldSolidBrep</strong> shall be
      referenced only once.
      </li>
      <li>All the bounding loops of all the faces of all the shells
      in the <strong>IfcFacetedBrep</strong> shall be of type
      <strong>IfcPolyLoop</strong>.
      </li>
    </ol>
<h1>IfcFixedReferenceSweptAreaSolid</h1>
                                
                                <p>An <span class="self-ref">IfcFixedReferenceSweptAreaSolid</span> is a type of swept area solid which is the result of sweeping an area along a
<i>Directrix</i>. The swept area is provided by a subtype of <strong>IfcProfileDef</strong>. The profile is placed
by an implicit cartesian transformation operator at the start point of the sweep, where the profile normal agrees
to the tangent of the directrix at this point, and the profile's x-axis agrees to the <i>FixedReference</i> direction. The orientation of the curve during the sweeping operation is controlled by the <i>FixedReference</i> direction.</p>

<p>The <i>SweptArea</i> is swept along the <i>Directrix</i> in such a way that the origin of the local coordinate system 
used to define the <i>SweptArea</i> is on the <i>Directrix</i> and the local X axis is in the direction of the projection of
<i>FixedReference</i> onto the normal plane to the directrix at this point. The resulting solid has the property that
the cross section of the surface by the normal plane to the <i>Directrix</i> at any point is a copy of the
<i>SweptArea</i>. The resulting swept solid is placed by the <i>Position</i> coordinate system.</p>

<p>The <i>Directrix</i> and the <i>ReferenceSurface</i> are positioned within the object coordinate system. The start
of the sweeping operation is at the <i>StartParam</i>, the parameter value is provided based on the curve parameterization.
If no <i>StartParam</i> is provided the start defaults to the begin of the directrix. The end of the sweeping operation is 
at the <i>EndParam</i>, the parameter value is provided based on the curve parameterization. If no <i>EndParam</i> is provided 
the end defaults to the end of the directrix.</p>

<blockquote class="note">NOTE&nbsp; The <i>StartParam</i> and the <i>EndParam</i> are not normalized by default, they depend
upon the parameterization of the curve. However using the <strong>IfcReparametrisedCompositeCurveSegment</strong> within an 
<strong>IfcCompositeCurve</strong> as the directrix allows to explicitly reparameterize the underlying sweeping curve.
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp; The reference surface is any surface (plane, cylindric, composite) situated in 3D space and positioned in the object 
coordinate system. In many cases, it is a surface of extrusion. The directrix lies on the surface, often defined as a p-curve at
this reference surface. At any point of the directrix, a plane can be constructed. The origin of the position coordinate system
lies at the directrix. The Axis3 (the z-axis, or normal) of the position coordinate system is identical to the tangent of the directrix at this point, the Axis1 (the x axis, or u) of the position coordinate system is identical to the <i>FixedReference</i> 
direction. The Axis2 (the y axis, or v) is constructed. In this case the resulting swept solid is not repositioned.
</blockquote>

<p>The orientation of the <i>SweptArea</i> as it sweeps along the <i>Directrix</i> is precisely defined by a
<i>CartesianTransformationOperator3d</i> with attributes:</p>
<ul>
<li><i>LocalOrigin</i> as point (0; 0; 0),</li>
<li><i>Axis1</i> as the <i>FixedReference</i>.</li>
<li><i>Axis3</i> as the direction of the tangent vector <b>t</b> at the point of the <i>Directrix</i> with
parameter <b>u</b>.</li>
</ul>
<p>The remaining attributes are defaulted to define a corresponding transformation matrix <b>T(u)</b>, which varies
with the <i>Directrix</i> parameter <b>u</b>.</p>

<blockquote class="note">NOTE&nbsp; The geometric shape of the solid is not dependent upon the curve parameterization;
the volume depends upon the area swept and the length of the <i>Directrix</i>.</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>fixed_reference_swept_surface</strong> defined in
ISO 10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <i>SweptArea</i> shall lie in the plane z = 0.</li>
<li>The <i>FixedReference</i> shall not be parallel to a tangent vector to the directrix at any point along this
curve.</li>
<li>The <i>Directrix</i> curve shall be tangent continuous.</li>
</ol>
<h1>IfcGeometricCurveSet</h1>
                                
                                <p>
      The <span class="self-ref">IfcGeometricCurveSet</span> is used for the exchange of
      shape representation consisting of an collection of (2D or 3D) 
      points and curves only.
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br> 
	A geometric curve set is a collection of two or three dimensional points
      and curves.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from <strong>geometric_curve_set</strong> defined in ISO 10303-42.
    </blockquote>
    
<h1>IfcGeometricSet</h1>
                                
                                <p>
      The <span class="self-ref">IfcGeometricSet</span> is used for the exchange of
      shape representation consisting of (2D or 3D) points,
      curves, and surfaces, which do not have a topological
      structure (such as connected face sets or shells), are
      not tessellated and are not solid models (such as swept 
      solids, CSG or Brep).
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition from ISO/CD 10303-42:<br>
      This entity is intended for the transfer of models when a
      topological structure is not available.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from <strong>geometric_set</strong> defined in ISO 10303-42.
    </blockquote>
    
<h1>IfcGeometricSetSelect</h1>
                                
                                <h1>IfcHalfSpaceSolid</h1>
                                
                                <p>A half space solid divides the domain into two by a base surface. Normally, the base surface is a plane and devides
the infinitive space into two and indicates the side of the half-space by agreeing or disagreeing to the normal of the
plane.</p>
<p>
surface is given by an unbounded plane, the red boundary is shown for visualization purposes only.</p>
<table cellpadding="2" cellspacing="2" summary="illustration">
<tr>
<td><img src="../../../figures/IfcHalfSpaceSolid-Layout1.gif" alt="half space solid" width="400" height="300" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A half space solid is defined by the half space which is the regular subset of the domain which lies on one side of an
unbounded surface. The side of the surface which is in the half space is determined by the surface normal and the
agreement flag. If the agreement flag is TRUE, then the subset is the one the normal points away from. If the agreement
flag is FALSE, then the subset is the one the normal points into.<br>
<br>
For a valid half space solid the surface shall divide the domain into exactly two subsets. Also, within the domain the
surface shall be manifold and all surface normals shall point into the same subset.<br>
<br>
NOTE&nbsp; A half space is not a subtype of solid model, half space solids are only useful as operands in Boolean
expressions.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>half_space_solid</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The base surface shall divide the domain into exactly two subsets. If the half space solid is of subtype boxed half
space (<strong>IfcBoxedHalfSpace</strong>), the domain in question is that of the attribute enclosure. In all other cases the
domain is all of space and the base surface shall be unbounded.</li>
<li>The base surface shall be an unbounded surface (subtype of <strong>IfcElementarySurface</strong>).</li>
</ol>
<h1>IfcManifoldSolidBrep</h1>
                                
                                <p>The <span class="self-ref">IfcManifoldSolidBrep</span> is a solid represented as a collection of connected surfaces that delimit the
solid from the surrounding non-solid.</p>
<p>Instances of type <span class="self-ref">IfcManifoldSolidBrep</span> shall be of type <strong>IfcFacetedBrep</strong>, using only <strong>IfcPolyLoop</strong>
for the bounds of <strong>IfcFaceBound</strong>, or of type <strong>IfcAdvancedBrep</strong>, using only <strong>IfcAdvancedFace</strong> for the
face geometry, and <strong>IfcEdgeCurve</strong> for the edges.</p>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO/CD 10303-42:1992<br>
A manifold solid b-rep is a finite, arcwise connected volume bounded by one or more surfaces, each of which is a
connected, oriented, finite, closed 2-manifold. There is no restriction on the genus of the volume, nor on the number
of voids within the volume.</p>
<p style="font-size:inherit">The Boundary Representation (B-rep) of a manifold solid utilizes a graph of edges and
vertices embedded in a connected, oriented, finite, closed two manifold surface. The embedded graph divides the surface
into arcwise connected areas known as faces. The edges and vertices, therefore, form the boundaries of the face and the
domain of a face does not include its boundaries. The embedded graph may be disconnected and may be a pseudo graph. The
graph is labeled; that is, each entity in the graph has a unique identity. The geometric surface definition used to
specify the geometry of a face shall be 2-manifold embeddable in the plane within the domain of the face. In other
words, it shall be connected, oriented, finite, non-self-intersecting, and of surface genus 0.</p>
<p style="font-size:inherit">Faces do not intersect except along their boundaries. Each edge along the boundary of a
face is shared by at most one other face in the assemblage. The assemblage of edges in the B-rep do not intersect
except at their boundaries (i.e., vertices). The geometry curve definition used to specify the geometry of an edge
shall be arcwise connected and shall not self intersect or overlap within the domain of the edge. The geometry of an
edge shall be consistent with the geometry of the faces of which it forms a partial bound. The geometry used to define
a vertex shall be consistent with the geometry of the faces and edges of which it forms a partial bound.</p>
<p style="font-size:inherit">The geometry used to define a vertex shall be consistent with the geometry of the faces
and edges of which it forms a partial bound.</p>
<p style="font-size:inherit">A B-rep is represented by one or more closed shells which shall be disjoint. One shell,
the outer, shall completely enclose all the other shells and no other shell may enclose a shell. The facility to define
a B-rep with one or more internal voids is provided by a subtype. The following version of the Euler formula shall be
satisfied,</p>
<blockquote><img src="../../../figures/IfcManifoldSolidBrep-Math1.gif" width="236" alt="math" height="25"></blockquote>
<p style="font-size:inherit">where V, E, F, L<sub>l</sub> and S are the numbers of unique vertices, edges, faces, loop
uses and shells in the model and G<sup>s</sup> is the sum of the genus of the shells.</p>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>manifold_solid_brep</strong> defined in ISO
10303-42.</blockquote>

<p>&nbsp;</p>
<p><u>Informal proposition</u>:</p>
<ol>
<li>The dimensionality of a manifold solid brep shall be 3.</li>
<li>The extent of the manifold solid brep shall be finite and non-zero.</li>
<li>All elements of the manifold solid brep shall have defined associated geometry.</li>
<li>The shell normals shall agree with the B-rep normal and point away from the solid represented by the B-rep.</li>
<li>Each face shall be referenced only once by the shells of the manifold solid brep.</li>
<li>The Euler equation shall be satisfied for the boundary representation, where the genus term "shell term" us the sum
of the genus values for the shells of the brep.</li>
</ol>

<h1>IfcPolygonalBoundedHalfSpace</h1>
                                
                                <p>The polygonal bounded half space is a special subtype of a half space solid, where the material of the half space
used in Boolean expressions is bounded by a polygonal boundary. The base surface of the half space is positioned by its
normal relative to the object coordinate system (as defined at the supertype <strong>IfcHalfSpaceSolid</strong>),&nbsp;and its
polygonal (with or without arc segments) boundary is defined in the XY plane of the position coordinate system
established by the <i>Position</i> attribute, the subtraction body is extruded perpendicular to the XY plane of the
position coordinate system, that is, into the direction of the positive Z axis defined by the <i>Position</i>
attribute.</p>
<p>The boundary is defined by a 2 dimensional polyline (or 2 dimensional composite curve, consisting of straight
segments and circular arc segments) within the XY plane of the position coordinate system. The side of the surface
which is in the half space is determined by the surface normal and the agreement flag. If the agreement flag is TRUE,
then the subset is the one the normal points away from. If the agreement flag is FALSE, then the subset is the one the
normal points into.</p>
<blockquote class="note">NOTE&nbsp; A polygonal bounded half space is not a subtype of <strong>IfcSolidModel</strong>, half
space solids are only useful as operands in Boolean expressions.</blockquote>
<p>
<table border="0" cellpadding="2" cellspacing="2" summary="illustration">
<tr>
<td width="650"><img src="../../../figures/IfcPolygonalBoundedHalfSpace-Layout1.png" border=
"0" height="480" width="640" alt="polygonal bounded halfspace"></td>
<td>
<ul>
<li class="small">Black coordinates indicate the object coordinate system (usually provided by <strong>IfcLocalPlacement</strong>).</li>
<li class="small">Green coordinates indicate the position coordinate system; the <i>PolygonalBoundary</i> is given within this
coordinate system. It is provided by <i>IfcPolygonalBoundedHalfSpace.Position</i>. This coordinate system is relative
to the object coordinate system. The extrusion direction of the subtraction body is the positive Z axis.</li>
<li class="small">Red coordinates indicate the normal of the plane. It is provided by the <i>BaseSurface</i>
(<i>IfcSurface.Position</i>). This normal is also relative to the object coordinate system.</li>
</ul>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<p>
The polygonal bounded half space is used to limit the volume of the half space in Boolean difference expressions. Only
the part that is defined by a theoretical intersection between the half space solid and an extruded area solid, defined
by extruding the polygonal boundary, is used for Boolean expressions.</p>
<p>
The <i>PolygonalBoundary</i> defines the 2D polyline which bounds the effectiveness of the half space in Boolean
expressions. The <i>BaseSurface</i> is defined by a plane, and the normal of the plane together with the
<i>AgreementFlag</i> defines the side of the material of the half space.</p>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <strong>IfcPolyline</strong> or the <strong>IfcCompositeCurve</strong> providing the <i>PolygonalBoundary</i> shall be closed.</li>
<li>If the <i>PolygonalBoundary</i> is given by an <strong>IfcCompositeCurve</strong>, it shall only have
<strong>IfcCompositeCurveSegment</strong>'s of type <strong>IfcPolyline</strong>, or <strong>IfcTrimmedCurve</strong> (having a
<i>BasisCurve</i> of type <strong>IfcLine</strong>, or <strong>IfcCircle</strong>)</li>
<li>The <i>BaseSurface</i> defined at supertype <strong>IfcHalfSpaceSolid</strong> shall be of type <strong>IfcPlane</strong></li>
<li>The normal of the plane, being the <i>BaseSurface</i>, shall not be perpendicular to the z-axis of the position coordinate system</li>
</ol>
<h1>IfcRectangularPyramid</h1>
                                
                                <p>The <span class="self-ref">IfcRectangularPyramid</span> is a Construction Solid Geometry (CSG) 3D primitive. It is a solid with a
rectangular base and a point called apex as the top. The tapers from the base to the top. The axis from the center of
the base to the apex is perpendicular to the base. The inherited <i>Position</i> attribute defines the
<i>IfcAxisPlacement3D</i> and provides the location and orientation of the pyramid:</p>
<ul>
<li><i>SELF\IfcCsgPrimitive3D.Position</i>: The location and orientation of the axis system for the
primitive.&nbsp;</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Location</i>: The center of the circular area being the bottom face of the
cone.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Position[3]:</i> The z-axis of the inherited placement coordinate system
provides the center axis of the <strong>IfcRightCircularCone</strong>, and the apex is at the <i>Height</i> value applied to
the positive direction of the z-axis. The <i>BottomRadius</i> defines the circular base at the xy-plane of the
placement coordinate system.</li>
</ul>
<p>As shown in 
center of the bottom rectangle, that lies in the XY plane. The apex lies on the positive z axis at [0, 0,
<i>Height</i>].</p>
<table summary="geometry" border="0">
<tr>
<td><img alt="cone1" src="../../../figures/ifcrectangularpyramid-layout1.png" height="300" width="400"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>

<p class="use-head">Texture use definition</p>
<p>On each triangular side face, textures are aligned facing upright. Textures are stretched or repeated to the extent
of the base of each face according to RepeatS. Textures are stretched or repeated towards the top point according to
Repeat T, where the top point has coordinates of (0.5,1.0) if RepeatT is False.</p>
<p>On the bottom face, textures are aligned facing front-to-back.</p>
<p>
on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right
shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the
left, and the Z axis points up.</p>
<p>&nbsp;</p>
<table summary="texture" class="gridtable">
<tr valign="top">
<td><img alt="texture" src="../../../figures/IfcRectangularPyramid-Texture.png"></td>
</tr>
<tr>
<td>
<table summary="texture" width="512" class="gridtable">
<tr>
<th>Side</th>
<th>Normal</th>
<th>Origin&nbsp;X</th>
<th>Origin&nbsp;Y</th>
<th>Origin&nbsp;Z</th>
<th>S&nbsp;Axis</th>
<th>T&nbsp;Axis</th>
</tr>
<tr>
<td>Left</td>
<td>-X</td>
<td>0</td>
<td>+YLength</td>
<td>0</td>
<td>-Y</td>
<td>(towards top point)</td>
</tr>
<tr>
<td>Right</td>
<td>+X</td>
<td>+Xlength</td>
<td>0</td>
<td>0</td>
<td>+Y</td>
<td>(towards top point)</td>
</tr>
<tr>
<td>Front</td>
<td>-Y</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>+X</td>
<td>(towards top point)</td>
</tr>
<tr>
<td>Back</td>
<td>+Y</td>
<td>+XLength</td>
<td>+YLength</td>
<td>0</td>
<td>-X</td>
<td>(towards top point)</td>
</tr>
<tr>
<td>Bottom</td>
<td>-Z</td>
<td>+XLength</td>
<td>0</td>
<td>0</td>
<td>-X</td>
<td>+Y</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<h1>IfcRevolvedAreaSolid</h1>
                                
                                <p>An <span class="self-ref">IfcRevolvedAreaSolid</span> is a solid created by revolving a cross section provided by a profile definition about an axis.</p>

<p>The resulting solid is positioned by the <strong>IfcSweptAreaSolid</strong>.<i>Position</i> relative to the object coordinate system. If provided, it allows to reposition the revolved solid. If not provided, it defaults to the current object coordinate system. The axis and the cross section shall be in the same plane, prior to any repositioning.</p>

<blockquote class="note">NOTE&nbsp; Both the axis and the cross section are required to lie in the xy plane of the object position coordinate system.</blockquote>

<table summary="revolved solid geometry" cellpadding="2" cellspacing="2" border="0">
<tr>
<td><img src="../../../figures/IfcRevolvedAreaSolid-Fig1.png" alt="revolved area solid" border="0"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
profile definition.</blockquote>
<blockquote>
<ul>
<li class="small">The profile is defined:<ul>
 <li class="small">as a 2D primitive, here <strong>IfcRectangleProfileDef</strong>, that is placed relative to the xy plane of object coordinate system</li>
 <li class="small">since no 2D profile position coordinate system is provided, here <strong>IfcParameterizedProfileDef</strong>.<i>Position</i> = NIL, the profile is positioned without transformation into the xy plane of the object coordinate system (by default, centric at 0.,0. with no rotation)</li>
</ul>
<li class="small">The resulting swept solid is not repositioned, as no position coordinate system is provided, here IfcSweptAreaSolid</i>.<i>Position</i> = NIL.</li>
</ul>
</blockquote>
<blockquote class="example">The <i>AxisLine</i> can have any orientation within the XY plane, it does not have to be parallel to the y-axis as
shown in the illustration.</blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<table summary="revolved solid geometry repositioning" cellpadding="2" cellspacing="2" border="0">
<tr>
<td><img src="../../../figures/IfcRevolvedAreaSolid-Fig2.png" alt="revolved area solid" border="0"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
<blockquote><ul>
<li class="small">The profile to be swept is defined:
<ul>
 <li class="small">as a 2D primitive, here <strong>IfcRectangleProfileDef</strong>, that is placed relative to the xy plane of object coordinate system</li>
 <li class="small">a 2D profile position coordinate system is provided that positions the profile relative to the xy plane (here at a corner of the rectangle)</li>
</ul></li>
<li class="small">The resulting swept solid is repositioned, here it is moved into local z and rotated by 15' along the x axis.</li>
</ul></blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A revolved area solid is a solid formed by revolving a planar bounded surface about an axis. The axis shall be in the
plane of the surface and the axis shall not intersect the interior of the bounded surface. The bounded surface may have
holes which will sweep into holes in the solid. The direction of revolution is clockwise when viewed along the axis in
the positive direction. More precisely if <b>A</b> is the axis location and <b>d</b> is the axis direction and <b>C</b>
is an arc on the surface of revolution generated by an arbitrary point <b>p</b> on the boundary of the swept area, then
<b>C</b> leaves <b>p</b> in direction <b>d</b> x (<b>p</b> - <b>A</b>) as the area is revolved.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>revolved_area_solid</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <i>AxisLine</i> shall lie in the plane of the <i>SweptArea</i> (as defined at supertype
<strong>IfcSweptAreaSolid</strong>).</li>
<li>The <i>AxisLine</i> shall not intersect the interior of the <i>SweptArea</i> (as defined at supertype
<strong>IfcSweptAreaSolid</strong>).</li>
<li>The <i>Angle</i> shall be between 0&deg; and 360&deg;, or 0 and 2&pi; (depending on the unit type for
<strong>IfcPlaneAngleMeasure</strong>).</li>
</ol>
<p class="use-head">Texture Use Definition</p>
<p>For side faces, textures are aligned facing upright along the sides with origin at the first point of an arbitrary
profile, and following the outer bound of the profile counter-clockwise (as seen from above). For parameterized
profiles, the origin is defined at the +Y extent for rounded profiles (having no sharp edge) and the first sharp edge
counter-clockwise from the +Y extent for all other profiles. Textures are stretched or repeated on each side along the
outer boundary of the profile according to <i>RepeatS</i>. Textures are stretched or repeated on each side along the
outermost (longest) revolution path according to <i>RepeatT</i>, where coordinates are compressed towards the axis of
revolution.</p>
<p>For top and bottom caps, textures are aligned facing front-to-back, with the origin at the minimum X and Y extent.
Textures are stretched or repeated on the top and bottom to the extent of each face according to <i>RepeatS</i> and
<i>RepeatT</i>.</p>
<p>For profiles with voids, textures are aligned facing upright along the inner side with origin at the first point of
an arbitrary profile, and following the inner bound of the profile clockwise (as seen from above). For parameterized
profiles, the origin of inner sides is defined at the +Y extent for rounded profiles (having no sharp edge such as
hollow ellipses or rounded rectangles) and the first sharp edge clockwise from the +Y extent for all other
profiles.</p>
<table summary="texture">
<tr>
<td><img src="../../../figures/IfcRevolvedAreaSolid-Texture.png" alt="texture"></td>
<td>
<blockquote class="example">
the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows
the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and
the Z axis points up. For an <span class="self-ref">IfcRevolvedAreaSolid</span> having a profile of <strong>IfcTShapeProfileDef</strong> and
revolved at 22.5 degrees, the side texture coordinate origin is the first corner counter-clockwise from the +Y axis,
which equals <br><br>(-0.5*IfcTShapeProfileDef.OverallWidth, +0.5*IfcTShapeProfileDef.OverallDepth),<br><br> while the top (end cap)
texture coordinates start at <br><br>(-0.5*IfcTShapeProfileDef.OverallWidth, -0.5*IfcTShapeProfileDef.OverallDepth).</blockquote>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<h1>IfcRevolvedAreaSolidTapered</h1>
                                
                                <p><span class="self-ref">IfcRevolvedAreaSolidTapered</span> is defined by revolving a
cross section along a circular arc. The cross section may change
along the revolving sweep from the shape of the start cross
section into the shape of the end cross section. Corresponding
vertices of the start and end cross sections are then connected.
The bounded surface may have holes which will sweep into holes in
the solid.</p>
<p>The rotation axis is defined by:</p>
<ul>
<li>Start point:
<i>SELF\IfcSweptAreaSolid.Position.Location</i></li>
<li>Direction: <i>SELF\IfcRevolvedAreaSolid.Axis</i></li>
<li>Rotation axis: <i>SELF\IfcRevolvedAreaSolid.AxisLine</i>,
created from start point and direction by appying a 1 unit
magnitude.</li>
<li>Orientation: Positive angles are applied clockwise when
looking into the positive direction of the rotation axis.</li>
</ul>
<p>The start cross section is defined by
<i>SELF\IfcSweptAreaSolid.SweptArea</i>:</p>
<ul>
<li>A bounded planar surface lying in the XY plane of the
position coordinate system defined by
<i>SELF\IfcSweptAreaSolid.Position.P[1]</i> and
<i>SELF\IfcSweptAreaSolid.Position.P[2]</i></li>
<li>The rotation axis lies in the plane of the start cross
section but shall not intersect the interior of the start cross
section.</li>
</ul>
<p>The end cross section is defined by <i>EndSweptArea</i>:</p>
<ul>
<li>A bounded planar surface lying in the XY plane of the
position coordinate system defined by rotating the start position
coordinates provided by <i>SELF\IfcSweptAreaSolid.Position</i>
around the rotation axis by the angle given by
<i>SELF\IfcRevolvedAreaSolid.Angle</i>.</li>
<li style="list-style: none">
<ul>
<li>The end cross section is topologically similar to the start
cross section (having the same number of vertices and edges).</li>
<li>The end cross section can either be defined by the same
paramteric profile using different parameter values, or by a 2D
Cartesian transformation of the start profile within the end
cross section plane.</li>
</ul>
</li>
</ul>
<p>The solid is generated by transforming the start cross section
into to end cross section. A start face, an end face (each
defined by start and end cross sections), and one or more lateral
faces. Each lateral face is a ruled surface defined by a pair of
corresponding edges of the start and end section. The ruled
surfaces are constructed in the cylindrical coordinate space
defined by the supertype <strong>IfcRevolvedAreaSolid</strong>.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Mirroring within <i>IfcDerivedProfileDef.Operator</i> shall
not be used</li>
</ol>

<h1>IfcRightCircularCone</h1>
                                
                                <p>The <span class="self-ref">IfcRightCircularCone</span> is a Construction Solid
Geometry (CSG) 3D primitive. It is a solid with a circular base and
a point called apex as the top. The tapers from the base to the
top. The axis from the center of the circular base to the apex is
perpendicular to the base. The inherited <i>Position</i>
attribute defines the <i>IfcAxisPlacement3D</i> and provides the
location and orientation of the cone:</p>
<ul>
<li><i>SELF\IfcCsgPrimitive3D.Position</i>: The location and
orientation of the axis system for the primitive.&nbsp;</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Location</i>: The center
of the circular area being the bottom face of the cone.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Position[3]:</i> The
z-axis of the inherited placement coordinate system provides the
center axis of the <span class="self-ref">IfcRightCircularCone</span>, and the apex is
at the <i>Height</i> value applied to the positive direction of
the z-axis. The <i>BottomRadius</i> defines the circular base at
the xy-plane of the placement coordinate system.</li>
</ul>
<p>
<table summary="geometry">
<tr><td><img alt="cone1" src="../../../figures/IfcRightCircularCone-Layout1.png" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>right_circular_cone</strong> defined in ISO
10303-42.</blockquote>


<p class="use-head">Texture use definition</p>
<p>On the circular side, textures are aligned facing upright with
origin at the back (+Y direction) revolving counter-clockwise.
Textures are stretched or repeated to the extent of the base
circumference according to RepeatS. Textures are compressed
linearly going upwards towards the top point according to
RepeatT.</p>
<p>On the bottom face, textures are aligned facing front-to-back,
with the center of the circle aligned to the center of the
texture.</p>

<p>

<table summary="texture" class="gridtable">
<tr><td><img alt="texture" src="../../../figures/IfcRightCircularCone-Texture.png"></td></tr>
<tr><td>
<table summary="texture" width="512" class="gridtable">
<tr>
<th>Side</th>
<th>Normal</th>
<th>Origin&nbsp;X</th>
<th>Origin&nbsp;Y</th>
<th>Origin&nbsp;Z</th>
<th>S&nbsp;Axis</th>
<th>T&nbsp;Axis</th>
</tr>
<tr>
<td>Side</td>
<td>+Y</td>
<td>0</td>
<td>+Radius</td>
<td>0</td>
<td>-X</td>
<td>(towards top point)</td>
</tr>
<tr>
<td>Bottom</td>
<td>-Z</td>
<td>-Radius</td>
<td>+Radius</td>
<td>0</td>
<td>+X</td>
<td>-Y</td>
</tr>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcRightCircularCylinder</h1>
                                
                                <p>The <span class="self-ref">IfcRightCircularCylinder</span> is a Construction Solid Geometry (CSG) 3D primitive. It is a solid with a
circular base and top. The cylindrical surface between if formed by points at a fixed distance from the axis of the
cylinder. The inherited <i>Position</i> attribute defines the <i>IfcAxisPlacement3D</i> and provides:</p>
<ul>
<li><i>SELF\IfcCsgPrimitive3D.Position</i>: The location and orientation of the axis system for the primitive.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Location</i>: The center of the circular area being the bottom face of the
cylinder.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Position[3]:</i> The z axis provides the center axis and the height is
measured from the origin along the positive direction of the z axis.</li>
</ul>
<p>
coordiante system. The origin is the center of the bottom circular disk, that lies in the XY plane. The center of the
top circular disk is on the positive z axis at [0, 0, <i>Height</i>].</p>
<table summary="geometry">
<tr>
<td><img alt="cylinder" src="../../../figures/IfcRightCircularCylinder-Layout1.png" height="300" width="400"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A right circular cylinder is a CSG primitive in the form of a solid cylinder of finite height. It is defined by an axis
point at the centre of one planar circular face, an axis, a height, and a radius. The faces are perpendicular to the
axis and are circular discs with the specified radius. The height is the distance from the first circular face centre
in the positive direction of the axis to the second circular face centre.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>right_circular_cylinder</strong> defined in ISO
10303-42.</blockquote>

<p class="use-head">Texture use definition</p>
<p>On the circular side, textures are aligned facing upright with origin at the back (+Y direction) revolving
counter-clockwise. Textures are stretched or repeated to the extent of the circumference according to RepeatS. Textures
are stretched or repeated to the extent of the <i>Height</i> according to RepeatT.</p>
<p>On the top and bottom faces, textures are aligned facing front-to-back, with the center of the circle aligned to the
center of the texture.</p>
<p>
on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right
shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the
left, and the Z axis points up.</p>
<table summary="texture" class="gridtable">
<tr>
<td><img alt="texture" src="../../../figures/IfcRightCircularCylinder-Texture.png"></td>
</tr>
<tr>
<td>
<table summary="texture" width="512" class="gridtable">
<tr>
<th>Side</th>
<th>Normal</th>
<th>Origin&nbsp;X</th>
<th>Origin&nbsp;Y</th>
<th>Origin&nbsp;Z</th>
<th>S&nbsp;Axis</th>
<th>T&nbsp;Axis</th>
</tr>
<tr>
<td>Side</td>
<td>+Y</td>
<td>0</td>
<td>+Radius</td>
<td>0</td>
<td>-X</td>
<td>+Z</td>
</tr>
<tr>
<td>Bottom</td>
<td>-Z</td>
<td>-Radius</td>
<td>+Radius</td>
<td>0</td>
<td>+X</td>
<td>-Y</td>
</tr>
<tr>
<td>Top</td>
<td>+Z</td>
<td>-Radius</td>
<td>-Radius</td>
<td>+Height</td>
<td>+X</td>
<td>+Y</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>

<h1>IfcSectionedSpine</h1>
                                
                                <p>An <span class="self-ref">IfcSectionedSpine</span> is a representation of the shape of a three dimensional object composed by a number of
planar cross sections, and a spine curve. The shape is defined between the first element of cross sections and the last
element of the cross sections. A sectioned spine may be used to represent a surface or a solid but the interpolation of
the shape between the cross sections is not defined.</p>
<p>All cross sections have to define areas by a closed profile to allow for the representation of a solid. All cross
sections have to define curves by an open or closed profile to allow for the representation of a surface. The cross
sections are defined by subtypes of <strong>IfcProfileDef</strong>, where the consecutive profiles may be derived by a
transformation of the start profile or the previous consecutive profile.</p>
<p>The spine curve shall be of type <strong>IfcCompositeCurve</strong>, each of its segments represented by
<strong>IfcCompositeCurveSegment</strong> shall correspond to the part between exactly two consecutive cross-sections.</p>
<p>
<ul>
<li>The <i>SpineCurve</i> is given by an <strong>IfcCompositeCurve</strong> with two <i>Segments</i>. The
<i>Segments[1]</i> has a <i>ParentCurve</i> of type <strong>IfcPolyline</strong> and a <i>Transition</i> =
CONTSAMEGRADIENT. The <i>Segments[2]</i> has a <i>ParentCurve</i> of type <strong>IfcTrimmedCurve</strong> and a
<i>Transition</i> = DISCONTINUOUS.</li>
<li>Each <i>CrossSectionPosition</i> lies at a start or end point of the <i>Segments</i>.</li>
<li>Each <i>CrossSections</i> are inserted by the <i>CrossSectionPositions</i>. The first two cross sections are of
type <strong>IfcRectangleProfileDef</strong>, the third is of type <strong>IfcDerivedProfileDef</strong>.</li>
</ul>
<table summary="illustration">
<tr>
<td><img src="../../../figures/IfcSectionedSpine-Layout1.gif" alt="spine 1" width="400" height="300" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<p>
fully defined by the exchange definition.</p>
<table summary="illustration">
<tr>
<td><img src="../../../figures/IfcSectionedSpine.jpg" alt="render" width="400" height="300" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A sectioned spine is a representation of the shape of a three dimensional object composed of a spine curve and a number
of planar cross sections. The shape is defined between the first element of cross sections and the last element of this
set.<br>
<br>
NOTE&nbsp; A sectioned spine may be used to represent a surface or a solid but the interpolation of the shape between
the cross-sections is not defined. For the representation of a solid all cross-sections are closed curves.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>sectioned_spine</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>none of the cross sections, after being placed by the cross section positions, shall intersect</li>
<li>none of the cross sections, after being placed by the cross section positions, shall lie in the same plane</li>
<li>the local origin of each cross section position shall lie at the beginning or end of a composite curve
segment.</li>
</ol>
<h1>IfcShellBasedSurfaceModel</h1>
                                
                                <p>An <span class="self-ref">IfcShellBasedSurfaceModel</span> represents the shape by a set of open or closed shells. The connected faces within the shell have a dimensionality 2 and are placed in a coordinate space of dimensionality 3.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A shell based surface model is described by a set of open or closed shells of dimensionality 2. The shells shall not
intersect except at edges and vertices. In particular, distinct faces may not intersect. A complete face of one shell
may be shared with another shell. Coincident portions of shells shall both reference the same faces, edges and vertices
defining the coincident region. There shall be at least one shell. A shell may exist independently of a surface
model.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>shell_based_surface_model</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The dimensionality of the shell based surface model is 2.</li>
<li>The shells shall not overlap or intersect except at common faces, edges or vertices.</li>
</ol>
<h1>IfcSolidModel</h1>
                                
                                <p>An <span class="self-ref">IfcSolidModel</span> represents the 3D shape by different types of solid model representations. It is the
common abstract supertype of Boundary representation, CSG representation, Sweeping representation and other suitable
solid representation schemes.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A solid model is a complete representation of the nominal shape of a product such that all points in the interior are
connected. Any point can be classified as being inside, outside, or on the boundary of a solid. There are several
different types of solid model representations.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>solid_model</strong> defined in ISO
10303-42.</blockquote>

<h1>IfcSphere</h1>
                                
                                <p>The <span class="self-ref">IfcSphere</span> is a Construction Solid Geometry (CSG) 3D primitive. It is a solid where all points at the
surface have the same distance from the center point. The inherited <i>Position</i> attribute defines the
<i>IfcAxisPlacement3D</i> and provides:</p>
<ul>
<li><i>SELF\IfcCsgPrimitive3D.Position</i>: The location and orientation of the axis system for the
primitive.&nbsp;</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Location</i>: The center of the sphere.</li>
<li><i>SELF\IfcCsgPrimitive3D.Position.Position[3]:</i> The z axis points at its positve direction towards the north
pole, and by its negative directions towards the south pole.</li>
</ul>
<p>&nbsp;</p>
<table summary="illustration">
<tr>
<td><img src="../../../figures/IfcSphere-Layout1.png" border="0" height="300" width="400" alt="sphere"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
coordiante system relative to the object coordinate system. The origin is the center of the sphere.</blockquote>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A sphere is a CSG primitive with a spherical shape defined by a centre and a radius.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>sphere</strong> defined in ISO
10303-42.</blockquote>

<p class="use-head">Texture Use Definition</p>
<p>Textures are aligned facing upright with origin at the back (+Y direction) revolving counter-clockwise. Textures are
stretched or repeated to the extent of the circumference at the equator according to RepeatS and RepeatT.</p>
<p>
on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right
shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the
left, and the Z axis points up.</p>
<table summary="texture" class="gridtable">
<tr>
<td><img src="../../../figures/IfcSphere-Texture.png" alt="texture"></td>
</tr>
<tr>
<td>
<table summary="texture" width="512" class="gridtable">
<tr valign="top">
<th>Side</th>
<th>Normal</th>
<th>Origin&nbsp;X</th>
<th>Origin&nbsp;Y</th>
<th>Origin&nbsp;Z</th>
<th>S&nbsp;Axis</th>
<th>T&nbsp;Axis</th>
</tr>
<tr valign="top">
<td>Side</td>
<td>+Y</td>
<td>0</td>
<td>+Radius</td>
<td>0</td>
<td>(-X, then curving counter-clockwise)</td>
<td>(+Z, then curving towards top)</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<h1>IfcSurfaceCurveSweptAreaSolid</h1>
                                
                                <p>The <span class="self-ref">IfcSurfaceCurveSweptAreaSolid</span> is the result of sweeping an area along a directrix that lies on a
reference surface. The swept area is provided by a subtype of <strong>IfcProfileDef</strong>. The profile is placed
by an implicit cartesian transformation operator at the start point of the sweep, where the profile normal agrees
to the tangent of the directrix at this point, and the profile's x-axis agrees to the surface normal. At any point
along the directrix, the swept profile origin lies on the directrix, the profile's normal points towards the tangent
of the directrix, and the profile's x-axis is identical to the surface normal at this point.</p> 
<blockquote class="note">
NOTE&nbsp; The profile area's normal has to be identical to the tangent of the directrix at any given point. In case
of a directrix having a linear segment at the start point, the segment has to be perpendicular to the profile at start.
</blockquote>
<p>The <i>Directrix</i> and the <i>ReferenceSurface</i> are positioned within the object coordinate system. The start
of the sweeping operation is at the <i>StartParam</i>, the parameter value is provided based on the curve parameterization.
If no <i>StartParam</i> is provided the start defaults to the begin of the directrix. The end of the sweeping operation is 
at the <i>EndParam</i>, the parameter value is provided based on the curve parameterization. If no <i>EndParam</i> is provided 
the end defaults to the end of the directrix. The geometric shape of the solid is not dependent upon the curve parameterization;
the volume depends upon the area swept and the length of the <i>Directrix</i>.</p>
<blockquote class="note">NOTE&nbsp; The <i>StartParam</i> and the <i>EndParam</i> are not normalized by default, they depend
upon the parameterization of the curve. However using the <strong>IfcReparametrisedCompositeCurveSegment</strong> within an 
<strong>IfcCompositeCurve</strong> as the directrix allows to explicitly reparameterize the underlying sweeping curve. In case of a closed curve, such as <strong>IfcCircle</strong> or <strong>IfcEllipse</strong>, as the directrix, <i>StartParam</i> and the <i>EndParam</i> shall
not exceed the parametic range, they shall not be &gt; 360&deg;.
</blockquote>
<blockquote class="example">
EXAMPLE&nbsp; The reference surface is any surface (plane, cylindric, composite) situated in 3D space and positioned in the object 
coordinate system. In most cases, it is a plane or a surface of extrusion. The directrix lies on the surface, in case of a plane it might
be defined as a polyline or composite curve, in case of a cylindrical or other non-planer reference surface it might often be defined as a 
p-curve on this reference surface. </blockquote>
<p>At any point of the directrix, a plane can be constructed. The origin of the position coordinate system of the implicit plane
lies at the directrix. The Axis3 (the z-axis, or normal) of the position coordinate system is identical to the tangent of the directrix 
at this point, the Axis1 (the x axis, or u) of the position coordinate system is identical to the normal of the reference surface at 
this point. The Axis2 (the y axis, or v) is constructed.</p>

<p>The resulting body of the swept solid is not repositioned if the inherited <i>Position</i> attribute is omitted. Otherwise the coordinate system
established by the <i>Position</i> attribute is used to reposition the body relative to the object coordinate system.</p>
<p>&nbsp;</p>
<table border="0" cellpadding="2" cellspacing="2" summary="surface curve wept area solid">
<tr>
<td><img src="../../../figures/IfcSurfaceCurveSweptAreaSolid_01.png" alt="surface curve wept area solid" width="600" height="450"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
<blockquote class="note">NOTE&nbsp; The start of the directrix lies at the origin of the object coordinate system, as shown in the illustration,
only by coincidence. The start of the directrix and thereby the start of the sweeping operation might be at any point within the object coordinate 
system and only depends on the position of the directrix.</blockquote></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><img src="../../../figures/IfcSurfaceCurveSweptAreaSolid_02.png" alt="surface curve wept area solid" width="600" height="450"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>

<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A surface curve swept area solid is a type of swept area solid which is the result of sweeping a face along a
<i>Directrix</i> lying on a <i>ReferenceSurface</i>. The orientation of the <i>SweptArea</i> is related to the
direction of the surface normal.<br>
<br>
The <i>SweptArea</i> is required to be a curve bounded surface lying in the plane z = 0 and this is swept along the
<i>Directrix</i> in such a way that the origin of the local coordinate system used to define the <i>SweptArea</i>
is on the <i>Directrix</i> and the local x-axis is in the direction of the normal to the <i>ReferenceSurface</i> at
the current point. The resulting solid has the property that the cross section of the surface by the normal plane to
the <i>Directrix</i> at any point is a copy of the <i>SweptArea</i>.<br>
<br>
The orientation of the <i>SweptArea</i> as it sweeps along the <i>Directrix</i> is precisely defined by a Cartesian
Transformation Operator 3D with attributes:
<ul>
<li class="extDef">Local origin as point (0., 0., 0),</li>
<li class="extDef">Axis 1 as the normal N to the reference surface at the point of the directrix with
parameter u.</li>
<li class="extDef">Axis 3 as the direction of the tangent vector t at the point of the directrix with
parameter u.<br>
The remaining attributes are defaulted to define a corresponding transformation matrix T(u), which varies with the
directrix parameter u.</li>
</ul>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>surface_curve_swept_area_solid</strong> defined
in ISO 10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <i>SweptArea</i> shall lie in the implicit plane z = 0.</li>
<li>The <i>Directrix</i> shall lie on the <i>ReferenceSurface</i>.</li>
</ol>
 
<h1>IfcSweptAreaSolid</h1>
                                
                                <p>An <span class="self-ref">IfcSweptAreaSolid</span> represents the 3D shape by a sweeping representation scheme allowing a two dimensional planar cross section to sweep through space.</p>
<p>The swept area is defined by a cross section, represented by a subtype if <strong>IfcProfileDef</strong>, that is provided as a closed two-dimensional boundary on an implicit plane. The swept area is defined in the xy plane of the object coordinate system. The sweeping operation is applied to the swept area as defined within the subtypes of <span class="self-ref">IfcSweptAreaSolid</span>, some subtypes require an implicit transformation of the swept area to the start position of the sweep.</p>
<p> The optional <i>Positio</i>n coordinate system allows for re-positioning the resulting swept solid relative to the object coordinate system.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The swept area solid entity collects the entities which are defined procedurally by sweeping action on planar bounded
surfaces. The position is space of the swept solid will be dependent upon the position of the swept area. The swept
area will be a face of the resulting swept area solid, except for the case of a revolved area solid with angle equal to
2&pi; (or 360 degrees).</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>swept_area_solid</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcSweptDiskSolid</h1>
                                
                                <p>An <span class="self-ref">IfcSweptDiskSolid</span> represents the 3D shape by a sweeping representation scheme allowing a two dimensional
circularly bounded plane to sweep along a three dimensional <i>Directrix</i> through space.</p>
<p>The <i>StartParam</i> and <i>EndParam</i> parameter are optional, if not provided they default to the start and
end of the <i>Directrix</i>. Only if the <i>Directrix</i> is given by a bounded or by a closed curve, it is
permissible to omit the values of <i>StartParam</i> and <i>EndParam</i>.</p>
<p>If the transitions between consecutive segments of the <i>Directrix</i> are not tangent continuous, the resulting
solid is created by a miter at half angle between the two segments. Informal proposition restricts the permissible
angle between two non-tangent continuous segments.</p>
<p>
<ul>
<li><i>Directrix</i> given as <strong>IfcCompositeCurve</strong> being tangent continuous between its segments</li>
<li><i>Directrix</i> being a bounded and open curve</li>
<li>No <i>StartParam</i> and <i>EndParam</i> are provided, start and end default to start and end of the bounded
curve of the <i>Directrix</i></li>
</ul>
<blockquote class="note">NOTE&nbsp; Although the example shows a <i>Directrix</i> as a composite curve on a planar
reference surface, the definition of <span class="self-ref">IfcSweptDiskSolid</span> is not restricted to be based on planer curves. However
view definitions or implementer agreements may provide restrictions.</blockquote>
<table border="0" cellpadding="2" cellspacing="2" summary="disk solid usage">
<tr>
<td><img src="../../../figures/IfcSweptDiskSolid-Layout1.png" alt="disk solid" width="450" height="315"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A swept disk solid is the solid produced by sweeping a circular disk along a three dimensional curve. During the
sweeping operation the normal to the plane of the circular disk is in the direction of the tangent to the directrix
curve and the center of the disk lies on the directrix. The circular disk may, optionally, have a central hole, in this
case the resulting solid has a through hole, or, an internal void when the directrix forms a close curve.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>swept_disk_solid</strong> defined in ISO
10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>If the <i>Directrix</i> curve definition is not tangent continuous, the transition between the segments has to be
within an acceptable limit of tangent discontinuity. Very sharp edges may result in nearly impossible miter.
Implementer agreements may define acceptable limits for tangent discontinuity.</li>
<li>The segments of the <i>Directrix</i> shall be long enough to apply the <i>Radius</i>. In case of an arc segment
forming part of the <i>Directrix</i>, its radius shall be greater then the disk <i>Radius</i></li>
<li>The <i>Directrix</i> shall not be based on an intersecting curve.</li>
</ol>
<h1>IfcSweptDiskSolidPolygonal</h1>
                                
                                <p>The <span class="self-ref">IfcSweptDiskSolidPolygonal</span> is a <strong>IfcSweptDiskSolid</strong> where the <i>Directrix</i> is restricted
to be provided by an <strong>IfcPolyline</strong> only. An optional <i>FilletRadius</i> attribute can be asserted, it is then
applied as a fillet to all transitions between the segments of the <strong>IfcPolyline</strong>.</p>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <i>FilletRadius</i>, if provided, has to be smaller then or equal to the length of the start and end segment
of the <strong>IfcPolyline</strong>, and smaller then or equal to one half of the lenght of the shortest inner segment.</li>
</ol>
<h1>IfcTaperedSweptAreaProfiles</h1>
                                
                                <h1>IfcTessellatedFaceSet</h1>
                                
                                <p>
      The <span class="self-ref">IfcTessellatedFaceSet</span> is a boundary
      representation topological model limited to planar faces and
      straight edges. It may represent an approximation of an
      analytical surface or solid that may be provided in addition
      to its tessellation as a separate shape representation.
      The <span class="self-ref">IfcTessellatedFaceSet</span> provides a compact data
      representation of an connected face set using indices into
      ordered lists of vertices, normals, colours, and texture
      maps.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The compact representation has been chosen to
      enable small data sets despite potentially large sets of
      faces, edges and vertices needed to represent tessellations
      of analyticals surfaces and solids, and despite large sets of
      colour and texture information to annotate the tessellated
      faces.
    </blockquote>
    <p>
      The <span class="self-ref">IfcTessellatedFaceSet</span> is an abstract supertype
      of tesselated face sets each imposing specific constraints on
      face generation for tessellation, such as triangulation (with
      or without strip and fans), or quadrilaterals.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Not all different constraints on face sets are
      already included as specific subtypes in this release.
    </blockquote>
    <p>
      The following attributes apply to all subtypes:
    </p>
    <ul>
      <li>The <i>Coordinates</i> are the ordered list of
      Cartesian points representing the vertices of the tessellated
      item. An index list, defined at the level of subtypes, uses
      the points, identified by index position, to construct the
      polylines that represent the faces.
      </li>
      <li>The <i>Normals</i> are the ordered list of directions
      representing normals of the tessellated item. An index list,
      defined at the level of subtypes, uses the directions,
      identified by index position, to define the normals either by
      face or by edge.
      </li>
      <li>The <i>HasColours</i> inverse relation provides an
      indexed colour map with an corresponding list of indices
      providing a colour for each face of the tessellated face set.
      </li>
      <li>The <i>HasTextures</i> inverse relation provides an
      indexed texture map with an corresponding list of indices
      providing texture coordinates that map to the geometric
      coordinates of the polylines representing the faces.
      </li>
    </ul>
    <p>
      Each face of the tessellated face set shall have:
    </p>
    <ul>
      <li>at least three non-coincident vertices;
      </li>
      <li>vertices that define a planar polygon;
      </li>
      <li>vertices that define a non-self-intersecting polygon.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The definition of <span class="self-ref">IfcTessellatedFaceSet</span>
      is based on the <strong>indexedFaceSet</strong> defined in
      ISO/IEC 19775-1
    </blockquote>
    
  
<h1>IfcTessellatedItem</h1>
                                
                                <p>
      The <span class="self-ref">IfcTessellatedItem</span> is the abstract supertype 
      of all tessellated geometric models.
    </p>
    
  <h1>IfcTriangulatedFaceSet</h1>
                                
                                <p>
      The <span class="self-ref">IfcTriangulatedFaceSet</span> is a tessellated face set
      with all faces being bound by triangles. The faces are
      constructed by implicit polylines defined by three Cartesian
      points. The coordinates of each point are provided by an
      index into an ordered list of Cartesian points provided by
      the two-dimensional list <i>CoordIndex</i>, where
    </p>
    <ul>
      <li>the first dimension of the two-dimensional list addresses
      the list of triangular faces;
      </li>
      <li>the second dimension of the two-dimensional list provides
      exactly three indices into the <strong>IfcCartesianPointList</strong>
      referenced by <i>Coordinates</i> defined at the supertype
      <strong>IfcTessellatedFaceSet</strong>. Each index points to a
      Cartesian point being a vertex of the triangle.
      </li>
    </ul>
    <p>
      Optional the normals at each vertex, being perpendicular to
      the face for that triangle, can be provided by the
      two-dimensional list <i>NormalIndex</i>, where
    </p>
    <ul>
      <li>the first dimension of the two-dimensional list addresses
      the corresponding list of triangular faces;
      </li>
      <li>the second dimension of the two-dimensional list provides
      exactly three indices into the <i>IfcDirectionList</i>
      referenced by <i>Normals</i> defined at the supertype <i>
        IfcTessellatedFaceSet</i>. Each index, corresponding to
        the index of vertices, points to a direction being the
        normal at this vertex of the triangle.
      </li>
    </ul>
    <p>
    The diagram of the <span class="self-ref">IfcTriangulatedFaceSet</span> 
    represents the indices and the ordered list into which the indices point. 
    The index starts with 1 (indexed as 1 to N), if the
    greatest index in <i>CoordIndex</i> in N, then the
    <strong>IfcCartesianPointList</strong> shall have N lists of 3:3 coordinates.
    </p>
    <p>
      <i>CoordIndex</i>: ((1,6,5), (1,2,6), (6,2,7), (7,2,3),
      (7,8,6), (6,8,5), (5,8,1), (1,8,4), (4,2,1), (2,4,3),
      (4,8,7), (7,3,4))<br>
      <strong>IfcCartesianPointList</strong>: ((0.,0.,0.), (1.,0.,0.),
      (1.,1.,0.), (0.,1.,0.), (0.,0.,2.), (1.,0.,2.), (1.,1.,2.),
      (0.,1.,2.))
    </p>
    <table summary="">
      <tr>
        <td style="width: 450px">
          <img src="../../../figures/IfcTriangulatedFaceSet_01.png"
          width="450" height="450" alt=
          "IfcTriangulatedFaceSet_01">
        </td>
        <td>
          <blockquote>
            <img src="../../../figures/IfcTriangulatedFaceSet_Example-01.png"
            width="275" height="350" alt=
            "IfcTriangulatedFaceSet_Example-01">
          </blockquote>
        </td>
      </tr>
      <tr>
        <td style="width: 450px">
          <p class="figure">
          </p>
        </td>
        <td>
          <p class="figure">
          </p>
        </td>
      </tr>
    </table>
    <blockquote class="note">
      NOTE&nbsp; The definition of <span class="self-ref">IfcTriangulatedFaceSet</span>
      is based on the <strong>indexedFaceSet</strong>, and
      <strong>indexedTriangleSet</strong> defined in ISO/IEC
      19775-1
    </blockquote>
    
  <h1>IfcVectorSum</h1>
                                
                                <h1>IfcAxis1Placement</h1>
                                
                                <p>The <span class="self-ref">IfcAxis1Placement</span> provides location and direction of a single axis.</p>
<table>
 <tr>
  <td><img src="../../../figures/IfcAxis1Placement-Layout1.gif" alt="axis1 placement" width="400" height="300" border="0">
  </td>
  <td style="vertical-align:bottom"><blockquote class="note">
   
   </blockquote>
  </td>
 </tr>
 <tr>
  <td><p class="figure">
  </td>
 </tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The direction and location in three dimensional space of a single axis. An axis1_placement is defined in terms of a
locating point (inherited from placement supertype) and an axis direction: this is either the direction of axis or
defaults to (0.0,0.0,1.0). The actual direction for the axis placement is given by the derived attribute z.
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>axis1_placement</strong> defined in ISO10303-42.
</blockquote>

<h1>IfcAxis2Placement</h1>
                                
                                <h1>IfcAxis2Placement2D</h1>
                                
                                <p>
      The <span class="self-ref">IfcAxis2Placement2D</span> provides location and
      orientation to place items in a two-dimensional space. The
      attribute <i>RefDirection</i> defines the x axis, the y
      axis is derived. If the attribute <i>RefDirection</i> is
      not given, the placement defaults to P[1] (x-axis) as [1.,0.]
      and P[2] (y-axis) as [0.,1.].
    </p>
    <table>
      <tr>
        <td>
          <img src="../../../figures/IfcAxis2Placement2D-Layout1.gif" alt=
          "axis2 placement 2D" width="400" height="300" border="0">
        </td>
        <td style="vertical-align:bottom">
          <blockquote class="note">
            
            <span class="self-ref">IfcAxis2Placement2D</span> within the two-dimensional
            coordinate system.
          </blockquote>
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
      The location and orientation in two dimensional space of two
      mutually perpendicular axes. An axis2_placement_2d is defined
      in terms of a point, (inherited from the placement
      supertype), and an axis. It can be used to locate and
      originate an object in two dimensional space and to define a
      placement coordinate system. The entity includes a point
      which forms the origin of the placement coordinate system. A
      direction vector is required to complete the definition of
      the placement coordinate system. The reference direction
      defines the placement X axis direction, the placement Y axis
      is derived from this.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>axis2_placement_2d</strong> defined in ISO 10303-42.
    </blockquote>
    
<h1>IfcAxis2Placement3D</h1>
                                
                                <p>
      The <span class="self-ref">IfcAxis2Placement3D</span> provides location and orientations to
      place items in a three-dimensional space. The attribute
      <i>Axis</i> defines the Z direction, <i>RefDirection</i>
      the X direction. The Y direction is derived.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The <i>RefDirection</i> does not have to be
      orthogonal to <i>Axis</i>.
    </blockquote>
    <p>
      If the attribute values for <i>Axis</i> and
      <i>RefDirection</i> are not given, the placement defaults to
      P[1] (x-axis) as [1.,0.,0.], P[2] (y-axis) as [0.,1.,0.] and
      P[3] (z-axis) as [0.,0.,1.].
    </p>
    <table>
      <tr>
        <td>
          <img src="../../../figures/IfcAxis2Placement3D-Layout1.gif" alt=
          "axis2 placement 2D" border="0" height="300" width="400">
        </td>
        <td style="vertical-align:bottom">
          <blockquote class="note">
            
            <span class="self-ref">IfcAxis2Placement3D</span> within the three-dimensional
            coordinate system.
          </blockquote>
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
      The location and orientation in three dimensional space of
      three mutually perpendicular axes. An axis2_placement_3D is
      defined in terms of a point (inherited from placement
      supertype) and two (ideally orthogonal) axes. It can be used
      to locate and orientate a non axi-symmetric object in space
      and to define a placement coordinate system. The entity
      includes a point which forms the origin of the placement
      coordinate system. Two direction vectors are required to
      complete the definition of the placement coordinate system.
      The axis is the placement Z axis direction and the
      ref_direction is an approximation to the placement X axis
      direction.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>axis2_placement_3d</strong> defined in ISO10303-42.
    </blockquote>
    
<h1>IfcBaseAxis</h1>
                                
                                <h1>IfcBoundaryCurve</h1>
                                
                                <p>An <span class="self-ref">IfcBoundaryCurve</span> defines a curve acting as the boundary of a surface.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A boundary curve is a type of bounded curve suitable for the definition of a surface boundary.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>boundary_curve</strong> defined in
ISO10303-42.</blockquote>

<h1>IfcBoundedCurve</h1>
                                
                                <p>An <span class="self-ref">IfcBoundedCurve</span> is a curve of finite length.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A bounded curve is a curve of finite arc length with identifiable end points.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>bounded_curve</strong> defined in
ISO10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>A bounded curve has finite arc length.</li>
<li>A bounded curve has a start point and an end point.</li>
</ol>
<h1>IfcBoundedSurface</h1>
                                
                                <p>An <span class="self-ref">IfcBoundedSurface</span> is a surface of finite area.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A bounded surface is a surface of finite area with identifiable boundaries.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>bounded_surface</strong> defined in
ISO10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>A bounded surface has finite non-zero surface area.</li>
<li>A bounded surface has boundary curves.</li>
</ol>
<h1>IfcBSplineCurve</h1>
                                
                                <p>The <span class="self-ref">IfcBSplineCurve</span> is a spline curve parameterized by spline functions.</p>
<p>
<blockquote class="note">NOTE&nbsp; Figure quoted from ISO 10303-42.</blockquote>
<table summary="illustration">
<tr>
<td><img src="../../../figures/IfcBSplineCurve-Fig1.gif" alt="control points" width="520" height="200" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A B-spline curve is a piecewise parametric polynomial or rational curve described in terms of control points and basis
functions. The B-spline curve has been selected as the most stable format to represent all types of polynomial or
rational parametric curves. With appropriate attribute values it is capable of representing single span or spline
curves of explicit polynomial, rational, Bezier or B-spline type.<br>
<br>
Interpretation of the data is as follows:
<ol style=" font-size:inherit;">
<li style=" font-size:inherit;">
<p style=" font-size:inherit;">All weights shall be positive and the curve is given by</p>
<img src="../../../figures/IfcBSplineCurve-Math1.gif" alt="equation" width="183" height="115" border="0">
<table summary="illustration" style=" font-size:inherit;">
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>k</i>+1</td>
<td style=" font-size:inherit;">= number of control points</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;">P<sub><i>i</i></sub></td>
<td style=" font-size:inherit;">= control points</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>w</i><sub><i>i</i></sub></td>
<td>= weights</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>d</i></td>
<td>= degree</td>
</tr>
</table>
<p style=" font-size:inherit;">The knot array is an array of (<i>k</i>+<i>d</i>+2) real numbers
[<i>u</i><sub>-<i>d</i></sub> ... <i>u</i><sub><i>k</i>+1</sub>], such that for all indices j in
[-<i>d</i>,<i>k</i>], <i>u</i><sub>j</sub> &lt;= <i>u</i><sub>j+1</sub>. This array is obtained from the knot
data list by repeating each multiple knot according to the multiplicity. <i>N <sup>d</sup><sub>i</sub></i>, the
<i>i</i>th normalized B-spline basis function of degree <i>d</i>, is defined on the subset
[<i>u<sub>i-d</sub></i>, ... , <i>u<sub>i+1</sub></i>] of this array.</p>
</li>
<li style=" font-size:inherit;">
<p style=" font-size:inherit;">Let <i>L</i> denote the number of distinct values among the <i>d</i>+<i>k</i>+2
knots in the knot array; <i>L</i> will be referred to as the 'upper index on knots'. Let <i>m<sub>j</sub></i>
denote the multiplicity (number of repetitions) of the <i>j</i>th distinct knot. Then</p>
<img src="../../../figures/IfcBSplineCurve-Math2.gif" alt="equation" width="149" height="59" border="0">
<p style=" font-size:inherit;">All knot multiplicities except the first and the last shall be in the range 1 ...
degree; the first and last may have a maximum value of degree + 1. In evaluating the basis functions, a knot <i>u</i>
of e.g. multiplicity 3 is interpreted as a string <i>u, u, u,</i> in the knot array. The B-spline curve has 3 special
subtypes (<i>Note: only 1, Bezier curve, included in this IFC release</i>) where the knots and knot multiplicities
are derived to provide simple default capabilities.</p>
</li>
<li style=" font-size:inherit;">Logical flag is provided to indicate whether the curve self intersects or not.</li>
</ol>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>b_spline_curve</strong> defined in
ISO10303-42.</blockquote>

<h1>IfcBSplineCurveForm</h1>
                                
                                <h1>IfcBSplineCurveWithKnots</h1>
                                
                                <p>The <span class="self-ref">IfcBSplineCurveWithKnots</span> is a spline curve parameterized by spline functions for which the knot values
are explicitly given.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
This is the type of b-spline curve for which the knot values are explicitly given. This subtype shall be used to
represent non-uniform B-spline curves and may be used for other knot types.<br></r>
Let <i>L</i> denote the number of distinct values amongst the <i>d</i>+<i>k</i>+2 knots
in the knot list; <i>L</i> will be referred to as the &lsquo;upper index on knots&rsquo;. Let <i>m<sub>j</sub></i>
denote the multiplicity (i.e., number of repetitions) of the <i>j</i>th distinct knot. Then:<br><br>
<img src="../../../figures/IfcBSplineCurve-Math2.gif" alt="formula" border="0"><br><br>
All knot multiplicities except the first and the last shall be in the range
1,...,<i>d</i>; the first and last may have a maximum value of <i>d</i> + 1. In evaluating the basis functions, a knot
<i>u</i> of, e.g., multiplicity 3 is interpreted as a sequence <i>u</i>, <i>u</i>, <i>u</i>,; in the knot array.
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>b_spline_curve_with_knots</strong> defined in
ISO10303-42.</blockquote>

<h1>IfcBSplineSurface</h1>
                                
                                <p>The <span class="self-ref">IfcBSplineSurface</span> is a general form of rational or polynomial parametric surface.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A b_spline_surface is a general form of rational or polynomial parametric surface which is represented by control
points, basis functions, and possibly, weights. As with the corresponding curve entity it has some special subtypes
where some of the data can be derived.
<ol style="list-style-type:lower-roman; font-size:inherit;">
<li style=" font-size:inherit;">The symbology used here is:
<table border="0" cellpadding="2" cellspacing="0" summary="symbology" style=" font-size:inherit;">
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>K</i>1</td>
<td align="left" style=" font-size:inherit;">= upper_index_on_u_control_points</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>K</i>2</td>
<td align="left" style=" font-size:inherit;">= upper_index_on_v_control_points</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><b>P</b><sub>ij</sub></td>
<td align="left" style=" font-size:inherit;">= control_points</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;">w<sub>ij</sub></td>
<td align="left" style=" font-size:inherit;">= weights</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>d</i>1</td>
<td align="left" style=" font-size:inherit;">= u_degree</td>
</tr>
<tr style=" font-size:inherit;">
<td align="right" width="100" style=" font-size:inherit;"><i>d</i>2</td>
<td align="left" style=" font-size:inherit;">= v_degree</td>
</tr>
</table>
<br></li>
<li style=" font-size:inherit;">The control points are ordered as
<blockquote style=" font-size:inherit;">P<sub>00</sub>, P<sub>01</sub>, P<sub>02</sub>, ......,
P<sub><i>K</i>1(<i>K</i>2-1)</sub>, P<sub><i>K</i>1<i>K</i>2</sub></blockquote>
The weights, in the case of the rational subtype, are ordered similarly.<br>
<br></li>
<li style=" font-size:inherit;">For each parameter, <i>s</i> = <i>u</i> or <i>v</i>, if <i>k</i> is the upper
index on the control points and <i>d</i> is the degree for <i>s</i>, the knot array is an array of (<i>k</i> +
<i>d</i> + 2) real numbers [s<sub>-d</sub>, ...., s<sub><i>k</i>+1</sub>], such that for all indices j in
[-<i>d</i>, <i>k</i>]; <i>s</i><sub><i>j</i></sub> &le; <i>s</i><sub><i>j</i>+1</sub>. This array is
obtained from the appropriate u_knots or v_knots list by repeating each multiple knot according to the
multiplicity.<br>
<br>
N<sub><i>i</i></sub><sup><i>d</i></sup>, the <i>i</i>th normalised B-spline basis function of degree <i>d</i>,
is defined on the subset [<i>s</i><sub>i-<i>d</i></sub>, ...., <i>s</i><sub><i>i</i>+1</sub>] of this
array.<br>
<br></li>
<li style=" font-size:inherit;">Let <i>L</i> denote the number of distinct values amongst the knots in the knot list;
<i>L</i> will be referred to as the &lsquo;upper index on knots&rsquo;. Let <i>m</i><sub><i>j</i></sub> denote
the multiplicity (i.e., number of repetitions) of the <i>j</i>th distinct knot value. Then:
<blockquote><img src="../../../figures/IfcBSplineCurve-Math2.gif" alt="formula" border="0"></blockquote>
All knot multiplicities except the first and the last shall be in the range 1, ...., <i>d</i>; the first and last may
have a maximum value of <i>d</i>+1. In evaluating the basis functions, a knot <i>u</i> of, e.g., multiplicity 3 is
interpreted as a sequence <i>u</i>, <i>u</i>, <i>u</i>, in the knot array.<br>
<br></li>
<li style=" font-size:inherit;">The surface form is used to identify specific quadric surface types (which shall have
degree two), ruled surfaces and surfaces of revolution. As with the b-spline curve, the surface form is informational
only and the spline data takes precedence.<br>
<br></li>
<li style=" font-size:inherit;">The surface is to be interpreted as follows: In the polynomial case the surface is
given by the equation:
<blockquote><img src="../../../figures/IfcBSplineSurface-Math1.gif" alt="formula" border></blockquote>
In the rational case the surface equation is:
<blockquote><img src="../../../figures/IfcBSplineSurface-Math2.gif" alt="formula" border></blockquote>
</li>
</ol>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>b_spline_surface</strong> defined in
ISO10303-42.</blockquote>


<h1>IfcBSplineSurfaceForm</h1>
                                
                                <h1>IfcBSplineSurfaceWithKnots</h1>
                                
                                <p>The <span class="self-ref">IfcBSplineSurfaceWithKnots</span> is a general form of rational or polynomial parametric surface in which the
knot values are explicitly given.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
This is a B-spline surface in which the knot values are explicitly given. This subtype shall be used to represent
non-uniform B-spline surfaces, and may also be used for other knot types.<br>
All knot multiplicities except the first and the last shall be in the range
1,....,<i>d</i>; the first and last may have a maximum value of <i>d</i> + 1. In evaluating the basis functions, a knot
<i>u</i> of, e.g., multiplicity 3 is interpreted as a sequence <i>u</i>, <i>u</i>, <i>u</i>, in the knot array.
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>b_spline_surface_with_knots</strong> defined in
ISO10303-42.</blockquote>

<h1>IfcBuild2Axes</h1>
                                
                                <h1>IfcBuildAxes</h1>
                                
                                <h1>IfcCartesianPoint</h1>
                                
                                <p>An <span class="self-ref">IfcCartesianPoint</span> defines a point by coordinates in an orthogonal, right-handed Cartesian coordinate
system. For the purpose of this specification only two and three dimensional Cartesian points are used.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A cartesian_point is a point defined by its coordinates in a rectangular Cartesian coordinate system, or in a parameter
space. The entity is defined in a one, two or three-dimensional space as determined by the number of coordinates in the
list. Depending upon the geometric representation context in which the point is used the names of the coordinates may
be (x,y,z), or (u,v), or any other chosen values.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>cartesian_point</strong> defined in ISO
10303-42</blockquote>


<h1>IfcCartesianTransformationOperator</h1>
                                
                                <p>An <span class="self-ref">IfcCartesianTransformationOperator</span> defines an abstract supertype of different kinds of geometric
transformations.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A Cartesian transformation operator defines a geometric transformation composed of translation, rotation, mirroring and
uniform scaling. The list of normalized vectors u defines the columns of an orthogonal matrix T. These vectors are
computed, by the base axis function, from the direction attributes axis1, axis2 and, in Cartesian transformation
operator 3d, axis3. If <b>|T|= -1</b>, the transformation includes mirroring. The local origin point <b>A</b>, the
scale value <b><i>S</i></b> and the matrix <b>T</b> together define a transformation.<br>
<br>
The transformation for a point with position vector P is defined by
<blockquote style=" font-size:inherit;">P -&gt; A + <i>S</i>TP</blockquote>
<p style=" font-size:inherit;">The transformation for a direction d is defined by</p>
<blockquote style=" font-size:inherit;">d -&gt; Td</blockquote>
<p style=" font-size:inherit;">The transformation for a vector with orientation d and magnitude k is defined by</p>
<blockquote style=" font-size:inherit;">d -&gt; Td, and<br>
<i>k -&gt; Sk</i></blockquote>
<p style=" font-size:inherit;">For those entities whose attributes include an axis2 placement, the transformation is
applied, after the derivation, to the derived attributes p defining the placement coordinate directions. For a
transformed surface, the direction of the surface normal at any point is obtained by transforming the normal, at the
corresponding point, to the original surface. For geometric entities with attributes (such as the radius of a circle)
which have the dimensionality of length, the values will be multiplied by <i>S</i>.</p>
<p style=" font-size:inherit;">For curves on surface the p curve.reference to curve will be unaffected by any
transformation. The Cartesian transformation operator shall only be applied to geometry defined in a consistent system
of units with the same units on each axis. With all optional attributes omitted, the transformation defaults to the
identity transformation. The Cartesian transformation operator shall only be instantiated as one of its subtypes.</p>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>cartesian_transformation_operator</strong>
defined in ISO10303-42.</blockquote>

<h1>IfcCartesianTransformationOperator2D</h1>
                                
                                <p>An <span class="self-ref">IfcCartesianTransformationOperator2D</span> defines a geometric transformation in two-dimensional space.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A Cartesian transformation operator 2d defines a geometric transformation in two-dimensional space composed of
translation, rotation, mirroring and uniform scaling. The list of normalized vectors u defines the columns of an
orthogonal matrix <b>T</b>. These vectors are computed from the direction attributes axis1 and axis2 by the base axis
function. If <b>|T|= -1</b>, the transformation includes mirroring.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>cartesian_transformation_operator_2d</strong>
defined in ISO10303-42.</blockquote>

<h1>IfcCartesianTransformationOperator2DnonUniform</h1>
                                
                                <p>A Cartesian transformation operator 2d non uniform defines a geometric transformation in two-dimensional space composed of translation, rotation, mirroring and non uniform scaling. Non uniform scaling is given by two different scaling factors:</p> 
<ul> 
<li><i>SELF\IfcCartesianTransformationOperator.Scale</i>: the x axis scale factor</li> 
<li><i>Scale2</i>: the y axis scale factor</li> 
</ul> 
<p>If the <i>Scale</i> factor (at supertype <strong>IfcCartesianTransformationOperator</strong>) is omitted, it defaults to 1.0. If the <i>Scale2</i> factor is omitted, it defaults to the value of <i>Scale</i> (the x axis scale factor).</p> 

<blockquote class="note"> 
NOTE&nbsp; The scale factor (<i>Scl</i>) defined at the supertype <strong>IfcCartesianTransformationOperator</strong> is used to express the calculated <i>Scale</i> factor (normally x axis scale factor).
</blockquote> 



<h1>IfcCartesianTransformationOperator3D</h1>
                                
                                <p>An <strong>IfcCartesianTransformationOperator</strong> defines a geometric transformation in three-dimensional space.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A Cartesian transformation operator 3d defines a geometric transformation in three-dimensional space composed of
translation, rotation, mirroring and uniform scaling. The list of normalized vectors u defines the columns of an
orthogonal matrix <b>T</b>. These vectors are computed from the direction attributes axis1, axis2 and axis3 by the base
axis function. If |<b>T</b>|= -1, the transformation includes mirroring.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>cartesian_transformation_operator_3d</strong>
defined in ISO10303-42.</blockquote>

<h1>IfcCartesianTransformationOperator3DnonUniform</h1>
                                
                                <p>A Cartesian transformation operator 3d non uniform defines a geometric transformation in three-dimensional space composed of translation, rotation, mirroring and non uniform scaling. Non uniform scaling is given by three different scaling factors:</p>

<ul>
<li><i>SELF\IfcCartesianTransformationOperator.Scale</i>: the x axis scale factor</li>
<li><i>Scale2</i>: the y axis scale factor</li>
<li><i>Scale3</i>: the z axis scale factor</li>
</ul>

<p>If the <i>Scale</i> factor (at supertype <strong>IfcCartesianTransformationOperator</strong>) is omitted, it defaults to 1.0. If the <i>Scale2</i> or the <i>Scale3</i> factor is omitted, it defaults to the value of <i>Scale</i> (the x axis scale factor).</p> 

<blockquote class="note"> 
NOTE&nbsp; The scale factor (<i>Scl</i>) defined at the supertype <strong>IfcCartesianTransformationOperator</strong> is used to express the calculated <i>Scale</i> factor (normally x axis scale factor).
</blockquote>



<h1>IfcCircle</h1>
                                
                                <p>An <span class="self-ref">IfcCircle</span> is a curve consisting of a set of points having equal distance from the center.</p>
<blockquote class="note">NOTE&nbsp; A circular arc segment is defined by using the <strong>IfcTrimmedCurve</strong> with
<i>BasisCurve</i> being an <span class="self-ref">IfcCircle</span>.</blockquote>

<p>
coordinate system placed within the object coordinate system of an element.</p>

<table summary="example" cellpadding="2" cellspacing="2">
<tr>
<td><img src="../../../figures/IfcCircle-Layout1.gif" alt="axis1 placement" width="400" height="300" border="0"></td>
<td style="vertical-align:bottom; text-align:left;">
</td>
</tr>
<tr><td><p class="figure">
</table>
<p>&nbsp;</p>

<blockquote class="extDef">NOTE Definition according to ISO/CD 10303-42:1992<br>
A circle is defined by a radius and the location and orientation of the circle. Interpretation of data should be as
follows:
<blockquote><code style="font-size:inherit">C = SELF\IfcConic.Position.Location<br>
x = SELF\IfcConic.Position.P[1]<br>
y = SELF\IfcConic.Position.P[2]<br>
z = SELF\IfcConic.Position.P[3]<br>
R = Radius</code></blockquote>
<p style="font-size:inherit">and the circle is parameterized as</p>
<blockquote>
<blockquote><img alt="formula" src="../../../figures/IfcCircle-Math1.gif" width="205" height="22"></blockquote>
</blockquote>
<p style="font-size:inherit">The parameterization range is 0 &le; <i>u</i> &le; 2&pi; (0 &le; <i>u</i> &le; 360
degree).<br>
In the placement coordinate system defined above, the circle is the equation <i>C</i> = 0, where</p>
<blockquote>
<blockquote><img alt="formula" src="../../../figures/IfcCircle-Math2.gif" width="154" height="24"></blockquote>
</blockquote>
<p style="font-size:inherit">The positive sense of the circle at any point is in the tangent direction, <b>T</b>, to
the curve at the point, where</p>
<blockquote>
<blockquote><img alt="formula" src="../../../figures/IfcCircle-Math3.gif" width="102" height="25"></blockquote>
</blockquote>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>circle</strong> defined in ISO
10303-42</blockquote>

<h1>IfcCompositeCurve</h1>
                                
                                <p>An <span class="self-ref">IfcCompositeCurve</span> is a continuous curve composed of curve segments.</p>
<p>
<table summary="illustration">
<tr>
<td><img src="../../../figures/IfcCompositeCurve.png" alt="formula" width="600" height="260"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<p>Consider an <span class="self-ref">IfcCompositeCurve</span> having line segment and an arc segment. The line should be parameterized:</p>
<ul>
<li><strong>IfcPolyline</strong> with start= 0.,0. end= 0.,1., <i>SameSense</i>= TRUE, parametric length = 1.</li>
</ul>
<p>The arch should be parameterized:</p>
<ul>
<li><strong>IfcTrimmedCurve</strong> with start= 180', end= 90', <i>SameSense</i>= FALSE, parametric length = 90.</li>
</ul>
<p>Then the parameterization of the composite curve is:</p>
<ul>
<li><span class="self-ref">IfcCompositeCurve</span> with 0. &le; T &le; 1. (line segment) and 1. &le; T &le; 91. (arc segment), parametric
length = 91.</li>
</ul>
<p>&nbsp;</p>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO 10303-42:<br>
A composite curve is a collection of curves joined end-to-end. The individual segments of the curve are themselves
defined as composite curve segments. The parameterization of the composite curve is an accumulation of the parametric
ranges of the referenced bounded curves. The first segment is parameterized from <i>0</i> to
<i>l<sub><small>1</small></sub></i> and for <i>i</i> <i>&le;</i> <i>2</i>, the
<i>i<sup><small>th</small></sup></i> segment is parameterized from:</p>
<blockquote><img src="../../../figures/IfcCompositeCurve-Math1.gif" alt="formula" width="140" height="60"></blockquote>
<p style="font-size:inherit">where <i>l<sub><small>k</small></sub></i> is the parametric length (i.e., difference
between maximum and minimum parameter values) of the curve underlying the <i>k<sup><small>th</small></sup></i>
segment. Let <i>T</i> denote the parameter for the composite curve. Then, if the <i>i</i>th segment is not a
reparameterised composite curve segment, <i>T</i> is related to the parameter <i>t<sub>i</sub></i>;
<i>t<sub>i0</sub></i> <i>&le;</i> <i>t<sub>i</sub></i> <i>&le;</i> <i>t<sub>i1</sub></i>; for the
<i>i</i>th segment by the equation:</p>
<blockquote><img src="../../../figures/IfcCompositeCurve-Math2.gif" alt="formula" width="140" height="60"> if
<i>Segments[i].SameSense</i> = TRUE;</blockquote>
<p style="font-size:inherit">or by the equation:</p>
<blockquote><img src="../../../figures/IfcCompositeCurve-Math3.gif" alt="formula" width="140" height="60"> if
<i>Segments[i].SameSense</i> = FALSE;</blockquote>
<p style="font-size:inherit">If the segments[i] is of type reparameterised composite curve segment,</p>
<blockquote><img src="../../../figures/IfcCompositeCurve-Math4.gif" alt="formula" width="140" height="60"> where <i>&tau;</i>
is defined at reparameterized composite curve segment (see
<i>IfcReparameterizedCompositeCurveSegment</i>).</blockquote>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>composite_curve</strong>  defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The <i>SameSense</i> attribute of each segment correctly specifies the senses of the component curves. When
traversed in the direction indicated by <i>SameSense</i>, the segments shall join end-to-end.</li>
</ol>

<h1>IfcCompositeCurveOnSurface</h1>
                                
                                <p>The <span class="self-ref">IfcCompositeCurveOnSurface</span> is a collection of segments, based on p-curves. i.e. a curve which lies on
the basis of a surface and is defined in the parameter space of that surface. The p-curve segment is a special type of
a composite curve segment and shall only be used to bound a surface.</p>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO/CD 10303-42:1992<br>
A composite curve on surface is a collection of segments which are curves on a surface. Each segment shall lie on the
basis surface.</p>
<p style="font-size:inherit">There shall be at least positional continuity between adjacent segments. The
parameterization of the composite curve is obtained from the accumulation of the parametric ranges of the segments. The
first segment is parameterized from <i>0</i> to <i>l<sub>1</sub></i>, and, for <i>i &ge; 2</i>, the
<i>i<sup>th</sup></i> segment is parameterized from</p>
<blockquote><img src="../../../figures/IfcCompositeCurveOnSurface-Math1.gif" alt="formula" width="140" height="60"></blockquote>
<p style="font-size:inherit">where <i>l<sub>k</sub></i> is the parametric length (that is, the difference between
maximum and minimum parameter values) of the <i>k<sup>th</sup></i> curve segment.</p>
</blockquote>
<blockquote class="note">Entity adapted from <strong>composite_curve_on_surface</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcCompositeCurveSegment</h1>
                                
                                <p>An <span class="self-ref">IfcCompositeCurveSegment</span> is a bounded curve constructed for the sole purpose to be a segment within an
<strong>IfcCompositeCurve</strong>.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A composite curve segment is a bounded curve together with transition information which is used to construct a
composite curve.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>composite_curve_segment</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcConic</h1>
                                
                                <p>An <span class="self-ref">IfcConic</span> is a parameterized planar curve.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A conic is a planar curve which could be produced by intersecting a plane with a cone. A conic is defined in terms of
its intrinsic geometric properties rather than being described in terms of other geometry. A conic entity always has a
placement coordinate system defined by axis2_placement; the parametric representation is defined in terms of this
placement coordinate system.</blockquote>
<blockquote class="note">NOTE Entity adapted from <strong>conic</strong> defined in ISO 10303-42</blockquote>


<h1>IfcConstraintsParamBSpline</h1>
                                
                                <h1>IfcCrossProduct</h1>
                                
                                <h1>IfcCurve</h1>
                                
                                <p>
      An <span class="self-ref">IfcCurve</span> is a curve in two-dimensional or
      three-dimensional space. It includes definitions for
      bounded and unbounded curves.
    </p>
    <blockquote class="note">NOTE&nbsp;  Definition according to
        ISO 10303-42:<br>
        A curve can be envisioned as the path of a point moving in
        its coordinate space.</blockquote>
    <blockquote class="note">NOTE
        Entity adapted from <strong>curve</strong> defined in
        ISO 10303-42</blockquote>

    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>A curve shall be arcwise connected
      </li>
      <li>A curve shall have an arc length greater than zero.
      </li>
    </ol>
<h1>IfcCurveBoundedPlane</h1>
                                
                                <p>The <span class="self-ref">IfcCurveBoundedPlane</span> is a parametric planar surface with curved boundaries defined by one or more
boundary curves. The bounded plane is defined to be the portion of the basis surface in the direction of N x T from any
point on the boundary, where N is the surface normal and T the boundary curve tangent vector at this point. The region
so defined shall be arcwise connected.</p>
<p>The <i>BasisSurface</i> is an <strong>IfcPlane</strong> that establishes the position coordinate system by
<i>SELF\IfcElementarySurface.Position</i>. The <i>OuterBoundary</i> and the <i>InnerBoundaries</i> (if provided)
shall lie on the surface of <strong>IfcPlane</strong>. The outer and inner boundary curves shall be defined using the
<i>u</i>, and <i>v</i> values provided by parameterization of the <i>BasisSurface</i> as their <i>x</i>, and
<i>y</i> coordinate values.</p>
<blockquote class="note">NOTE&nbsp; Entity defined in analogy to <strong>curve_bounded_surface</strong> defined in ISO
10303-42.</blockquote>



<h1>IfcCurveBoundedSurface</h1>
                                
                                <p>The <span class="self-ref">IfcCurveBoundedSurface</span> is a parametric surface with boundaries defined by p-curves, that is, a curve
which lies on the basis of a surface and is defined in the parameter space of that surface. The p-curve is a special
type of a composite curve segment and shall only be used to bound a surface.</p>
<p>The outer boundary shall be either defined by:</p>
<ul>
<li>an <strong>IfcOuterBoundaryCurve</strong> a closed composite curve on surface for the definition of an outer boundary, in
this case the attribute <i>ImplicitOuter</i> has to be set to FALSE, or</li>
<li>an implicit boundary of the bounded surface, e.g. the u1, u2, v1, v2 of <strong>IfcRectangularTrimmedSurface</strong>, in
this case the attribute <i>ImplicitOuter</i> has to be set to TRUE.</li>
</ul>
<blockquote class="note">NOTE&nbsp; Some surfaces, like <strong>IfcCylindricalSurface</strong> does not have identifiable
implicit boundaries.</blockquote>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The curve bounded surface is a parametric surface with curved boundaries defined by one or more boundary curves. One of
the boundary curves may be the outer boundary; any number of inner boundaries is permissible. The region of the curve
bounded surface in the basis surface is defined to be the portion of the basis surface in the direction of
<b><i>N</i> x <i>T</i></b> from any point on the boundary, where <b>N</b> is the surface normal and <b>T</b> the
boundary curve tangent vector at this point. The region so defined shall be arcwise connected.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>curve_bounded_surface</strong> defined in ISO
10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Each curve in the set of <i>Boundaries</i> shall be closed.</li>
<li>No two curves in the set of <i>Boundaries</i> shall intersect.</li>
<li>At most one of the boundary curves may enclose any other boundary curve. If an <strong>IfcOuterBoundaryCurve</strong> is
designated, only that curve may enclose any other boundary curve.</li>
</ol>

<h1>IfcCurveDim</h1>
                                
                                <h1>IfcCurveOnSurface</h1>
                                
                                <h1>IfcCurveWeightsPositive</h1>
                                
                                <h1>IfcCylindricalSurface</h1>
                                
                                <p>The cylindrical surface is a surface unbounded in the direction of <i>z</i>. Bounded cylindrical surfaces are
defined by using a subtype of <strong>IfcBoundedSurface</strong> with <i>BasisSurface</i> being a cylindrical surface.</p>
<blockquote class="note">NOTE 1&nbsp; A bounded cylindrical surface can be defined by an
<strong>IfcRectangularTrimmedSurface</strong> with <i>BasisSurface</i> being the cylindrical surface and <i>U1</i> =
0&deg;, <i>U2</i> = 360&deg; and <i>V1</i> = lower bound in <b>z</b>, <i>V2</i> = upper bound in <b>z</b> (if the
plane angle measure is degree). A bounded cylindrical arc surface is provided with |U1 - U2| &lt; 360&deg; (assuming
the Usense and Vsense agree to the sense of the basis surface).</blockquote>
<blockquote class="note">NOTE 2&nbsp; A non-rectangular bounded cylindrical surface, e.g. the surface of a round wall
underneath a sloped roof, cab be defined by an <strong>IfcCurveBoundedSurface</strong> with <strong>IfcBoundaryCurve</strong>'s, being
a collection of p-curve segments. A p-curve is curve which lies on the basis of a surface and is defined in the
parameter space of that surface.</blockquote>
<p>The inherited attributes are interpreted as</p>
<ul>
<li><i>SELF\IfcElementarySurface.Position</i> defines the location and orientation of the cylindrical surface.</li>
<li><i>SELF\IfcElementarySurface.Position.Location</i> definesd a point on the axis of the cylindrical surface.</li>
<li><i>SELF\IfcElementarySurface.Position.P[3]</i> defines the direction of the axis of the cylindrical surface.</li>
</ul>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO/CD 10303-42:1992<br>
A cylindrical surface is a surface at a constant distance (the radius) from a straight line. A cylindrical surface is
defined by its radius and its orientation and location. The data is to be interpreted as follows:</p>
<blockquote style="font-size:inherit">
<pre style=" font-size:x-small;">
C = Position.Location
x = Position.P[1]
y = Position.P[2]
z = Position.P[3]
<i>R</i> = Radius
</pre></blockquote>
<p style="font-size:inherit">and the surface is parameterized as:</p>
<blockquote><img src="../../../figures/IfcCylindricalSurface-Math1.gif" alt="formula" width="300" height="25"></blockquote>
<p style="font-size:inherit">where the parametric range is -&infin; &lt; <i>u,v</i> &lt; &infin; .</p>
<p style="font-size:inherit">In the above parameterization the length unit for the unit vectors <b>z</b> is equal to
that of the radius <b><i>R</i></b>. In the placement coordinate system defined above, the surface is represented by
the equation <i>S</i> = 0, where</p>
<blockquote><img src="../../../figures/IfcCylindricalSurface-Math2.gif" alt="formula" width="200" height="25"></blockquote>
<p style="font-size:inherit">The positive direction of the normal to the surface at any point on the surface is given
by</p>
<blockquote>
<p style="font-size:inherit"><img src="../../../figures/IfcCylindricalSurface-Math3.gif" alt="formula" width="100" height="25">,
or as unit normal by</p>
<p style="font-size:inherit"><img src="../../../figures/IfcCylindricalSurface-Math4.gif" alt="formula" width="220" height=
"25"></p>
</blockquote>
<p style="font-size:inherit">The direction of the normal is away from the axis of the cylinder.</p>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>cylindrical_surface</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcDimensionCount</h1>
                                
                                <h1>IfcDirection</h1>
                                
                                <p>
      The <span class="self-ref">IfcDirection</span> provides a direction in two or
      three dimensional space depending on the number of
      <i>DirectionRatio</i>'s provided. The <span class="self-ref">IfcDirection</span>
      does not imply a vector length, and the direction ratios does
      not have to be normalized.
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
      This entity defines a general direction vector in two or
      three dimensional space. The actual magnitudes of the
      components have no effect upon the direction being defined,
      only the ratios X:Y:Z or X:Y are significant.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; The components of this entity are not normalized.
      If a unit vector is required it should be normalized before
      use.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>direction</strong> defined in ISO 10303-42.
    </blockquote>
    
<h1>IfcDotProduct</h1>
                                
                                <h1>IfcElementarySurface</h1>
                                
                                <p>An <span class="self-ref">IfcElementarySurface</span> in the common supertype of analytical surfaces.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An elementary surface (<span class="self-ref">IfcElementarySurface</span>) is a simple analytic surface with defined parametric
representation.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>elementary_surface</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcEllipse</h1>
                                
                                <p>An <span class="self-ref">IfcEllipse</span> is a curve consisting of a set of points whose distances to two fixed points add to the same
constant.</p>
<p>The inherited <i>SELF\IfcConic.Position.Location</i> is the center of the <span class="self-ref">IfcEllipse</span>, and the inherited
S<i>ELF\IfcConic.Position.Position.P[1]</i> is the direction of the <i>SemiAxis1</i>.</p>
<table summary="example" cellpadding="2" cellspacing="2">
<tr>
<td><img src="../../../figures/IfcEllipse-Layout1.gif" alt="ellipse" width="400" height="300" border="0"></td>
<td style="vertical-align:bottom; text-align:left;">
<p><span style="font-size:smaller">Definition of the <span class="self-ref">IfcEllipse</span> within the a three-dimensional position
coordinate system is shown in 
<p><span style=" font-size:smaller;">It is placed within the object coordinate system of an element of which it is a
representation.</span></p>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
<td>&nbsp;</td>
</tr>
</table>
<blockquote class="note">NOTE&nbsp; An elliptical arc segment is defined by using the <strong>IfcTrimmedCurve</strong> with
<i>BasisCurve</i></blockquote>
<blockquote class="extDef">
<p style=" font-size:inherit;">NOTE Definition according to ISO/CD 10303-42:1992<br>
An ellipse is a conic section defined by the lengths of the semi-major and semi-minor diameters and the position
(center or mid point of the line joining the foci) and orientation of the curve. Interpretation of the data shall be as
follows:</p>
<blockquote><code style="font-size:small;">C = position.location<br>
x = position.p[1]<br>
y = position.p[2]<br>
z = position.p[3]<br>
R1 = semi axis 1<br>
R2 = semi axis 2</code></blockquote>
<p style=" font-size:inherit;">and the ellipse is parameterized as:</p>
<blockquote><img alt="formula" src="../../../figures/IfcEllipse-Math1.gif" width="220" height="22"></blockquote>
<p style=" font-size:inherit;">The parameterization range is 0 &le; <i>u</i> &lt;&le; 2&pi; (0 &le; <i>u</i> &le; 360
degree). In the placement coordinate system defined above, the ellipse is the equation <i>C</i> = 0, where</p>
<blockquote>
<p style=" font-size:inherit;"><img alt="formula" src="../../../figures/IfcEllipse-Math2.gif" width="193" height="24"></p>
</blockquote>
<p style=" font-size:inherit;">The positive sense of the ellipse at any point is in the tangent direction, T, to the
curve at the point, where</p>
<blockquote>
<p style=" font-size:inherit;"><img alt="formula" src="../../../figures/IfcEllipse-Math3.gif" width="102" height="25"></p>
</blockquote>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>ellipse</strong> defined in ISO
10303-42</blockquote>

<h1>IfcFirstProjAxis</h1>
                                
                                <h1>IfcGeometricRepresentationItem</h1>
                                
                                <p>An <span class="self-ref">IfcGeometricRepresentationItem</span> is the common supertype of all geometric items used within a
representation. It is positioned within a geometric coordinate system, directly or indirectly through intervening
items.</p>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO/CD 10303-42:1992<br>
An geometric representation item is a representation item that has the additional meaning of having geometric position
or orientation or both. This meaning is present by virtue of:</p>
<ul style="font-size:inherit">
<li style="font-size:inherit">being a Cartesian point or a direction</li>
<li style="font-size:inherit">referencing directly a Cartesian point or direction</li>
<li style="font-size:inherit">referencing indirectly a Cartesian point or direction</li>
</ul>
<p style="font-size:inherit">An indirect reference to a Cartesian point or direction means that a given geometric item
references the Cartesian point or direction through one or more intervening geometry or topology items.</p>
<blockquote class="example">EXAMPLE&nbsp;1 Consider a circle. It gains its geometric position and orientation by virtue
of a reference to axis2_placement (<strong>IfcAxis2Placement</strong>) that is turn references a cartesian_point
(<strong>IfcCartesianPoint</strong>) and several directions (<strong>IfcDirection</strong>).</blockquote>
<blockquote class="example">EXAMPLE&nbsp;2 Consider a manifold brep. A manifold_solid_brep
(<strong>IfcManifoldSolidBrep</strong>) is a geometric_representation_item (<span class="self-ref">IfcGeometricRepresentationItem</span>) that
through several layers of topological_representation_item's (<strong>IfcTopologicalRepresentationItem</strong>) references poly
loops (<strong>IfcPolyLoop</strong>). Through additional intervening entities poly loops reference cartesian_point's
(<strong>IfcCartesianPoint</strong>).</blockquote>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>geometric_representation_item</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcGetBasisSurface</h1>
                                
                                <h1>IfcKnotType</h1>
                                
                                <h1>IfcLine</h1>
                                
                                <p>The <span class="self-ref">IfcLine</span> is an unbounded line parameterized by an <strong>IfcCartesianPoint</strong> and an <strong>IfcVector</strong>.
The magnitude of the <strong>IfcVector</strong> affects the parameterization of the line, but it does not bound the line.</p>
<blockquote class="note">NOTE&nbsp; A line segment is defined using either the <strong>IfcPolyline</strong> with two
<i>Points</i>, or the <strong>IfcTrimmedCurve</strong> with <i>BasisCurve</i> being an <span class="self-ref">IfcLine</span>.</blockquote>
<blockquote class="example">EXAMPLE&nbsp; 
0.,0. and ending at 0.,2. can be defined by:</blockquote>
<blockquote><ol>
<li class="small"><span class="self-ref">IfcLine</span> with <strong>IfcVector</strong>.<i>Magnitude</i>: 2.0 AND <strong>IfcTrimmedCurve</strong> with <i>Trim1</i>:
0. and <i>Trim2</i>: 1. (and trimming preference being parameter);</li>
<li class="small"><span class="self-ref">IfcLine</span> with <strong>IfcVector</strong>.<i>Magnitude</i>: 1.0 AND <strong>IfcTrimmedCurve</strong> with <i>Trim1</i>:
0. and <i>Trim2</i>: 2. (and trimming preference being parameter);</li>
<li class="small"><span class="self-ref">IfcLine</span> AND <strong>IfcTrimmedCurve</strong> with <i>Trim1</i>::<strong>IfcCartesianPoint</strong> [0.,0.] and
<i>Trim2</i>::<strong>IfcCartesianPoint</strong> [0.,2.] (and trimming preference being Cartesian) - the <strong>IfcVector</strong>.<i>Magnitude</i> has no effect;</li>
<li class="small"><strong>IfcPolyline</strong> with <i>Points[1]</i> being 0.,0. and <i>Points[2]</i> being 0.,2.</li>
</ol></blockquote>
<table summary="illustration">
<tr>
<td style="vertical-align:top;"><img src="../../../figures/IfcLine-fig1.png" alt="line examples"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A line is an unbounded curve with constant tangent direction. A line is defined by a point and a direction. The
positive direction of the line is in the direction of the dir vector. The curve is parameterized as follows:
<blockquote style=" font-size:inherit;"><b>P</b> = Pnt<br>
<b>V</b> = Dir<br>
&lambda;(<i>u</i>) = <b>P</b> + <i>u</i><b>V</b></blockquote>
and the parametric range is: -&infin; &lt; <i>u</i> &lt; &infin;</blockquote>
<blockquote class="extDef">NOTE&nbsp; Entity adapted from <strong>line</strong> defined in ISO 10303-42</blockquote>


<h1>IfcListToArray</h1>
                                
                                <h1>IfcMakeArrayOfArray</h1>
                                
                                <h1>IfcMappedItem</h1>
                                
                                <p>The <span class="self-ref">IfcMappedItem</span> is the inserted instance of a source definition (to be compared with a block / shared
cell / macro definition). The instance is inserted by applying a Cartesian transformation operator as the
<i>MappingTarget</i>.</p>
<blockquote class="note">NOTE&nbsp; A mapped item is a subtype of representation item. It enables a representation to
be used as a representation item in one or more other representations. The mapped item allows for the definition of a
representation using other representations.</blockquote>
<blockquote class="example">EXAMPLE&nbsp; An <span class="self-ref">IfcMappedItem</span> can reuse other mapped items (ako nested blocks),
doing so the <strong>IfcRepresentationMap</strong> is based on an <strong>IfcShapeRepresentation</strong> including one or more
<span class="self-ref">IfcMappedItem</span>'s.</blockquote>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-43:1992<br>
A mapped item is a type of representation item that specifies the mapping of a representation as an element of the
items of a second representation.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>mapped_item</strong> defined in ISO
10303-43.</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>A mapped item shall not be self-defining by participating in the definition of the representation being
mapped.</li>
<li>The dimensionality of the mapping source and the mapping target has to be the same, if the mapping source is a
geometric representation item.</li>
</ol>

<h1>IfcNormalise</h1>
                                
                                <h1>IfcOffsetCurve2D</h1>
                                
                                <p>An <span class="self-ref">IfcOffsetCurve2D</span> is a curve defined by an offset in 2D space from its <i>BasisCurve</i>.</p>
<blockquote class="extDef">NOTE Definition according to ISO/CD 10303-42:1992<br>
An offset curve 2d is a curve at a constant distance from a basis curve in two-dimensional space. This entity defines a
simple plane-offset curve by offsetting by distance along the normal to basis curve in the plane of basis curve. The
underlying curve shall have a well-defined tangent direction at every point. In the case of a composite curve, the
transition code between each segment shall be cont same gradient or cont same gradient same curvature.
<blockquote class="note">NOTE&nbsp; The offset curve 2d may differ in nature from the basis curve; the offset of a non
self- intersecting curve can be self-intersecting. Care should be taken to ensure that the offset to a continuous curve
does not become discontinuous.</blockquote>
The offset curve 2d takes its parameterization from the basis curve. The offset curve 2d
is parameterized as:
<blockquote>
<img src="../../../figures/IfcOffsetCurve2d-Math1.gif" alt="Math" width="281" height="22" border="0">
</blockquote>
where <b>T</b> is the unit tangent vector to the basis curve <b>C</b>(<i>u</i>) at
parameter value <i>u</i>, and <i>d</i> is distance. The underlying curve shall be two-dimensional.
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>offset_curve_2d</strong> defined in ISO
10303-42.</blockquote>


<h1>IfcOffsetCurve3D</h1>
                                
                                <p>An <span class="self-ref">IfcOffsetCurve3D</span> is a curve defined by an offset in 3D space from its <i>BasisCurve</i>.</p>
<blockquote class="extDef">NOTE Definition according to ISO/CD 10303-42:1992<br>
An offset curve 3d is a curve at a constant distance from a basis curve in three-dimensional space. The underlying
curve shall have a well-defined tangent direction at every point. In the case of a composite curve the transition code
between each segment shall be cont same gradient or cont same gradient same curvature. The offset curve at any point
(parameter) on the basis curve is in the direction <i>V x T</i> where <i>V</i> is the fixed reference direction and
<i>T</i> is the unit tangent to the basis curve. For the offset direction to be well defined, <i>T</i> shall not at
any point of the curve be in the same, or opposite, direction as <i>V</i>.
<blockquote class="note">NOTE&nbsp; The offset curve 3d may differ in nature from the basis curve; the offset of a non
self- intersecting curve can be self-intersecting. Care should be taken to ensure that the offset to a continuous curve
does not become discontinuous.</blockquote>
The offset curve 3d takes its parameterization from the basis curve. The offset curve 3d
is parameterized as:
<blockquote><img src="../../../figures/IfcOffsetCurve3d-Math1.gif" alt="Math" border="0" width="134" height="22"></blockquote>
<b>T</b> is the unit tangent vector to the basis curve <b>C</b>(<i>u</i>) at
parameter value <i>u</i>, and <i>d</i> is distance. The underlying curve shall be three-dimensional.
</blockquote>
<blockquote class="note">NOTE Entity adapted from <strong>offset_curve_3d</strong> defined in ISO 10303-42</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>At no point on the curve shall ref direction be parallel, or opposite to, the direction of the tangent vector.</li>
</ol>

<h1>IfcOrthogonalComplement</h1>
                                
                                <h1>IfcOuterBoundaryCurve</h1>
                                
                                <p>The IfcOuterBoundaryCurve</i> defines the outer boundary of a bounded surface.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
This is a special subtype of boundary curve which has the additional semantics of defining an outer boundary of a surface. No more than one such curve shall be included in the set of boundaries of a curve bounded surface.</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>outer_boundary_curve</strong> in ISO 10303-42.
</blockquote>


<h1>IfcPcurve</h1>
                                
                                <p>The <span class="self-ref">IfcPcurve</span> is a curve defined within the parameter space of its reference surface.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A pcurve is a curve which lies on the basis of a surface and is defined in the parameter space of that surface. The basis curve is a curve defined in the two-dimensional parametric space of a reference basis surface. Although it is defined by a curve in two dimensional space, the variables involved are <i>u</i> and <i>v</i>, which occur in the parametric representation of the referenced surface, rather than the <i>x</i>, <i>y</i>, Cartesian coordinates. The basis curve is only defined within the parametric range of the surface.</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>pcurve</strong> in ISO 10303-42.
</blockquote>



<h1>IfcPlacement</h1>
                                
                                <p>An <span class="self-ref">IfcPlacement</span> is an abstract supertype of placement
      subtypes that define the location of an item, or an entire
      shape representation, and provide its orientation. All
      placement subtypes define right-handed Cartesian coordinate
      systems and do not allow mirroring.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Cartesian transformations including mirroring and
      scaling are supported by
      <strong>IfcCartesianTransformationOperator</strong>
    </blockquote>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
      A placement locates a geometric item with respect to the
      coordinate system of its geometric context. It locates the
      item to be defined and, in the case of the axis placement
      subtypes, gives its orientation.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>placement</strong> defined in ISO 10303-42.
    </blockquote>
    
<h1>IfcPlane</h1>
                                
                                <p>The planar surface is an unbounded surface in the direction of <i>x</i> and <i>y</i>. Bounded planar surfaces are defined by using a subtype of <strong>IfcBoundedSurface</strong> with <i>BasisSurface</i> being a plane.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A plane is an unbounded surface with a constant normal. A plane is defined by a point on the plane and the normal direction to the plane. The data is to be interpreted as follows:
<pre>
   C = Position.Location
   x = Position.P[1]
   y = Position.P[2]
   z = Position.P[3] =&gt; normal to plane
</pre>
and the surface is parameterized as:
<blockquote class="extDef">
<img src="../../../figures/IfcPlane-Math1.gif.gif" alt="formula" width="141" height="21">
</blockquote>
where the parametric range is -&infin; &lt; <i>u,v</i> &lt;
&infin;. In the above parameterization the length unit for the
unit vectors <b>x</b> and <b>y</b> is derived from the context of
the plane.</blockquote>

<blockquote class="note">NOTE&nbsp; A rectangular bounded planar surface can be defined by an <strong>IfcRectangularTrimmedSurface</strong> with
<i>BasisSurface</i> being the plane and <i>U1</i> = left bound in <b>x</b>, <i>U2</i> = right bound in <b>x</b>, <i>V</i>1 = lower
bound in <b>y</b>, <i>V2</i> = upper bound in <b>y</b> if viewed into the direction of the negative normal. (assuming the
<i>Usense</i> and <i>Vsense</i> agree to the sense of the basis surface).</blockquote>
<p>The inherited attributes are interpreted as</p>
<ul>
<li><i>SELF\IfcElementarySurface.Position</i> defines the
location and orientation of the planar surface.</li>
<li><i>SELF\IfcElementarySurface.Position.Location</i> defines a
point on the planar surface.</li>
<li><i>SELF\IfcElementarySurface.Position.P[3]</i> defines the
normal of the planar surface.</li>
</ul>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>plane</strong> in ISO 10303-42.
</blockquote>



<h1>IfcPoint</h1>
                                
                                <p>The <span class="self-ref">IfcPoint</span> is the abstract generalisation of all point representations within a Cartesian coordinate system.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A point is a location in some real Cartesian coordinate space R<SUP>m</SUP>, for m = 1, 2 or 3. </blockquote> 

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>point</strong> in ISO 10303-42.
</blockquote>


<h1>IfcPointOnCurve</h1>
                                
                                <p>The <span class="self-ref">IfcPointOnCurve</span> is a point defined by a parameter value of its defining curve.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A point on curve is a point which lies on a curve. The point is determined by evaluating the curve at a specific parameter value. The coordinate space dimensionality of the point is that of the basis curve.</blockquote> 

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>point_on_curve</strong> in ISO 10303-42.
</blockquote>


<p class="spec-head">Informal Propositions:</p> 
<ol>
<li>The value of the point parameter shall not be outside the parametric range of the curve.</li>
</ol>

<h1>IfcPointOnSurface</h1>
                                
                                <p>The <span class="self-ref">IfcPointOnSurface</span> is a point defined by two parameter value of its defining surface.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A point on surface is a point which lies on a parametric surface. The point is determined by evaluating the surface at a particular pair of parameter values.</blockquote> 

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>point_on_surface</strong> in ISO 10303-42.
</blockquote>



<p class="spec-head">Informal Propositions:</p> 
<ol>
<li>The parametric values specified for u and v shall not be outside the parametric range of the basis surface.</li>
</ol>

<h1>IfcPolyline</h1>
                                
                                <p>The <span class="self-ref">IfcPolyline</span> is a bounded curve with only linear segments defined by a list of Cartesian points. If the first and the last Cartesian point in the list are identical, then the polyline is a closed curve, otherwise it is an open curve.</p> 

<blockquote class="example">EXAMPLE&nbsp; 
<table summary="illustration">
<tr>
<td style="vertical-align:top;"><img src="../../../figures/IfcPolyline-fig1.png" alt="polyline examples"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>


<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A polyline is a bounded curve of <i>n</i> - 1 linear segments, defined by a
list of <i>n</i> points, P<sub>1</sub>, P<sub>2</sub> ... P<sub>n</sub>.  
The <i>i</i>th segment of the curve is parameterized as follows:
<blockquote class="extDef">
<img src="../../../figures/IfcPolyline-Math1.gif" width="190" height="24" align="middle">&nbsp;&nbsp;&nbsp;
<i>for</i> 1 &le; <i>i</i> &le; <i>n</i> - 1
</blockquote>
where <i>i</i> - 1 &le; <i>u</i> &le; <i>i</i> and with parametric range of 0 <&le; <i>u</i> &le; <i>n</i> - 1.
</blockquote>
<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>polyline</strong> in ISO 10303-42.
</blockquote>



<h1>IfcRationalBSplineCurveWithKnots</h1>
                                
                                <p>A rational B-spline curve with knots is a B-spline curve
described in terms of control points and basic functions. It
describes weights in addition to the control points defined at the
supertype <strong>IfcBSplineCurve</strong>.</p>

<p>All weights shall be positive and the curve is given by:</p>

<blockquote><img src="../../../figures/IfcRationalBSplineCurveWithKnots-Math1.gif" alt="Math"border="0"></blockquote>
<p>where</p>
<table>
<tr>
<td width="100" align="right"><i>k</i>+1</td>
<td>number of control points</td>
</tr>
<tr>
<td align="right">P<sub><i>i</i></sub></td>
<td>control points</td>
</tr>
<tr>
<td align="right"><i>w<sub>i</sub></i></td>
<td>weights</td>
</tr>
<tr>
<td align="right"><i>d</i></td>
<td>degree</td>
</tr>
</table>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>rational_b_spline_curve</strong> in ISO 10303-42.
</blockquote>




<h1>IfcRationalBSplineSurfaceWithKnots</h1>
                                
                                <p>A rational B-spline surface with knots is a piecewise parametric rational surface described in terms of control points, and associated weight values.</p>

<p>The surface is to be interpreted as follows:</p>

<blockquote>
<big>&sigma;</big><img src="../../../figures/IfcBSplineSurface-Math2.gif" align="middle" alt="formula" border>
</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>rational_b_spline_surface</strong> in ISO 10303-42.
</blockquote>



<h1>IfcRectangularTrimmedSurface</h1>
                                
                                <p>The <span class="self-ref">IfcRectangularTrimmedSurface</span> is a surface created by bounding its <i>BasisSurface</i> along two pairs of parallel curves defined within the parametric space of the referenced surface.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The trimmed surface is a simple bounded surface in which the boundaries are the constant parametric lines <i>u</i><sub>1</sub> = u1, <i>u</i><sub>2</sub> = u2, <i>v</i><sub>1</sub> = v1 and <i>v</i><sub>2</sub> = v2. All these values shall be within the parametric range of the referenced surface. Cyclic properties of the parameter range are assumed.
The rectangular trimmed surface inherits its parameterization directly from the basis surface and has parameter ranges from 0 to |<i>u</i><sub>2</sub> - <i>u</i><sub>1</sub>| and 0 to|<i>v</i><sub>2</sub>-<i>v</i><sub>1</sub>|.</blockquote>

<blockquote class="note">
NOTE&nbsp; If the surface is closed in a given parametric direction, the values of <i>u</i><sub>2</sub> or <i>v</i><sub>2</sub> may require to be increased by the cyclic range.
</blockquote> 
<blockquote class="example">
EXAMPLE&nbsp; 370 degrees is equivalent to 10 degrees, for those surfaces whose parametric form is defined using circular functions (sine and cosine).</blockquote>

<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>rectangular_trimmed_surface</strong> in ISO 10303-42.
</blockquote>



<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The domain of the trimmed surface shall be within the domain of the surface being trimmed.</li> 
</ol> 

<h1>IfcReparametrisedCompositeCurveSegment</h1>
                                
                                <p>The <span class="self-ref">IfcReparametrisedCompositeCurveSegment</span> is geometrically identical to a <strong>IfcCompositeCurveSegment</strong>
but with the additional capability of reparametrization.</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The reparametrised composite curve segment is a special type of composite curve segment which provides the capability to
re-define its parametric length without changing its geometry.
<br><br>
Let l = <i>ParamLength</i>.</br>
If t<sub><small>0</small></sub> &le; t &le; t<sub><small>1</small></sub> is the parameter range of
<i>ParentCurve</i>, the new parameter . for the reparametrised composite curve segment is given by the equation:
  <blockquote class="extDef">
  <img src="../../../figures/IfcReparametrisedCompositeCurveSegment-Math1.gif" width="100" height="60"> if <i>SameSense</i> = TRUE;
  </blockquote>
or by the equation:
  <blockquote class="extDef">
  <img src="../../../figures/IfcReparametrisedCompositeCurveSegment-Math2.gif" width="100" height="60"> if <i>SameSense</i> = FALSE;
  </blockquote>
</blockquote>
<blockquote class="note">
NOTE&nbsp; Entity adapted from <strong>reparametrised_composite_curve_segment</strong> in ISO 10303-42.
</blockquote>


<h1>IfcRepresentationItem</h1>
                                
                                <p>The <span class="self-ref">IfcRepresentationItem</span> is used within an <strong>IfcRepresentation</strong> (directly or indirectly through other <span class="self-ref">IfcRepresentationItem</span>'s) to represent an <strong>IfcProductRepresentation</strong>. Most commonly these <span class="self-ref">IfcRepresentationItem</span>'s are geometric or topological representation items, that can (but not need to) have presentation style infomation assigned.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-43:1992<br>
A representation item is an element of product data that participates in one or more representations or
contributes to the definition of another representation item. A representation item contributes to the definition of another
representation item when it is referenced by that representation item.</blockquote>

<blockquote class="note">
NOTE&nbsp; The assignment of a style is only applicable
to the subtypes <strong>IfcGeometricRepresentationItem</strong>, <strong>IfcMappedItem</strong> and some selected subtypes of <strong>IfcTopologicalRepresentationItem</strong> (<strong>IfcVertexPoint</strong>, <strong>IfcEdgeCurve</strong>, <strong>IfcFaceSurface</strong>).
</blockquote>

<p>In case that presentation style information is applied, it can be either applied by an <strong>IfcStyledItem</strong>, or by an assignment to an <strong>IfcPresentationLayerWithStyle</strong>. If both are present, and both style assignments include the same subtype of <strong>IfcPresentationStyle</strong>, then the style assigned by <strong>IfcStyledItem</strong> takes priority.</p>

<p>
<blockquote class="example">
EXAMPLE&nbsp; The assignment of style information by a styled item and a presentation layer with style. Since the presentation styles are different, <strong>IfcCurveStyle</strong> and <strong>IfcSurfaceStyle</strong>, both are applied to the geometric representation item.
</blockquote>

<table summary="style assignment">
<tr><td><img src="../../../figures/IfcRepresentationItem_Style-1.png" alt="styles assigned by layer and styled item"></td>
<tr><td><p class="figure">
</table>

<p>
<blockquote class="example">
EXAMPLE&nbsp; The assignment of style information by a styled item and a presentation layer with style. Since the presentation styles for curve style are aprovided by both, the <strong>IfcCurveStyle</strong> provided by the <strong>IfcStyledItem</strong> overrides the <strong>IfcCurveStyle</strong> provided by the <strong>IfcPresentationLayerWithStyle</strong>
</blockquote>

<table summary="style assignment">
<tr><td><img src="../../../figures/IfcRepresentationItem_Style-2.png" alt="styles assigned by layer and styled item"></td></tr>
<tr><td><p class="figure">
</table>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>representation_map</strong> defined in ISO
10303-43.</blockquote>




<h1>IfcRepresentationMap</h1>
                                
                                <p>An <span class="self-ref">IfcRepresentationMap</span> defines the base definition (also referred to as block, cell or macro) called <i>MappedRepresentation</i> within the <i>MappingOrigin</i>. The <i>MappingOrigin</i> defines the coordinate system in which the <i>MappedRepresentation</i> is defined.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-43:1992<br>
A representation map is the identification of a representation and a representation item in that representation for the purpose of mapping. The representation item defines the origin of the mapping. The representation map is used as the source of a mapping by a mapped item.</blockquote>

<p>The <i>RepresentationMap</i> is used through an <i>IfcMappeditem</i> in one or several <strong>IfcShapeRepresentation</strong>'s. An Cartesian transformation operator can be applied to transform the <i>MappedRepresentation</i> into the placement coordinate system of the shape representation. The transformation of the representation map is restricted to be a Cartesian transformation mapping (translation, rotation, mirroring and scaling).</p>

<blockquote class="note">
NOTE&nbsp; The definition of a mapping which is used to specify a new representation item comprises a representation map and a mapped item entity. Without both entities, the mapping is not fully defined. Two entities are specified to allow the same source representation to be mapped into multiple new representations.
</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>representation_map</strong> defined in ISO
10303-43.</blockquote>



<h1>IfcSameAxis2Placement</h1>
                                
                                <h1>IfcSameCartesianPoint</h1>
                                
                                <h1>IfcSameDirection</h1>
                                
                                <h1>IfcSameValue</h1>
                                
                                <h1>IfcScalarTimesVector</h1>
                                
                                <h1>IfcSecondProjAxis</h1>
                                
                                <h1>IfcSurface</h1>
                                
                                <p>An <span class="self-ref">IfcSurface</span> is a 2-dimensional representation item positioned in 3-dimensional space. 2-dimensional means that each point at the surface can be defined by a 2-dimensional coordinate system, usually by u and v coordinates.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A surface can be envisioned as a set of connected points in 3-dimensional space which is always locally 2-dimensional, but need not be a manifold. </blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>surface</strong> defined in ISO
10303-42.</blockquote>


 
<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>A surface has non zero area.</li> 
<li>A surface is arcwise connected.</li> 
</ol> 

<h1>IfcSurfaceOfLinearExtrusion</h1>
                                
                                <p>The <span class="self-ref">IfcSurfaceOfLinearExtrusion</span> is a surface derived by sweeping a curve along a vector.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
This surface is a simple swept surface or a generalized cylinder obtained by sweeping a curve in a given direction. The parameterization is as follows where the curve has a parameterization &lambda;(<i>u</i>):</p> 

<blockquote>
  <p style="font-size:inherit">V = ExtrusionAxis</p> 
  <img src="../../../figures/IfcSurfaceOfLinearExtrusion-Math1.gif" width="124" height="22">
</blockquote>

The parameterization range for <i>v</i> is -&infin; &lt; <i>v</i> &lt; &infin; and for <i>u</i> it is defined by the curve parameterization.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>surface_of_linear_extrusion</strong> defined in ISO
10303-42.</blockquote>

 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The surface shall not self-intersect</li> 
</ol>

<h1>IfcSurfaceOfRevolution</h1>
                                
                                <p>The IfcSurfaceOfRevolution</i> is a surface derived by rotating a curve about an axis.
</p>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A surface of revolution is the surface obtained by rotating a curve one complete revolution about an axis. The data shall be interpreted as below.<br><br>
	 
The parameterization is as follows where the curve has a parameterization &lambda;(<i>u</i>):

<blockquote>
<p style="font-size:inherit"><b>C</b> = AxisPosition.Location<BR><B>V</B> = AxisPosition.Z</p>
<img src="../../../figures/IfcSurfaceOfResolution-Math1.gif" width="494" height="22">
</blockquote>

In order to produce a single-value surface the a complete revolution, the curve shall be such that when expressed in a cylindrical coordinate system the curve shall be such that when expressed in a cylindrical coordinate system (<i>r,&phi; ,z</i>) centred at C with an axis V no two distinct parametric points on the curve shall have the same values for (<i>r, z</i>). For a surface of revolution the parametric range is 0 &lt; <i>u</i> &lt; 360 degree. The parameterization range for <i>v</i> is defined by referenced curve.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>surface_of_revolution</strong> defined in ISO
10303-42.</blockquote>

 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The surface shall not self-intersect</li> 
<li>The swept curve shall not be coincident with the axis line for any finite part of its legth.</li> 
</ol>

<h1>IfcSurfaceWeightsPositive</h1>
                                
                                <h1>IfcSweptSurface</h1>
                                
                                <p>An <span class="self-ref">IfcSweptSurface</span> is a surface defined by sweeping a curve. The swept surface is defined by a open or closed curve, represented by a subtype if <strong>IfcProfileDef</strong>, that is provided as a two-dimensional curve on an implicit plane, and by the sweeping operation.</p>
<ul>
<li>The swept curve is defined by positioning the profile in the xy plane of the object coordinate system, </li>
<li>The sweeping operation is applied to the swept curve as defined within the subtypes of <span class="self-ref">IfcSweptSurface</span>;</li>
</ul>
<p> The optional <i>Positio</i>n coordinate system allows for re-positioning the resulting swept surface relative to the object coordinate system.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A swept surface is one that is constructed by sweeping a curve along another curve.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>swept_surface</strong> defined in ISO
10303-42.</blockquote>



<h1>IfcTransitionCode</h1>
                                
                                <h1>IfcTrimmedCurve</h1>
                                
                                <p>An <span class="self-ref">IfcTrimmedCurve</span> is a bounded curve that is trimmed at both ends. The trimming points may be provided by
a Cartesian point or by a parameter value, based on the parameterization of the <i>BasisCurve</i>. The
<i>SenseAgreement</i> attribute indicates whether the direction of the <span class="self-ref">IfcTrimmedCurve</span> agrees with or is
opposed to the direction of the <i>BasisCurve</i>.</p>
<blockquote class="note">NOTE&nbsp; In case of the <i>BasisCurve</i> being a closed curve, such as an
<strong>IfcCircle</strong> or <strong>IfcEllipse</strong>, the <i>SenseAgreement</i> affects the geometric shape of the
<span class="self-ref">IfcTrimmedCurve</span>.</blockquote>
<table summary="illustration">
<tbody>
<tr>
<td><img src="../../../figures/IfcTrimmedCurve_Parameterization.png" alt="curve parameterization" border="0" height="500" width=
"700"></td>
</tr>
<tr><td><p class="figure">
</tbody>
</table>

<p>
can be defined by the same <i>BasisCurve</i> (of type <strong>IfcCircle</strong>) and the same trimming points (given by
Cartesian points and parameter values) by using different assignments to <i>Trim1</i> and <i>Trim2</i> and
<i>SenseAgreement</i>.</p>
<blockquote class="note">NOTE&nbsp; Since the <i>BasisCurve</i> is closed (type <strong>IfcCircle</strong>), the exception of
the informal proposition IP3 applies, i.e. the sense flag is not required to be consistent with the parameter values of
<i>Trim1</i> and <i>Trim1</i>, so the rule (sense = parameter 1 &lt; parameter 2) may not be
fulfilled.</blockquote>
<blockquote class="extDef">
<p style="font-size:inherit">NOTE Definition according to ISO/CD 10303-42:1992<br>
A trimmed curve is a bounded curve which is created by taking a selected portion, between two identified points, of the
associated basis curve. The basis curve itself is unaltered and more than one trimmed curve may reference the same
basis curve. Trimming points for the curve may be identified by:</p>
<ul style="font-size:inherit">
<li style="font-size:inherit">parametric value</li>
<li style="font-size:inherit">geometric position</li>
<li style="font-size:inherit">both of the above</li>
</ul>
<p style="font-size:inherit">At least one of these shall be specified at each end of the curve. The
<i>SenseAgreement</i> makes it possible to unambiguously define any segment of a closed curve such as a circle. The
combinations of sense and ordered end points make it possible to define four distinct directed segments connecting two
different points on a circle or other closed curve. For this purpose cyclic properties of the parameter range are
assumed; for example, 370 degrees is equivalent to 10 degrees.</p>
<p style="font-size:inherit">The <span class="self-ref">IfcTrimmedCurve</span> has a parameterization which is inherited from the particular
basis curve reference. More precisely the parameter s of the trimmed curve is derived from the parameter of the basis
curve as follows:</p>
<ul style="font-size:inherit">
<li style="font-size:inherit">if <i>SenseAgreement</i> is TRUE: <i>s = t - t<sub>1</sub></i></li>
<li style="font-size:inherit">if <i>SenseAgreement</i> is FALSE: <i>s = t<sub>2</sub> - t</i></li>
</ul>
<p style="font-size:inherit">In the above equations t<sub>1</sub> is the value given by <i>Trim1</i> or the parameter
value corresponding to point 1 and t<sub>2</sub> is the value given by <i>Trim2</i> or the parameter value
corresponding to point 2. The resultant <span class="self-ref">IfcTrimmedCurve</span> has a parameter ranging from 0 at the first trimming
point to |t<sub>2</sub> - t<sub>1</sub>| at the second trimming point.</p>
<blockquote class="note">NOTE&nbsp; In case of a closed curve, it may be necessary to increment t1 or t2 by the
parametric length for consistency with the sense flag.</blockquote>
</blockquote>
<blockquote class="note">NOTE Entity adapted from <strong>trimmed_curve</strong> defined in ISO 10303-42</blockquote>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Where both the parameter value and the Cartesian point exist for <i>Trim1</i> and <i>Trim2</i> they shall be
consistent. (i.e., the <i>BasisCurve</i> evaluated at the parameter value shall coincide with the specified
point).</li>
<li>When a Cartesian point is specified by <i>Trim1</i> or by <i>Trim2</i> it shall lie on the
<i>BasisCurve</i>.</li>
<li>Except the case of a closed <i>BasisCurve</i> where both parameter 1 and parameter 2 exist, they shall be
consistent with the sense flag, i.e., (sense = parameter 1 &lt; parameter 2). Or, for every open curve where both
parameter 1 and parameter 2 exist, they shall be consistent with the <i>SenseAgreement</i>, i.e.,
<i>SenseAgreement</i> = (parameter 1 &lt; parameter 2).</li>
<li>If both parameter 1 and parameter 2 exist, then parameter 1 &lt;&gt; parameter 2. For a closed base curve, e.g.
<strong>IfcCircle</strong> or <strong>IfcEllipse</strong>, this also applies to the cyclic properties, as 360' is equal to 0',
parameter 1 = 360' and parameter 2 = 0' are treated as being equal and therefore violating this proposition.</li>
<li>When a parameter value is specified by <i>Trim1</i> or <i>Trim2</i> it shall lie within the parametric range of
the <i>BasisCurve</i>.</li>
</ol>
<h1>IfcTrimmingPreference</h1>
                                
                                <h1>IfcTrimmingSelect</h1>
                                
                                <h1>IfcVector</h1>
                                
                                <p>An <span class="self-ref">IfcVector</span> is a geometric representation item having both a magnitude and direction. The magnitude of the
vector is solely defined by the <i>Magnitude</i> attribute and the direction is solely defined by the
<i>Orientation</i> attribute.</p>
<blockquote class="note">NOTE&nbsp; The <i>DirectionRatios</i> of the <i>Orientation</i> attribute are not used to
define the magnitude.</blockquote>
<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The vector is defined in terms of the direction and magnitude of the vector. The value of
the magnitude attribute defines the magnitude of the vector. The magnitude of the vector can not be reliable calculated from the components of the orientation attribute. This form of representation was selected to reduce problems with numerical instability. For
example a vector of magnitude 2.0 mm and equally inclined to the coordinate axes could be represented with Orientation
attribute of (1.0,1.0,1.0).</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>vector</strong> defined in ISO 10303-42.</blockquote>


<h1>IfcVectorDifference</h1>
                                
                                <h1>IfcVectorOrDirection</h1>
                                
                                <h1>IfcVectorSum</h1>
                                
                                <h1>IfcAirTerminal</h1>
                                
                                <p>An air terminal is a terminating or origination point for the transfer of air between distribution system(s) and one or more spaces. It can also be used for the transfer of air between adjacent spaces.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcAirTerminalBox</h1>
                                
                                <p>An air terminal box typically participates in an HVAC duct distribution system and is used to control or modulate the amount of air delivered to its downstream ductwork. An air terminal box type is often referred to as an "air flow regulator".</p> 
 
<blockquote class="note"></blockquote><h1>IfcAirTerminalBoxType</h1>
                                
                                <p>The flow controller type <b>IfcAirTerminalBoxType</b> defines commonly shared information for occurrences of air terminal boxes. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define an air terminal box type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcAirTerminalBoxType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcAirTerminalBoxType</b> are represented by instances of <strong>IfcAirTerminalBox</strong>. 
Refer to the documentation at <strong>IfcAirTerminalBox</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcAirTerminalBoxTypeEnum</h1>
                                
                                <h1>IfcAirTerminalType</h1>
                                
                                <p>The flow terminal type <b>IfcAirTerminalType</b> defines commonly shared information for occurrences of air terminals. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define an air terminal type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcAirTerminalType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcAirTerminalType</b> are represented by instances of <strong>IfcAirTerminal</strong>. 
Refer to the documentation at <strong>IfcAirTerminal</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcAirTerminalTypeEnum</h1>
                                
                                <h1>IfcAirToAirHeatRecovery</h1>
                                
                                <p>An air-to-air heat recovery device employs a counter-flow heat exchanger between inbound and outbound air flow. It is typically used to transfer heat from warmer air in one chamber to cooler air in the second chamber (i.e., typically used to recover heat from the conditioned air being exhausted and the outside air being supplied to a building), resulting in energy savings from reduced heating (or cooling) requirements.</p> 
 
<blockquote class="note"></blockquote><h1>IfcAirToAirHeatRecoveryType</h1>
                                
                                <p>The energy conversion device type <b>IfcAirToAirHeatRecoveryType</b> defines commonly shared information for occurrences of air to air heat recoverys. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define an air to air heat recovery type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcAirToAirHeatRecoveryType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcAirToAirHeatRecoveryType</b> are represented by instances of <strong>IfcAirToAirHeatRecovery</strong>. 
Refer to the documentation at <strong>IfcAirToAirHeatRecovery</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcAirToAirHeatRecoveryTypeEnum</h1>
                                
                                <h1>IfcBoiler</h1>
                                
                                <p>A boiler is a closed, pressure-rated vessel in which water or other fluid is heated using an energy source such as natural gas, heating oil, or electricity. The fluid in the vessel is then circulated out of the boiler for use in various processes or heating applications.</p>
<p><span class="self-ref">IfcBoiler</span> is a vessel solely used for heating of water or other fluids. Storage vessels, such as for drinking water storage are considered as tanks and use the <strong>IfcTank</strong> entity.</p> 
 
<blockquote class="note"></blockquote><h1>IfcBoilerType</h1>
                                
                                <p>The energy conversion device type <b>IfcBoilerType</b> defines commonly shared information for occurrences of boilers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a boiler type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcBoilerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcBoilerType</b> are represented by instances of <strong>IfcBoiler</strong>. 
Refer to the documentation at <strong>IfcBoiler</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcBoilerTypeEnum</h1>
                                
                                <h1>IfcBurner</h1>
                                
                                <p>A burner is a device that converts fuel into heat through combustion. It includes gas, oil, and wood burners.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcBurnerType</h1>
                                
                                <p>The energy conversion device type <b>IfcBurnerType</b> defines commonly shared information for occurrences of burners. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a burner type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcBurnerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcBurnerType</b> are represented by instances of <strong>IfcBurner</strong>. 
Refer to the documentation at <strong>IfcBurner</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcBurnerTypeEnum</h1>
                                
                                <h1>IfcChiller</h1>
                                
                                <p>A chiller is a device used to remove heat from a liquid via a vapor-compression or absorption refrigeration cycle to cool a fluid, typically water or a mixture of water and glycol. The chilled fluid is then used to cool and dehumidify air in a building.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcChillerType</h1>
                                
                                <p>The energy conversion device type <b>IfcChillerType</b> defines commonly shared information for occurrences of chillers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a chiller type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcChillerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcChillerType</b> are represented by instances of <strong>IfcChiller</strong>. 
Refer to the documentation at <strong>IfcChiller</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcChillerTypeEnum</h1>
                                
                                <h1>IfcCoil</h1>
                                
                                <p>A coil is a device used to provide heat transfer between non-mixing media. A common example is a cooling coil, which utilizes a finned coil in which circulates chilled water, antifreeze, or refrigerant that is used to remove heat from air moving across the surface of the coil. A coil may be used either for heating or cooling purposes by placing a series of tubes (the coil) carrying a heating or cooling fluid into an airstream. The coil may be constructed from tubes bundled in a serpentine form or from finned tubes that give a extended heat transfer surface.</p>
<p>Coils may also be used for non-airflow cases such as embedded in a floor slab.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcCoilType</h1>
                                
                                <p>The energy conversion device type <b>IfcCoilType</b> defines commonly shared information for occurrences of coils. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a coil type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCoilType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCoilType</b> are represented by instances of <strong>IfcCoil</strong>. 
Refer to the documentation at <strong>IfcCoil</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCoilTypeEnum</h1>
                                
                                <h1>IfcCompressor</h1>
                                
                                <p>A compressor is a device that compresses a fluid typically used in a refrigeration circuit.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcCompressorType</h1>
                                
                                <p>The flow moving device type <b>IfcCompressorType</b> defines commonly shared information for occurrences of compressors. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a compressor type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCompressorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCompressorType</b> are represented by instances of <strong>IfcCompressor</strong>. 
Refer to the documentation at <strong>IfcCompressor</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCompressorTypeEnum</h1>
                                
                                <h1>IfcCondenser</h1>
                                
                                <p>A condenser is a device that is used to dissipate heat, typically by condensing a substance such as a refrigerant from its gaseous to its liquid state.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcCondenserType</h1>
                                
                                <p>The energy conversion device type <b>IfcCondenserType</b> defines commonly shared information for occurrences of condensers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a condenser type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCondenserType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCondenserType</b> are represented by instances of <strong>IfcCondenser</strong>. 
Refer to the documentation at <strong>IfcCondenser</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCondenserTypeEnum</h1>
                                
                                <h1>IfcCooledBeam</h1>
                                
                                <p>A cooled beam (or chilled beam) is a device typically used to cool air by circulating a fluid such as chilled water through exposed finned tubes above a space. Typically mounted overhead near or within a ceiling, the cooled beam uses convection to cool the space below it by acting as a heat sink for the naturally rising warm air of the space. Once cooled, the air naturally drops back to the floor where the cycle begins again.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcCooledBeamType</h1>
                                
                                <p>The energy conversion device type <b>IfcCooledBeamType</b> defines commonly shared information for occurrences of cooled beams. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cooled beam type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCooledBeamType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCooledBeamType</b> are represented by instances of <strong>IfcCooledBeam</strong>. 
Refer to the documentation at <strong>IfcCooledBeam</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCooledBeamTypeEnum</h1>
                                
                                <h1>IfcCoolingTower</h1>
                                
                                <p>A cooling tower is a device which rejects heat to ambient air by circulating a fluid such as water through it to reduce its temperature by partial evaporation.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcCoolingTowerType</h1>
                                
                                <p>The energy conversion device type <b>IfcCoolingTowerType</b> defines commonly shared information for occurrences of cooling towers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a cooling tower type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCoolingTowerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCoolingTowerType</b> are represented by instances of <strong>IfcCoolingTower</strong>. 
Refer to the documentation at <strong>IfcCoolingTower</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcCoolingTowerTypeEnum</h1>
                                
                                <h1>IfcDamper</h1>
                                
                                <p>A damper typically participates in an HVAC duct distribution system and is used to control or modulate the flow of air.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcDamperType</h1>
                                
                                <p>The flow controller type <b>IfcDamperType</b> defines commonly shared information for occurrences of dampers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a damper type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDamperType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDamperType</b> are represented by instances of <strong>IfcDamper</strong>. 
Refer to the documentation at <strong>IfcDamper</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcDamperTypeEnum</h1>
                                
                                <h1>IfcDuctFitting</h1>
                                
                                <p>A duct fitting is a junction or transition in a ducted flow distribution system or used to connect duct segments, resulting in changes in flow characteristics to the fluid such as direction and flow rate.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcDuctFittingType</h1>
                                
                                <p>The flow fitting type <b>IfcDuctFittingType</b> defines commonly shared information for occurrences of duct fittings. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a duct fitting type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDuctFittingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDuctFittingType</b> are represented by instances of <strong>IfcDuctFitting</strong>. 
Refer to the documentation at <strong>IfcDuctFitting</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcDuctFittingTypeEnum</h1>
                                
                                <h1>IfcDuctSegment</h1>
                                
                                <p>A duct segment is used to typically join two sections of duct network.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcDuctSegmentType</h1>
                                
                                <p>The flow segment type <b>IfcDuctSegmentType</b> defines commonly shared information for occurrences of duct segments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a duct segment type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDuctSegmentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDuctSegmentType</b> are represented by instances of <strong>IfcDuctSegment</strong>. 
Refer to the documentation at <strong>IfcDuctSegment</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcDuctSegmentTypeEnum</h1>
                                
                                <h1>IfcDuctSilencer</h1>
                                
                                <p>A duct silencer is a device that is typically installed inside a duct distribution system for the purpose of reducing the noise levels from air movement, fan noise, etc. in the adjacent space or downstream of the duct silencer device.</p> 
 
<blockquote class="note"></blockquote><h1>IfcDuctSilencerType</h1>
                                
                                <p>The flow treatment device type <b>IfcDuctSilencerType</b> defines commonly shared information for occurrences of duct silencers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a duct silencer type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDuctSilencerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDuctSilencerType</b> are represented by instances of <strong>IfcDuctSilencer</strong>. 
Refer to the documentation at <strong>IfcDuctSilencer</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcDuctSilencerTypeEnum</h1>
                                
                                <h1>IfcEngine</h1>
                                
                                <p>An engine is a device that converts fuel into mechanical energy through combustion.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcEngineType</h1>
                                
                                <p>The energy conversion device type <b>IfcEngineType</b> defines commonly shared information for occurrences of engines. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a engine type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcEngineType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcEngineType</b> are represented by instances of <strong>IfcEngine</strong>. 
Refer to the documentation at <strong>IfcEngine</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcEngineTypeEnum</h1>
                                
                                <h1>IfcEvaporativeCooler</h1>
                                
                                <p>An evaporative cooler is a device that cools air by saturating it with water vapor.</p> 
 
<blockquote class="note"></blockquote><h1>IfcEvaporativeCoolerType</h1>
                                
                                <p>The energy conversion device type <b>IfcEvaporativeCoolerType</b> defines commonly shared information for occurrences of evaporative coolers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a evaporative cooler type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcEvaporativeCoolerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcEvaporativeCoolerType</b> are represented by instances of <strong>IfcEvaporativeCooler</strong>. 
Refer to the documentation at <strong>IfcEvaporativeCooler</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcEvaporativeCoolerTypeEnum</h1>
                                
                                <h1>IfcEvaporator</h1>
                                
                                <p>An evaporator is a device in which a liquid refrigerent is vaporized and absorbs heat from the surrounding fluid.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcEvaporatorType</h1>
                                
                                <p>The energy conversion device type <b>IfcEvaporatorType</b> defines commonly shared information for occurrences of evaporators. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a evaporator type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcEvaporatorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcEvaporatorType</b> are represented by instances of <strong>IfcEvaporator</strong>. 
Refer to the documentation at <strong>IfcEvaporator</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcEvaporatorTypeEnum</h1>
                                
                                <h1>IfcFan</h1>
                                
                                <p>A fan is a device which imparts mechanical work on a gas. A typical usage of a fan is to induce airflow in a building services air distribution system.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcFanType</h1>
                                
                                <p>The flow moving device type <b>IfcFanType</b> defines commonly shared information for occurrences of fans. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a fan type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFanType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFanType</b> are represented by instances of <strong>IfcFan</strong>. 
Refer to the documentation at <strong>IfcFan</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcFanTypeEnum</h1>
                                
                                <h1>IfcFilter</h1>
                                
                                <p>A filter is an apparatus used to remove particulate or gaseous matter from fluids and gases.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcFilterType</h1>
                                
                                <p>The flow treatment device type <b>IfcFilterType</b> defines commonly shared information for occurrences of filters. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a filter type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFilterType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFilterType</b> are represented by instances of <strong>IfcFilter</strong>. 
Refer to the documentation at <strong>IfcFilter</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcFilterTypeEnum</h1>
                                
                                <h1>IfcFlowMeter</h1>
                                
                                <p>A flow meter is a device that is used to measure the flow rate in a system.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcFlowMeterType</h1>
                                
                                <p>The flow controller type <b>IfcFlowMeterType</b> defines commonly shared information for occurrences of flow meters. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a flow meter type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFlowMeterType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFlowMeterType</b> are represented by instances of <strong>IfcFlowMeter</strong>. 
Refer to the documentation at <strong>IfcFlowMeter</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcFlowMeterTypeEnum</h1>
                                
                                <h1>IfcHeatExchanger</h1>
                                
                                <p>A heat exchanger is a device used to provide heat transfer between non-mixing media such as plate and shell and tube heat exchangers.</p>
<p><span class="self-ref">IfcHeatExchanger</span> is commonly used on water-side distribution systems to recover energy from a liquid to another liquid (typically water-based), whereas <strong>IfcAirToAirHeatRecovery</strong> is commonly used on air-side distribution systems to recover energy from a gas to a gas (usually air).</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcHeatExchangerType</h1>
                                
                                <p>The energy conversion device type <b>IfcHeatExchangerType</b> defines commonly shared information for occurrences of heat exchangers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a heat exchanger type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcHeatExchangerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcHeatExchangerType</b> are represented by instances of <strong>IfcHeatExchanger</strong>. 
Refer to the documentation at <strong>IfcHeatExchanger</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcHeatExchangerTypeEnum</h1>
                                
                                <h1>IfcHumidifier</h1>
                                
                                <p>A humidifier is a device that adds moisture into the air.</p> 
 
<blockquote class="note"></blockquote>

<h1>IfcHumidifierType</h1>
                                
                                <p>The energy conversion device type <b>IfcHumidifierType</b> defines commonly shared information for occurrences of humidifiers. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a humidifier type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcHumidifierType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcHumidifierType</b> are represented by instances of <strong>IfcHumidifier</strong>. 
Refer to the documentation at <strong>IfcHumidifier</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcHumidifierTypeEnum</h1>
                                
                                <h1>IfcMedicalDevice</h1>
                                
                                <p>A medical device is attached to a medical piping system and operates upon medical gases to perform a specific function. Medical gases include medical air, medical vacuum, oxygen, carbon dioxide, nitrogen, and nitrous oxide.</p>
<p>Outlets for medical gasses should use <strong>IfcValve</strong> with PredefinedType equal to GASTAP, containing an <strong>IfcDistributionPort</strong> with FlowDirection=SINK and PredefinedType equal to COMPRESSEDAIR, VACUUM, or CHEMICAL, and having property sets on the port further indicating the gas type and pressure. Tanks for medical gasses should use <strong>IfcTank</strong> with PredefinedType equal to PRESSUREVESSEL, containing an <strong>IfcDistributionPort</strong> with FlowDirection=SOURCE and PredefinedType=CHEMICAL, and having property sets on the port further indicating the gas type and pressure range.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcMedicalDeviceType</h1>
                                
                                <p>The flow terminal type <b>IfcMedicalDeviceType</b> defines commonly shared information for occurrences of medical devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a medical device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcMedicalDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcMedicalDeviceType</b> are represented by instances of <strong>IfcMedicalDevice</strong>. 
Refer to the documentation at <strong>IfcMedicalDevice</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcMedicalDeviceTypeEnum</h1>
                                
                                <h1>IfcPipeFitting</h1>
                                
                                <p>A pipe fitting is a junction or transition in a piping flow distribution system used to connect pipe segments, resulting in changes in flow characteristics to the fluid such as direction or flow rate.</p> 
 
<blockquote class="note"></blockquote><h1>IfcPipeFittingType</h1>
                                
                                <p>The flow fitting type <b>IfcPipeFittingType</b> defines commonly shared information for occurrences of pipe fittings. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a pipe fitting type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcPipeFittingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcPipeFittingType</b> are represented by instances of <strong>IfcPipeFitting</strong>. 
Refer to the documentation at <strong>IfcPipeFitting</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcPipeFittingTypeEnum</h1>
                                
                                <h1>IfcPipeSegment</h1>
                                
                                <p>A pipe segment is used to typically join two sections of a piping network.</p> 
 
<blockquote class="note"></blockquote><h1>IfcPipeSegmentType</h1>
                                
                                <p>The flow segment type <b>IfcPipeSegmentType</b> defines commonly shared information for occurrences of pipe segments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a pipe segment type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcPipeSegmentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcPipeSegmentType</b> are represented by instances of <strong>IfcPipeSegment</strong>. 
Refer to the documentation at <strong>IfcPipeSegment</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcPipeSegmentTypeEnum</h1>
                                
                                <h1>IfcPump</h1>
                                
                                <p>A pump is a device which imparts mechanical work on fluids or slurries to move them through a channel or pipeline. A typical use of a pump is to circulate chilled water or heating hot water in a building services distribution system.</p> 
 
<blockquote class="note"></blockquote><h1>IfcPumpType</h1>
                                
                                <p>The flow moving device type <b>IfcPumpType</b> defines commonly shared information for occurrences of pumps. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a pump type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcPumpType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcPumpType</b> are represented by instances of <strong>IfcPump</strong>. 
Refer to the documentation at <strong>IfcPump</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcPumpTypeEnum</h1>
                                
                                <h1>IfcSpaceHeater</h1>
                                
                                <p>Space heaters utilize a combination of radiation and/or natural convection using a heating source such as electricity, steam or hot water to heat a limited space or area. Examples of space heaters include radiators, convectors, baseboard and finned-tube heaters.</p>
<p><strong>IfcUnitaryEquipment</strong> should be used for packaged units supporting a combination of heating, cooling, and/or dehumidification; <strong>IfcCoil</strong> should be used for coil-based floor heating.</p> 
 
<blockquote class="note"></blockquote>


<h1>IfcSpaceHeaterType</h1>
                                
                                <p>The flow terminal type <b>IfcSpaceHeaterType</b> defines commonly shared information for occurrences of space heaters. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a space heater type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSpaceHeaterType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSpaceHeaterType</b> are represented by instances of <strong>IfcSpaceHeater</strong>. 
Refer to the documentation at <strong>IfcSpaceHeater</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcSpaceHeaterTypeEnum</h1>
                                
                                <h1>IfcTank</h1>
                                
                                <p>A tank is a vessel or container in which a fluid or gas is stored for later use.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcTankType</h1>
                                
                                <p>The flow storage device type <b>IfcTankType</b> defines commonly shared information for occurrences of tanks. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a tank type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcTankType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcTankType</b> are represented by instances of <strong>IfcTank</strong>. 
Refer to the documentation at <strong>IfcTank</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcTankTypeEnum</h1>
                                
                                <h1>IfcTubeBundle</h1>
                                
                                <p>A tube bundle is a device consisting of tubes and bundles of tubes used for heat transfer and contained typically within other energy conversion devices, such as a chiller or coil.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcTubeBundleType</h1>
                                
                                <p>The energy conversion device type <b>IfcTubeBundleType</b> defines commonly shared information for occurrences of tube bundles. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a tube bundle type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcTubeBundleType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcTubeBundleType</b> are represented by instances of <strong>IfcTubeBundle</strong>. 
Refer to the documentation at <strong>IfcTubeBundle</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcTubeBundleTypeEnum</h1>
                                
                                <h1>IfcUnitaryEquipment</h1>
                                
                                <p>Unitary equipment typically combine a number of components into a single product, such as air handlers, pre-packaged rooftop air-conditioning units, and split systems.</p> 
 
<blockquote class="note"></blockquote><h1>IfcUnitaryEquipmentType</h1>
                                
                                <p>The energy conversion device type <b>IfcUnitaryEquipmentType</b> defines commonly shared information for occurrences of unitary equipments. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a unitary equipment type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcUnitaryEquipmentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcUnitaryEquipmentType</b> are represented by instances of <strong>IfcUnitaryEquipment</strong>. 
Refer to the documentation at <strong>IfcUnitaryEquipment</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcUnitaryEquipmentTypeEnum</h1>
                                
                                <h1>IfcValve</h1>
                                
                                <p>A valve is used in a building services piping distribution system to control or modulate the flow of the fluid.</p> 
 
<blockquote class="note"></blockquote><h1>IfcValveType</h1>
                                
                                <p>The flow controller type <b>IfcValveType</b> defines commonly shared information for occurrences of valves. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a valve type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcValveType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcValveType</b> are represented by instances of <strong>IfcValve</strong>. 
Refer to the documentation at <strong>IfcValve</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcValveTypeEnum</h1>
                                
                                <h1>IfcVibrationIsolator</h1>
                                
                                <p>A vibration isolator is a device used to minimize the effects of vibration transmissibility in a building.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcVibrationIsolatorType</h1>
                                
                                <p>The element component type <b>IfcVibrationIsolatorType</b> defines commonly shared information for occurrences of vibration isolators. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a vibration isolator type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcVibrationIsolatorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcVibrationIsolatorType</b> are represented by instances of <strong>IfcVibrationIsolator</strong>. 
Refer to the documentation at <strong>IfcVibrationIsolator</strong> for supported property sets, materials, and composition.</p>
<blockquote class="note"></blockquote>

<h1>IfcVibrationIsolatorTypeEnum</h1>
                                
                                <h1>IfcActor</h1>
                                
                                <p>The <span class="self-ref">IfcActor</span> defines all actors or human agents involved in a project during its full life cycle. It facilitates the use of person and organization definitions in the resource part of the IFC object model. This includes name, address, telecommunication addresses, and roles.</p>



<h1>IfcComplexPropertyTemplate</h1>
                                
                                <p>The <span class="self-ref">IfcComplexPropertyTemplate</span> defines the template for
all complex properties, either the <strong>IfcComplexProperty</strong>'s,
or the <strong>IfcPhysicalComplexQuantity</strong>'s. The individual
complex property templates are interpreted according to their
<i>Name</i> attribute and and optional <i>UsageName</i>
attribute.</p>



<h1>IfcComplexPropertyTemplateTypeEnum</h1>
                                
                                <h1>IfcContext</h1>
                                
                                <p><span class="self-ref">IfcContext</span> is the generalization of a project context in which objects, type objects, property sets, and properties are defined. The <strong>IfcProject</strong> as subtype of <span class="self-ref">IfcContext</span> provides the context for all information on a construction project, it may include one or several <strong>IfcProjectLibrary</strong>'s as subtype of <span class="self-ref">IfcContext</span> to register the included libraries for the project. A library of products that is referenced is declared within the <strong>IfcProjectLibrary</strong> as the context of that library.</p>

<p>Context definitions can be named, using the inherited <i>Name</i> attribute, which should be a user recognizable key or number for the context. The <i>LongName</i> can add a full name. Further explanations to the context can be given using the inherited <i>Description</i> attribute.</p>

<p>A Context is declared by the relationship object <strong>IfcRelDeclares</strong> that refers to the corresponding objects within the context. More specific relationships are introduced at the level of subtypes.</p>



<h1>IfcControl</h1>
                                
                                <p><span class="self-ref">IfcControl</span> is the abstract generalization of all concepts that control or constrain the utilization of products, processes, or resources in general. It can be seen as a regulation, cost schedule, request or order, or other requirements applied to a product, process or resource whose requirements and provisions must be fulfilled.</p>

<blockquote class="example">
EXAMPLE&nbsp; Controls include action requests, cost schedules, project orders, work plans, and work calendars.
</blockquote>



 

<p class="use-head">Generic relationship use definition</p>
<p>Controls have assignments from products, processes, or other objects by using the relationship object <strong>IfcRelAssignsToControl</strong>.</p>

<h1>IfcCorrectObjectAssignment</h1>
                                
                                <h1>IfcDefinitionSelect</h1>
                                
                                <h1>IfcGroup</h1>
                                
                                <p><span class="self-ref">IfcGroup</span> is an generalization of any arbitrary group. A group is a logical collection of objects. It does not have its own position, nor can it hold its own shape representation. Therefore a group is an aggregation under some non-geometrical / topological grouping aspects.</p>

<blockquote class="note">
NOTE&nbsp; Use <strong>IfcRelDecomposes</strong> together with the appropriate subtypes of <strong>IfcProduct</strong> to define an aggregation of products that may have its own position and shape representation.
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp; An example for a group is a system, since it groups elements under the aspect of their role, regardless of their position in a building.</small></blockquote>

<p>A group can hold any collection of objects (beingÂ products, processes, controls, resources, actors or other groups). Thus groups can be nested. An object can be part of zero, one, or many groups. Grouping relationships are not required to be hierarchical nor do they imply a dependency.</p>

<blockquote class="note">
NOTE&nbsp; Use <strong>IfcRelDecomposes</strong> together with the appropriate subtypes of <strong>IfcProduct</strong> to define an hierarchical aggregation of products.
</blockquote>

<p>A group can be exchanged without having already objects within the group collection.</p>





<p class="use-head">Relationship use definition</p>
<p>Groups are assigned to other objects (such as a process or a resource) by the relationship object that refers to the corresponding
object:</p>
<ul>
<li>Process: assigned using <strong>IfcRelAssignsToProcess</strong></li>
<li>Resource: assigned using <strong>IfcRelAssignsToResource</strong></li>
</ul>
<p>Groups can be subjected to a control. The control information is then assigned:</p>
<ul>
<li>Controls: affecting the group using <strong>IfcRelAssignsToControl</strong></li>
</ul>

<h1>IfcObject</h1>
                                
                                <p>An <span class="self-ref">IfcObject</span> is the
generalization of any semantically treated thing or process.
Objects are things as they appear - i.e. occurrences.</p>

<blockquote class="note">
NOTE&nbsp; Examples of <span class="self-ref">IfcObject</span> include
physically tangible items such as wall, beam or covering,
physically existing items such as spaces, or conceptual items
such as grids or virtual boundaries. It also stands for
processes such as work tasks, for controls such as cost items,
or for actors such as persons involved in the design process.
</blockquote>

<p>Objects can be named, using the inherited <i>Name</i>
attribute, which should be a user recognizable label for the
object occurrance. Further explanations to the object can be
given using the inherited <i>Description</i> attribute. The
<i>ObjectType</i> attribute is used:</p>
<ul>
<li>to store the user defined value for all subtypes of
<span class="self-ref">IfcObject</span>, where a <i>PredefinedType</i> attribute is
given, and its value is set to USERDEFINED.</li>
<li>to provide a type information (could be seen as a very
lightweight classifier) of the subtype of <span class="self-ref">IfcObject</span>, if no
<i>PredefinedType</i> attribute is given. This is often the case,
if no comprehensive list of predefined types is available.</li>
</ul>
<p>Objects are independent pieces of information that might
contain or reference other pieces of information. There are
several relationships in which objects can be involved:</p>
<ul>
<li><b>Association to external/internal resource information</b>
- an association relationship that refers to external/internal
sources of information. See supertype <strong>IfcObjectDefinition</strong>
for more information.</li>
<li><b>Assignment of other objects</b> - an assignment
relationship that refers to other types of objects. See supertype
<strong>IfcObjectDefinition</strong> for more information.</li>
<li><b>Aggregation of other objects</b> - an aggregation
relationship that establishes a whole/part relation. Objects can
either be a whole, or a part, or both. See supertype
<strong>IfcObjectDefinition</strong> for more information.<br>
<br></li>
<li><b>Assignment of a type</b> : <i>IsTypedBy</i> - a definition
relationship <strong>IfcRelDefinesByType</strong> that uses a type
definition to define the common characteristics of this
occurrences, potentially including the common shape
representation and common properties of all object occurrences
assigned to this type. It is a specific - occurrence relationship
with implied dependencies (as the occurrence properties depend on
the properties of the type, but may override them).</li>
<li style="list-style-type:none">
<blockquote class="note">NOTE&nbsp; See <strong>IfcRelDefinesByType</strong> for an
explanatory figure. Also see for how to override type properties
by occurrence properties.</blockquote>
</li>
<li><b>Assignment of a partial type</b> : <i>IsDeclaredBy</i>,
<i>Declares</i> - a definition relationship
<strong>IfcRelDefinesByObject</strong> that uses a component of a type
definition (a part of a type, called the "declaring part") to
define a component of an occurence (part of occurrence, called
the "reflected part"). This is also refered to as a "deep copy".
The common characteristics of all parts in the occurrence are
defined by parts in the type. It is a specific - occurrence
relationship with implied dependencies (as the occurrence
properties depend on the properties of the type, but may override
them).<br></li>
<li style="list-style-type:none">
<blockquote class="note">NOTE&nbsp; See <strong>IfcRelDefinesByObject</strong> for an
explanatory figure.</blockquote>
</li>
<li><b>Assignment of property sets</b> : <i>IsDefinedBy</i> - a
definition relationship <strong>IfcRelDefinesByProperties</strong> that
assignes property set definitions to the object occurrence.</li>
</ul>





<p class="spec-head">Informal Propositions:</p>
<ol>
<li>A partial type assignment, i.e. the inverse attribute
<i>IsDeclaredBy</i>, or <i>Declares</i> shall only be used, if
the object is part of a decomposition, i.e. if either
<i>IsDecomposedBy</i>, or <i>Decomposes</i> is exerted.</li>
</ol>

<h1>IfcObjectDefinition</h1>
                                
                                <p>An <span class="self-ref">IfcObjectDefinition</span> is the generalization of any
semantically treated thing or process, either being a type or an
occurrences. Object defintions can be named, using the inherited
<i>Name</i> attribute, which should be a user recognizable label
for the object occurrance. Further explanations to the object can
be given using the inherited <i>Description</i> attribute. A
context is a specific kind of object definition as it provides the
project or library context in which object types and object
occurrences are defined.</p>
<p>Objects are independent pieces of information that might contain
or reference other pieces of information. There are four essential
kinds of relationships in which object definitons (by their
instantiable subtypes) can be involved:</p>
<ul>
<li><b>Assignment of other objects</b> - an assignment relationship
(<strong>IfcRelAssigns</strong>) that refers to other types of objects and
creates a bi-directional association. The semantic of the
assignment is established at the level of the subtypes of the
general <strong>IfcRelAssigns</strong> relationship. There is no dependency
implied a priori by the assignment.</li>
<li><b>Association to external resources</b> - an association
relationship (<strong>IfcRelAssociates</strong>) that refers to external
sources of information (most notably a classification or document)
and creates a uni-directional association. There is no dependency
implied by the association.</li>
<li><b>Aggregation of other objects</b> - an aggregation
relationship (<strong>IfcRelAggregates</strong>) that establishes an
unordered, spatial whole/part relation and creates a bi-directional
relation. There is an implied dependency established.</li>
<li><b>Nesting of other objects</b> - a nesting relationship
(<strong>IfcRelNests</strong>) that establishes an ordered, non-spatial
whole/part relation and creates a bi-directional relation. There is
an implied dependency established.</li>
<li><b>Declaration within a context</b> - a relationship
(<strong>IfcRelDeclares</strong>) of the uppermost object definition within
the object definition tree (e.g. the summary object within an
object nesting tree) to the context (a project or project library).
It applies the units, representation context and other context
information to this object definition and all dependent ones.
<ul>
<li style="list-type-type:none"><small>EXCEPTION&nbsp; The link
between the uppermost object in the spatial structure tree, that is
<strong>IfcSite</strong> or <i>ifcBuilding</i>, and the context provided
by <strong>IfcProject</strong> is created using the
<strong>IfcRelAggregates</strong> relationship. See <strong>IfcProject</strong> for
more information.</small></li>
</ul>
</li>
</ul>





<h1>IfcObjectTypeEnum</h1>
                                
                                <h1>IfcPreDefinedPropertySet</h1>
                                
                                <p><span class="self-ref">IfcPreDefinedPropertySet</span>
is a generalization of all statically defined property sets that
are assigned to an object or type object. The statically or
pre-defined property sets are entities with a fixed list of
attributes having particular defined data types.</p>

<p><span class="self-ref">IfcPreDefinedPropertySet</span>'s can be assigned to objects
and object types but do not have a defining property set
template.</p>



<p class="use-head">Relationship use definition</p>
<p>Property sets are related to other objects by using the
relationship object that refers to the corresponding object:</p>
<ul>
<li><b>Occurrence Object</b>: <strong>IfcRelDefinesByProperties</strong>
using the inverse attribute <i>DefinesOccurrence</i>.</li>
<li><b>Type Object</b>: using a direct link by inverse attribute
<i>DefinesType</i>.</li>
</ul>

<h1>IfcProcess</h1>
                                
                                <p><span class="self-ref">IfcProcess</span> is defined as
one individual activity or event, that is ordered in time, that
has sequence relationships with other processes, which transforms
input in output, and may connect to other other processes through
input output relationships. An <span class="self-ref">IfcProcess</span> can be an
activity (or task), or an event. It takes usually place in
building construction with the intent of designing, costing,
acquiring, constructing, or maintaining products or other and
similar tasks or procedures. 

<blockquote class="extDef">NOTE&nbsp; Definition according to ISO9000:<br> 
A process is a set of activities that are interrelated or that interact with one another. Processes use resources to transform inputs 
into outputs. Processes are interconnected because the output from one process becomes the input for another process. In effect,
processes are "glued" together by means of such input output relationships.</blockquote>

<table summary="">
<tr valign="top">
<td><img src="../../../figures/IfcProcess_icon_fig.png" alt="icon diagram"
border="0"></td>
</tr>
<tr valign="top">
<td>
<p class="figure">
</td>
</tr>
</table>







<p class="use-head">Relationship use definition</p>
<p>Process information relates to other objects by establishing the following relationships:</p>
<ul>
<li><b>Nesting of processes</b> : <strong>IfcRelNests</strong> - A process can contain sub processes and thereby be nested.</li>
<li><b>Sequencing of processes</b> : <strong>IfcRelSequence</strong> - Processes can be placed in sequence (including overlapping for parallel tasks), and have predecessors and successors.</li>
<li><b>Assigning process to schedules</b> : <strong>IfcRelAssignsToControl</strong> - Activities such as tasks, and predominately summary tasks, are assigned to a work schedule.</li>
<li><b>Having a product assigned to the process as input</b> :
<strong>IfcRelAssignsToProcess</strong> - Products can be assigned as input to a process, such as for construction process planning.</li>
<li><b>Having a product assigned to the process as output</b> :
<strong>IfcRelAssignsToProduct</strong> - Products can be assigned as output to a process, such as for construction process planning.</li>
<li><b>Having a control assigned to the process as process control</b> : <strong>IfcRelAssignsToProcess</strong> - Items that act as a
control onto the process can be assigned to a process, such as for cost management (a cost item assigned to a work task).</li>
<li><b>Having a resource assigned to the process as consumed by the process</b> : <strong>IfcRelAssignsToProcess</strong> - Items that act
as a mechanism to a process, such as labor, material and equipment in cost calculations.</li>
</ul>

<h1>IfcProcessSelect</h1>
                                
                                <h1>IfcProduct</h1>
                                
                                <p>The <span class="self-ref">IfcProduct</span> is an abstract representation of any object that relates to a geometric or spatial context. Subtypes of <span class="self-ref">IfcProduct</span>
usually hold a shape representation and an object placement within the project structure.</p>
<p>This includes manufactured, supplied or created objects (referred to as elements) for incorporation into an AEC/FM
project. This also includes objects that are created indirectly by other products, as spaces are defined by bounding elements.
Products can be designated for permanent use or temporary use, an example for the latter is formwork. Products are defined by their
properties and representations.</p>
<p>In addition to physical products (covered by the subtype <strong>IfcElement</strong>) and spatial items (covered by the subtype
<strong>IfcSpatialElement</strong>) the <span class="self-ref">IfcProduct</span> also includes non-physical items, that relate to a geometric or spatial
contexts, such as grid, port, annotation, structural actions, etc.</p>
<p>The inherited <i>ObjectType</i> attribute can be used to designate a particular type of the product instance. If subtypes 
of <span class="self-ref">IfcProduct</span> have a <i>PredefinedType</i> defined, the <i>ObjectType</i> is used to provide the user defined, particular
type of the product instance, if the <i>PredefinedType</i> is set to <small>USERDEFINED</small>.</p>



<p class="use-head">Generic relationship use definition</p>
<p>On a generic level products can be assigned to processes,
controls, resources, project by using the relationship objects
that refer to the corresponding object:</p>
<ul>
<li><b>Having a control applied</b>: assigned using
<strong>IfcRelAssignsToControl</strong> linking the <span class="self-ref">IfcProduct</span> to an
<strong>IfcControl</strong>
<ul>
<li style="list-style-type:none"><small>An example of this
relationship is the assignment of a performance history to a
distribution element.</small></li>
</ul>
</li>
<li><b>Being assigned to a process</b>: assigned using
<strong>IfcRelAssignsToProcess</strong> linking the <span class="self-ref">IfcProduct</span> to an
<strong>IfcProcess</strong>
<ul>
<li style="list-style-type:none"><small>An example of this
relationship is the assignment of products like wall, slab,
column to a contruction task for construction
planning.</small></li>
</ul>
</li>
<li><b>Being assigned to a resource</b>: assigned using
<strong>IfcRelAssignsToResource</strong> linking the <span class="self-ref">IfcProduct</span> to
an <strong>IfcResource</strong>
<ul>
<li style="list-style-type:none"><small>An example of this
relationship is the assignment of products to a construction
resource that consumes the product.</small></li>
</ul>
</li>
</ul>
<p class="use-head">Generic type use definition</p>
<p>Any instance of <span class="self-ref">IfcProduct</span> defines a particular
occurrence of a product, the common type information, that
relates to many similar (or identical) occurrences of
<span class="self-ref">IfcProduct</span>, is handled by the <strong>IfcTypeProduct</strong> (and
its subtypes), assigned to one or many occurrences of
<span class="self-ref">IfcProduct</span> by using the objectified relationship
<strong>IfcRelDefinesByType</strong>. The <strong>IfcTypeProduct</strong> may
provide, in addition to common properties, also a common
geometric representation for all occurrences.</p>
<blockquote class="note">NOTE&nbsp; See <strong>IfcTypeProduct</strong> for how to use a
common geometric representation and <strong>IfcRelDefinesByType</strong>
for using and overriding common properties.</blockquote>

<p class="use-head">Generic representation use definition</p>
<p>An <span class="self-ref">IfcProduct</span> occurs at a specific location in space if
it has a geometric representation assigned. It can be placed
relatively to other products, but ultimately relative to the
world coordinate system defined for this project. The
<i>ObjectPlacement</i> attribute establishes the coordinate
system in which all points and directions used by the geometric
representation items under <small>Representation</small> are
founded. The placement can either be:</p>
<ul>
<li><b>a relative placement</b>: by <strong>IfcLocalPlacement</strong> with
<i>PlacementRelTo</i> pointing to a parent placement</li>
<li><b>an absolute placement</b>: by <strong>IfcLocalPlacement</strong>
with <i>PlacementRelTo</i> being NIL</li>
<li><b>a placement relative to a grid</b>: by
<strong>IfcGridPlacement</strong></li>
</ul>
<p>The <i>Representation</i> is provided by an
<strong>IfcProductDefinitionShape</strong> being either a geometric shape
representation, or a topology representation (with or without
underlying geometry of the topological items).</p>

<h1>IfcProductSelect</h1>
                                
                                <h1>IfcProject</h1>
                                
                                <p><span class="self-ref">IfcProject</span> indicates the undertaking of some design, engineering, construction, or
maintenance activities leading towards a product. The project establishes the context for information to be exchanged or shared, and it may represent a construction project but does not have to.  The <span class="self-ref">IfcProject</span>'s main purpose in an exchange structure is to provide the root instance and the context for all other information items included.</p>
<p>The context provided by the <span class="self-ref">IfcProject</span> includes:</p>
<ul>
<li>the default units</li>
<li>the geometric representation context for exchange structures including shape representations
<ul>
<li>the world coordinate system</li>
<li>the coordinate space dimension</li>
<li>the precision used within the geometric representations, and</li>
<li>optionally the indication of the true north relative to the world coordinate system</li>
</ul>
</li>
</ul>






<p class="spec-head">Informal Propositions:</p>
<ol>
<li>There shall only be one project within the exchange context. This is enforced by the global rule <strong>IfcSingleProjectInstance</strong>.</li>
</ol>

<h1>IfcProjectLibrary</h1>
                                
                                <p><span class="self-ref">IfcProjectLibrary</span> collects all library elements that are included within a referenced project data set.</p>

<p>Examples for project libraries include:</p>
<ul>
<li>type libraries (also called style or family libraries): a collection of subtypes of <strong>IfcTypeObject</strong></li>
<li>property definition libraries: a collections of <strong>IfcPropertySetTemplate</strong> or <i>IfcPropertyTemplates</i></li>
</ul>



<p class="use-head">Attribute use definition</p>
<dl>
<dt><i>SELF\IfcContext.RepresentationContext</i></dt>
<dd>Context of the representations used within the project library. When the project library includes shape representations for its library type objects, one or several geometric representation contexts need to be included that define the coordinate system, the coordinate space dimensions, and/or the precision factor.<br>
<br></dd>
<dt><i>SELF\IfcContext.UnitsInContext</i></dt>
<dd>Units locally assigned to measure types used within the context of this project library.

<blockquote class="note">NOTE&nbsp; It is generally discouraged to use a different length measure and plane angle measure in an included project library compared with the project itself. It may lead to unexpected results for the shape representation of items included in the project library.</blockquote>

</dd>
</dl>

<p class="use-head">Relationship use definition</p>

<p>Instances of <span class="self-ref">IfcProjectLibrary</span> are assigned to the project context using the <strong>IfcRelDeclares</strong> relationship and accessible through the inverse attribute <i>HasContext</i>. Individual object types and property (set) templates are assigned to the <span class="self-ref">IfcProjectLibrary</span> using the <strong>IfcRelDeclares</strong> relationship and are accessible through the inverse attribute <i>Declares</i>.</p>

<p>An <span class="self-ref">IfcProjectLibrary</span> may be decomposed into sub libraries using the relationship <strong>IfcRelNests</strong>. Sub libraries are accessed by the <span class="self-ref">IfcProjectLibrary</span> through the inverse attribute <i>IsNestedBy</i>.</p>

<h1>IfcPropertyDefinition</h1>
                                
                                <p><span class="self-ref">IfcPropertyDefinition</span> defines the generalization of
all characteristics (i.e. a grouping of individual properties),
that may be assigned to objects. Currently, subtypes of
<span class="self-ref">IfcPropertyDefinition</span> include property set occurrences,
property set templates, and property templates.</p>
<blockquote>
<p><strong>Property set template</strong> -
<strong>IfcPropertySetTemplate</strong>, a collection of property templates
that determine the definition of properties used within a project
context.</p>
<p><strong>Property template</strong> -
<strong>IfcPropertyTemplate</strong>, a single template that determines the
definition of a particular property used in the same project
context. The template may determine the name, description, data
type, the unit, or a standard expression for each property that is
based on that template.</p>
<p><strong>Property set occurrence</strong> -
<strong>IfcPropertySet</strong>, a set of individual properties (that may
or may not be determined by a property template) holding individual
values, measure types and units, and are associated to an object
occurrence or object type.</p>
</blockquote>

<blockquote class="note">
NOTE&nbsp; The subtype hierarchy of <span class="self-ref">IfcPropertyDefinition</span> also includes statically defined property sets as <strong>IfcPreDefinedPropertySet</strong>. Those are rarely used collections of fixed attributes combined in an entity definition. The <strong>IfcPreDefinedPropertySet</strong> can not be determined by an <strong>IfcPropertySetTemplate</strong>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Individual properties, (subtypes of <strong>IfcProperty</strong>), are currently not included in the subtype hierarchy of <span class="self-ref">IfcPropertyDefinition</span>. This anomaly is due to upward compatibility reasons with earlier releases of this
standard.
</blockquote>



<p class="use-head">Relationship use definition</p>
<p>Property definitions define information that is shared among
multiple instances of objects, either object occurrences or object
types. <span class="self-ref">IfcPropertyDefinition</span>'s (by their instantiable
subtypes) can participated within the following relationships:</p>
<ul>
<li><strong>Assignment to a project context</strong> - an
<i>HasContext</i> relationship to <strong>IfcRelDeclares</strong> that
establishes the project context in which this property definition
is declared. This relationship is predominately applicable to
subtypes of <strong>IfcPropertyTemplateDefinition</strong>.</li>
<li><strong>Association to external resources</strong> - an
<i>HasAssociation</i> relationship to <strong>IfcRelAssociates</strong>
that refers to external sources of information (most notably a
classification or document) and creates a uni-directional
association. There is no dependency implied by the
association.</li>
</ul>
<p>Subtypes are included in more specific relationships, see
<strong>IfcPropertySetDefinition</strong> and
<strong>IfcPropertyTemplateDefinition</strong> for details.</p>

<h1>IfcPropertySet</h1>
                                
                                <p>
      <span class="self-ref">IfcPropertySet</span> defines all dynamically extensible
      properties. The property set is a container class that holds
      properties within a property tree. These properties are
      interpreted according to their name attribute.
    </p>
    <p>
      The same <span class="self-ref">IfcPropertySet</span> can be assigned to multiple
      object occurrences; it should then be assigned by a single
      instance of <i>IfcRelDefinedByProperties</i> to a set of
      related objects. Those property sets are referred to as
      shared property sets. It can also be assigned to an object
      type.
    </p>
    <p>
      An <strong>IfcPropertySetTemplate</strong> may define the underlying
      structure, i.e. the required name, the applicable object or
      object types to which the property set can be attached, and
      the individual properties that maybe included.
    </p>
    <blockquote class="note">
      NOTE&nbsp; See <strong>IfcRelDefinesByType</strong> for how to
      override property sets assigned to an object type within the
      object occurrence.
    </blockquote>
    
    
    <p class="use-head">
      Relationship use definition
    </p>
    <p>
      Property sets are related to other objects by using the
      relationship object that refers to the corresponding object:
    </p>
    <ul>
      <li>
        <b>Occurrence Object</b>:
        <strong>IfcRelDefinesByProperties</strong> using the inverse
        attribute <i>DefinesOccurrence</i>.
      </li>
      <li>
        <b>Type Object</b>: using a direct link by inverse
        attribute <i>DefinesType</i>.
      </li>
      <li>
        <b>Underlying template</b>:
        <strong>IfcRelDefinesByTemplate</strong> using the inverse
        attribute <i>IsDefinedBy</i>.
      </li>
      <li>
        <b>External reference</b>: subtypes of
        <strong>IfcRelAssociates</strong> are used to provide a link to a
        classification system, or external library providing
        further reference to the property set. Accessible by
        inverse attribute <i>HasAssociations</i>.
      </li>
    </ul>
    <p class="use-head">
      Attribute use definition
    </p>
    <p>
      Instances of <span class="self-ref">IfcPropertySet</span> are used to assign named
      sets of individual properties (complex or single properties).
      Each individual property has a significant name string. Some
      property sets are included in the IFC specification and
      have&nbsp;a predefined set of properties indicated by
      assigning a significant name. These property sets are listed
      under "property sets" main menu item within this
      specification and from the object documentation sheet for
      those object to which they are applicable. The naming
      convention "Pset_Xxx" applies to all those property sets that
      are defined as part of the IFC specification and it shall be
      used as the value of the <i>Name</i> attribute.
    </p>
    <p>
      In addition any user defined property set can be captured.
      Property sets that are not declared as part of the IFC
      specification shall have a <i>Name</i> value not including
      the "Pset_" prefix.
    </p>
<h1>IfcPropertySetDefinition</h1>
                                
                                <p><span class="self-ref">IfcPropertySetDefinition</span> is a generalization of all
individual property sets that can be assigned to an object or type
object. The property set definition can be either:</p>
<blockquote>
<p><strong>Dynamically extendable property sets</strong> -
<strong>IfcPropertySet</strong>, a set of properties for which the IFC
model only provides a kind of "meta model", to be further declared
by agreement. This means no entity definition of the properties
exists within the IFC model. The declaration is done by assigning a
significant string value to the <i>Name</i> attribute of the
entity as defined in the entity <strong>IfcPropertySet</strong> and at each
subtype of <strong>IfcProperty</strong>, referenced by the property set.
Dynamically defined property sets may have an underlying template
provided by <strong>IfcPropertySetTemplate</strong>.</p>
<p><strong>Statically defined property sets</strong> -
<strong>IfcPreDefinedPropertySet</strong>, a property set entity that
exists within the IFC specification. The semantic meaning of each
statically defined property set is declared by its entity type and
the meaning of the properties is defined by the name and data type
of the explicit attribute representing it.</p>
</blockquote>





<p class="use-head">Relationship use definition</p>
<p>Property set definitions define information that is shared among
multiple instances of objects, either object occurrences or object
types. <span class="self-ref">IfcPropertySetDefinition</span>'s (by their instantiable
subtypes) can participate within the following relationships:</p>
<ul>
<li><strong>Assignment to object types</strong> - an
<i>DefinesType</i> direct relationship to <strong>IfcTypeObject</strong>
that applies the property set, with all included properties, to the
object type. Those properties apply to all object occurrences
having the same object type.</li>
<li><strong>Assignment to object occurrences</strong> - an
<i>DefinesOccurrence</i> relationship to
<strong>IfcRelDefinesByProperties</strong> that applies the property set,
with all included properties, to the object occurrence.</li>
</ul>

<blockquote class="note">
NOTE&nbsp; Properties assigned to object occurrences may override properties assigned to the object type. See <strong>IfcRelDefinesByType</strong> for further information.
</blockquote>

<h1>IfcPropertySetDefinitionSelect</h1>
                                
                                <h1>IfcPropertySetDefinitionSet</h1>
                                
                                <h1>IfcPropertySetTemplate</h1>
                                
                                <p><span class="self-ref">IfcPropertySetTemplate</span> defines the template for all
dynamically extensible property sets represented by
<strong>IfcPropertySet</strong>. The property set template is a container
of property templates within a property tree. The individual
property templates are interpreted according to their <i>Name</i>
attribute and shall have no values assigned.</p>
<blockquote class="note">NOTE&nbsp; By
convention an <span class="self-ref">IfcPropertySetTemplate</span> can also be used as a
template for an <strong>IfcElementQuantity</strong>, being a particular
type of a property set definition.</blockquote>
<p>Property set templates can form part of a property library used
and declared within a project. Depending on the
<i>TemplateType</i> the <span class="self-ref">IfcPropertySetTemplate</span> defines a
template for:</p>
<ul>
<li>"Pset_" - occurrences of <strong>IfcPropertySet</strong></li>
<li>"QTO_" - occurrences of <strong>IfcElementQuantity</strong></li>
</ul>



<p class="use-head">Relationship use definition</p>

<p>The inherited <i>HasContext</i> inverse relation to <strong>IfcRelDeclares</strong> is used to declare the <span class="self-ref">IfcPropertySetTemplate</span> within a project library. If included in an exchange data set it can then be traversed through the <strong>IfcProjectLibrary</strong>.</p>

<p>The <i>Defines</i> inverse relation to <strong>IfcRelDefinesByTemplate</strong> is provided to keep the definition relationship between the <span class="self-ref">IfcPropertySetTemplate</span> and the one to many <strong>IfcPropertySet</strong>'s, for which it provides the template.</p>

<p>Between <strong>IfcProperty</strong>'s within the <i>HasProperties</i> set of <strong>IfcPropertySet</strong> having the same <i>Name</i> attribute value as the <strong>IfcPropertyTemplate</strong>'s within the <i>HasPropertyTemplates</i> set of <span class="self-ref">IfcPropertySetTemplate</span> an implicit definition relationship is established that assigns the template to the individual properties.</p>

<p>

<table summary="relationships used for property set templates">
<tr>
<td valign="top"><img src=
"../../../figures/IfcPropertySetTemplate_fig-1.png" alt=
"property set template"></td>
</tr>
<tr><td><p class="figure">
</tr>
</table>
<h1>IfcPropertySetTemplateTypeEnum</h1>
                                
                                <h1>IfcPropertyTemplate</h1>
                                
                                <p>The <span class="self-ref">IfcPropertyTemplate</span> is an abstract supertype
comprising the templates for all dynamically extensible properties,
either as an <strong>IfcComplexPropertyTemplate</strong>, or an
<strong>IfcSimplePropertyTemplate</strong>. These templates determine the
structure of:</p>
<ul>
<li>in case of <strong>IfcComplexPropertyTemplate</strong>
<ul>
<li>an <strong>IfcComplexProperty</strong></li>
<li>an <strong>IfcPhysicalComplexQuantity</strong></li>
</ul>
</li>
<li>in case of <strong>IfcSimplePropertyTemplate</strong>
<ul>
<li>a subtype of <strong>IfcSimpleProperty</strong></li>
<li>a subtype of <strong>IfcPhysicalSimpleQuantity</strong></li>
</ul>
</li>
</ul>
<p>The individual property templates are interpreted according to
their <i>Name</i> attribute and may have a predefined property
type, property unit, and property data type. A template however
shall not have measure values, or quantity values assigned. .</p>

<blockquote class="note">
NOTE&nbsp; Property templates can form part of a property library used and attached as part of a project library. In general the <strong>IfcPropertySetTemplate</strong>, containing the subtypes of <span class="self-ref">IfcPropertyTemplate</span> would be directly linked to the <strong>IfcProjectLibrary</strong>.
</blockquote>



<h1>IfcPropertyTemplateDefinition</h1>
                                
                                <p><span class="self-ref">IfcPropertyTemplateDefinition</span> is a generalization of
all property and property set templates. Templates define the
collection, types, names, applicable measure types and units of
individual properties used in a project. The property template
definition can be either:</p>
<blockquote>
<p><strong>Property set template</strong> -
<strong>IfcPropertySetTemplate</strong>, a collection of property templates
that determine the definition of properties used within a project
context.</p>
<p><strong>Property template</strong> -
<strong>IfcPropertyTemplate</strong>, a single template that determines the
definition of a particular property used in the same project
context. The template may determine the name, description, data
type, the unit, or a standard expression for each property that is
based on that template.</p>
</blockquote>
<p>The subtypes of <span class="self-ref">IfcPropertyTemplateDefinition</span> are
declared within a project context. The uppermost template
definition (e.g. the <strong>IfcPropertySetTemplate</strong> including
several <strong>IfcPropertyTemplate</strong>'s) should be related to the
context, either <strong>IfcProject</strong>, or <strong>IfcProjectLibrary</strong>,
using the inherited <i>HasContext</i> inverse attribute.</p>



<h1>IfcProxy</h1>
                                
                                <p><span class="self-ref">IfcProxy</span> is intended to be a kind of a container for wrapping objects which are defined by associated properties, which may or may not have a geometric representation and placement in space. A proxy may have a semantic meaning, defined by the <i>Name</i> attribute, and property definitions, attached through the property assignment relationship, which definition may be outside of the definitions given by the current release of IFC.</p>

<p>The <i>ProxyType</i> may give an indication to which high level semantic breakdown of object the semantic definition of the proxy relates to. the <i>Tag</i> attribute may be used to assign a human or system interpretable identifier (such as a serial number or bar code).</p>

<blockquote class="note">
NOTE&nbsp; Given that only a limited number of semantic constructs can be formally defined within IFC (and it will never be possible to define all), there has to be a mechanism for capturing those constructs that are not (yet) defined by IFC.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Product proxies are a mechanism that allows to exchange data that is part of the project but not necessarily part of the IFC model. Those proxies may have geometric representations assigned.
</blockquote>



<blockquote class="deprecated">DEPRECATION&nbsp; The entity is deprecated and shall not be used.</blockquote>

<h1>IfcQuantitySet</h1>
                                
                                <p>
      <span class="self-ref">IfcQuantitySet</span> is the the abstract supertype for all
      quantity sets attached to objects. The quantity set is a
      container class that holds the individual quantities within a
      quantity tree. These quantities are interpreted according to
      their name attribute and classified according to theie
      measure type.
    </p>
    <p>
      The same <span class="self-ref">IfcQuantitySet</span> can be assignd to multiple
      object occurrences, it should then be assigned by a single
      instance of <i>IfcRelDefinedByProperties</i> to a set of
      related objects. Those quantity sets are referred to as
      shared shared sets. It can also be assigned to an object
      type.
    </p>
    <p>
      An <strong>IfcPropertySetTemplate</strong> may define the underlying
      structure, i.e. the required name, the applicable object or
      object types to which the quantity set can be attached, and
      the individual quantities that maybe included.
    </p>
    
    <p class="use-head">
      Relationship use definition
    </p>
    <p>
      Quantity sets are related to other objects by using the
      relationship object that refers to the corresponding object:
    </p>
    <ul>
      <li>
        <b>Occurrence Object</b>:
        <strong>IfcRelDefinesByProperties</strong> using the inverse
        attribute <i>DefinesOccurrence</i>.
      </li>
      <li>
        <b>Type Object</b>: using a direct link by inverse
        attribute <i>DefinesType</i>.
      </li>
      <li>
        <b>Underlying template</b>:
        <strong>IfcRelDefinesByTemplate</strong> using the inverse
        attribute <i>IsDefinedBy</i>.
      </li>
      <li>
        <b>External reference</b>: subtypes of
        <strong>IfcRelAssociates</strong> are used to provide a link to a
        classification system, or external library providing
        further reference to the quantity set. Accessible by
        inverse attribute <i>HasAssociations</i>.
      </li>
    </ul>
    <p class="use-head">
      Attribute use definition
    </p>
    <p>
      Instances of <span class="self-ref">IfcQuantitySet</span> are used to assign named
      sets of individual quantities (complex or single quantities).
      Each individual quantity has a significant name string. Some
      quantity sets are included in the IFC specification and have
      a predefined set of quantities indicated by assigning a
      significant name. These quantity sets are listed under
      "quantity sets" main menu item within this specification and
      in the object documentation sheet for those object to which
      they are applicable.
    </p>
<h1>IfcRelAggregates</h1>
                                
                                <p>The aggregation relationship <span class="self-ref">IfcRelAggregates</span> is a special type of the general composition/decomposition (or whole/part) relationship
<strong>IfcRelDecomposes</strong>. The aggregation relationship can be applied to all subtypes of <strong>IfcObjectDefinition</strong>.</p>
<p>In cases of aggregation of physical elements into a physical aggregate the shape representation of the whole (within the same
representation identifier) can be taken from the sum of the shape representations of the parts.</p>

<blockquote class="example">
EXAMPLE&nbsp; A roof is the aggregation of the roof elements, such as roof slabs, rafters, purlins, etc. Within the
same representation identifier (such as the body geometric representation), the shape representation of the roof is given by
the shape representation of its parts.
</blockquote>

<p>Decompositions imply a dependency, implying that the whole depends on the definition of the parts and the parts depend
on the existence of the whole. The behaviour that is implied from the dependency relationship has to be established inside the applications.</p>





<h1>IfcRelAssigns</h1>
                                
                                <p>The assignment relationship, <span class="self-ref">IfcRelAssigns</span>, is a generalization of "link" relationships among instances of <strong>IfcObject</strong> and its various 1<sup>st</sup> level subtypes. A link denotes the specific association through which one object (the client) applies the services of other objects (the suppliers), or through which one object may navigate to other objects.</p>

<p>The client is denoted as the relating object and is established at the level of the specific, instantiable subtypes of <span class="self-ref">IfcRelAssigns</span>. The suppliers are denoted as the related objects and they are established by the <i>RelatedObjects</i> attribute.</p> 
	 
<blockquote class="note">
NOTE&nbsp; The terms "client" and "supplier" are used in a general concept and do not imply any meaning for implementations of systems (like client-server).
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp; A resource may receive information about its nature of representing real building products by establishing a link between <strong>IfcResource</strong> and <strong>IfcBuildingElement</strong> (subtype of <strong>IfcProduct</strong>) through the assignment relationship <strong>IfcRelAssignsToResource</strong>. The resource is then the client that applies the services of other objects (here building elements) to express the particular view of elements to be consumed as a resource in a process.
</blockquote>

<p>The assignment relationship establishs a bi-directional relationship among the participating objects and does not imply any dependency. The subtypes of <span class="self-ref">IfcRelAssigns</span> establishes the particular semantic meaning of the assignment relationship.</p>

 

<h1>IfcRelAssignsToActor</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToActor</span> handles the assignment of objects (subtypes of <strong>IfcObject</strong>) to an actor (subtypes of <strong>IfcActor</strong>).</p>

<p>The <span class="self-ref">IfcRelAssignsToActor</span> objectified relationship defines a relationship between an <strong>IfcActor</strong> and one or many objects. A particular role of the actor played in that relationship can be associated. If specified, it takes priority over the role that may be directly assigned to the person or organization.</p>

<blockquote class="example">
EXAMPLE&nbsp; An occupant (as an actor) may rent a flat (as a collection of spaces or a zone). This would be an application of this generic relationship.
</blockquote>

<p>Reference to the objects (or single object) on which the actor acts upon in a certain role (if given) is specified in the inherited <i>RelatedObjects</i> attribute. </p> 



<h1>IfcRelAssignsToControl</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToControl</span> handles the assignment of a control (represented by subtypes of <strong>IfcControl</strong>) to other objects (represented by subtypes of <strong>IfcObject</strong>, with the exception of controls).</p>

<blockquote class="example">
EXAMPLE&nbsp; The assignment of a performance history (as subtype of <strong>IfcControl</strong>) for a building service element (as subtype of <strong>IfcObject</strong>) is an application of this generic relationship.
</blockquote>



<h1>IfcRelAssignsToGroup</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToGroup</span> handles the assignment of object definitions (individual object occurrences as subtypes of <strong>IfcObject</strong>, and object types as subtypes of <strong>IfcTypeObject</strong>) to a group (subtypes of <strong>IfcGroup</strong>).</p>

<p>The relationship handles the assignment of group members to the group object. It allows for grouping arbitrary objects within a group, including other groups. The grouping relationship can be applied in a recursive manner. The resulting group is of type <strong>IfcGroup</strong>.</p>

<blockquote class="note">
NOTE&nbsp; Examples of groups include zones as a grouping of spaces, distribution systems as a grouping of building service components, or structural analysis models as a grouping of structural items.
</blockquote>

<p>The inherited attribute <i>RelatedObjects</i> gives the references to the objects, which are the elements within the group. The <i>RelatingGroup</i> is the group that comprises all elements. The same object or object type can be included in zero, one or many groups. Grouping relationships are not hierarchical.</p>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The group assignment relationship shall be acyclic, that is, a group shall not participate in its own grouping relationship.</li>
</ol>



<h1>IfcRelAssignsToGroupByFactor</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToGroupByFactor</span> is a specialization of the general grouping mechanism. It allows to add a factor to define the ratio that applies to the assignment of object definitions (individual object occurrences as subtypes of <strong>IfcObject</strong> and object types as subtypes of <strong>IfcTypeObject</strong>) to a group (subtypes of <strong>IfcGroup</strong>).</p>

<p>The ratio can be used to define a percentage assignment.  For example, a <i>Factor</i> of 0.8 would indicate that the object is assigned by 80% to the group, or a <i>Factor</i> of 2.5 would indicate the object is assigned with a weight factor of 2.5 to the group.</p> 

<blockquote class="note">
NOTE&nbsp; Examples of factored groups include the assignment of load cases in a load combination in structural analysis, or the assignment of spaces by percentage to different rental zones.
</blockquote>

<p>The same object or object type may be included with the same or different <i>Factor</i> values to many groups. Grouping relationships are not hierarchical.</p>



<h1>IfcRelAssignsToProcess</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToProcess</span> handles the assignment of one or many objects to a process or activity. An object can be a product that is the item the process operates on. Processes and activities can operate on things other than products, and can operate in ways other than input and output.</p>

<blockquote class="example">
EXAMPLE&nbsp; It may be common to define processes
during estimating or scheduling that describe design tasks
(resulting in documents), procurement tasks (resulting in
construction materials), planning tasks (resulting in processes),
etc. Furthermore, the ways in which process can operate on
something might include "installs", "finishes", "transports",
"removes", etc. The ways are described as operation
types.
</blockquote>

<p>The inherited attribute <i>RelatedObjects</i> gives the
references to the objects, or object type, which the process
operates on. The <i>RelatingProcess</i> is the process or process
type, that operates on the object. The operation types are
captured in the inherited attribute <i>Name</i>.</p>

<blockquote class="note">
NOTE&nbsp; The agreement on valid and recognizable
values for the <i>Name</i> attribute is part of view definitions
and implementer agreements.
</blockquote>





<h1>IfcRelAssignsToProduct</h1>
                                
                                <p>The objectified relationshipÂ <span class="self-ref">IfcRelAssignsToProduct</span> handles the assignment of objects (subtypes of <strong>IfcObject</strong>) to a product (subtypes of <strong>IfcProduct</strong>). The <i>Name</i> attribute should be used to classify the usage of the <span class="self-ref">IfcRelAssignsToProduct</span> objectified relationship. The following <i>Name</i> values are proposed:</p>
<ul>
<li>'Context' : Assignment of a context specific representation, such as of structural members to a different context representation (with potentially different decomposition breakdown) such as of building elementsÂ for a specificÂ context specific representation.Â </li>
<li>'View' : Assignment of a product (via <i>RelatingProduct</i>) that is decomposed according to a discipline view, to another product (via <i>RelatedObjects</i>) that is decomposed according to a different discipline view. An example is the assignment of the architectural slab to a different decomposition of the pre manufactured sections of a slab (under a precast concrete discipline view).</li>
</ul>





<h1>IfcRelAssignsToResource</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelAssignsToResource</span> handles the assignment of objects
(as subtypes of <strong>IfcObject</strong>), acting as a resource usage or consumption, to a resource (as subtypes of <strong>IfcResource</strong>).</p>

<blockquote class="example">
EXAMPLE&nbsp; The assignment of a resource usage to a construction resource is an application of this generic relationship. It could be an actor, as person or organization assigned to a labor resource, or a raw product assigned to a construction product or material resource).
</blockquote>



<h1>IfcRelAssociates</h1>
                                
                                <p>
 The association relationship <span class="self-ref">IfcRelAssociates</span> refers to sources of information (most notably a 
 classification, library, document, approval, contraint, or material). The information associated may reside 
 internally or externally of the project data. There is no dependency implied by the association.
</p>
<blockquote class="example">
 EXAMPLE&nbsp; Further external information may be provided to the tank equipment (as subtype of <strong>IfcProduct</strong>) 
 in terms of its classification and instruction documents, the source of the additional information is held external 
 to the project data model.
</blockquote>
<p>
 Association relationships can be established to objects (occurrences as subtypes of <strong>IfcObject</strong>) or to types 
 (as subtypes of <strong>IfcTypeObject</strong>). Some associations (such as approval, or document) may also be applied to
 property templates (as subtypes of <strong>IfcPropertyDefinition</strong>).
</p>
<blockquote class="example">
 EXAMPLE&nbsp; The classification information for the storage tank equipment may be associated to the
 <strong>IfcTankType</strong> (subtype of <strong>IfcTypeObject</strong>), defining the specific information for all occurencies of
 that tank in the project. Therefore the association of the Uniclass notation 'L6814' may be associated by a
 subtype of <span class="self-ref">IfcRelAssociates</span> to the type information.
</blockquote>
<blockquote class="example">
 EXAMPLE&nbsp; The classification information for a particular space within a building may be associated
 to the <strong>IfcSpace</strong> object (subtype of <strong>IfcObject</strong>), defining a particular occurrence of
 space. Therefore the association of the DIN notation 'NF 1.5' may be associated by a subtype of
 <span class="self-ref">IfcRelAssociates</span> to the object.
</blockquote>
<p>
 The association relationship establishs an association between one to many objects or property templates and the
 associated information. The subtypes of <span class="self-ref">IfcRelAssociates</span> establish the particular semantic meaning of the  association relationship.
</p>





<h1>IfcRelAssociatesClassification</h1>
                                
                                <p>The objectified relationship
<span class="self-ref">IfcRelAssociatesClassification</span> handles the assignment of a
classification item (items of the select
<strong>IfcClassificationSelect</strong>) to objects occurrences (subtypes of
<strong>IfcObject</strong>) or object types (subtypes of
<strong>IfcTypeObject</strong>).</p>
<p>The relationship is used to assign a classification item, or a
classification system itself to objects. Depending on the type of
the <i>RelatingClassification</i> it is either:</p>
<ul>
<li>a reference to an classification item within an external
classification system, or</li>
<li>a reference to the classification system itself</li>
</ul>

<blockquote class="note">
NOTE&nbsp; The reference to a classification item
includes a link to the classification system within which the item
is declared. It assigns the meaning of the classification item to
the object (ocurrence or type). The reference to the classification
system provides the information that the object (occurrence or
type) is governed by the classification system but no assignment of
a particular items has been done yet.
</blockquote>

<p>The inherited attribute <i>RelatedObjects</i> define the objects
or object types to which the classification is applied. The
attribute <i>RelatingClassification</i> is the reference to a
classification, applied to the object(s). A single
<i>RelatingClassification</i> can thereby be applied to one or
multiple objects.</p>



<h1>IfcRelAssociatesDocument</h1>
                                
                                <p>The objectified relationship (<span class="self-ref">IfcRelAssociatesDocument</span>) handles the assignment of a document information (items of the select <strong>IfcDocumentSelect</strong>) to objects occurrences (subtypes of <strong>IfcObject</strong>) or object types (subtypes of <strong>IfcTypeObject</strong>).</p>

<p>The relationship is used to assign a document reference or a more detailed document information to objects. A single document reference can be applied to multiple objects.</p>

<p>The inherited attribute <i>RelatedObjects</i> define the objects to which the document association is applied. The attribute <i>RelatingDocument</i> is the reference to a document reference, applied to the object(s).</p> 
	 


<h1>IfcRelAssociatesLibrary</h1>
                                
                                <p>The objectified relationship (<span class="self-ref">IfcRelAssociatesLibrary</span>) handles the assignment of a library item (items of the select <strong>IfcLibrarySelect</strong>) to subtypes of <strong>IfcObjectDefinition</strong> or <strong>IfcPropertyDefinition</strong>.</p> 

<p>The relationship is used to assign a library reference or a more detailed link to a library information to objects, property sets or types. A single library reference can be applied to multiple items.</p> 

<p>The inherited attribute <i>RelatedObjects</i> define the items to which the library association is applied. The attribute <i>RelatingLibrary</i> is the reference to a library reference, applied to the item(s).</p> 



<h1>IfcRelationship</h1>
                                
                                <p><span class="self-ref">IfcRelationship</span> is the abstract generalization of all objectified relationships in IFC. Objectified relationships are the preferred way to handle relationships among objects. This allows to keep relationship specific properties directly at the relationship and opens the possibility to later handle relationship specific behavior. </p> 

<p>There are two different types of relationships, 1-to-1 relationships and 1-to-many relationship. used within the subtypes of <span class="self-ref">IfcRelationship</span>. The following convention applies to all subtypes:</p> 

<ul> 
<li>The two sides of the objectified relationship are named <br>- Relating+&lt;name of relating object&gt; and <br>- Related+&lt;name of related object&gt;</li> 
<li>In case of the 1-to-many relationship, the related side of the relationship shall be an aggregate SET 1:N</li> 
</ul> 



<h1>IfcRelConnects</h1>
                                
                                <p><span class="self-ref">IfcRelConnects</span> is a connectivity relationship that connects objects under some criteria. As a general connectivity it does not imply constraints, however subtypes of the relationship define the applicable object types for the connectivity relationship and the semantics of the particular connectivity.</p> 

 

<h1>IfcRelDeclares</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelDeclares</span> handles the declaration of objects (subtypes of <strong>IfcObject</strong>) or properties (subtypes of <strong>IfcPropertyDefinition</strong>) to a project or project library (represented by <strong>IfcProject</strong>, or <strong>IfcProjectLibrary</strong>).</p>

<p>The relationship handles the assignment of other objects, like <strong>IfcActor</strong>, or <strong>IfcTypeObject</strong> to the project, or project libary. The attribute <i>RelatedDefinitions</i> provides the references to the first level objects, that are the elements within the context. All other objects that relate to the first level objects are also defined in the context.</p>

<blockquote class="note">
NOTE&nbsp; Every object (as subtype of <strong>IfcObject</strong>) has to be declared within the context of a single <strong>IfcProject</strong>, or of a <strong>IfcProjectLibrary</strong> assigned to a single <strong>IfcProject</strong>. This declaration is transitive. For example: the <strong>IfcWorkPlan</strong> as first level object is declared within the context of <strong>IfcProject</strong> via <span class="self-ref">IfcRelDeclares</span>, all related <strong>IfcWorkSchedule</strong>'s are related to the context in a transitive way through <strong>IfcWorkPlan</strong>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; The assignment excludes subtypes of <strong>IfcProduct</strong>'s, these are assigned to the <strong>IfcProject</strong> using the spatial structure approach through <strong>IfcSpatialStructureElement</strong>(s), where the outer container element such as <strong>IfcSite</strong> or <strong>IfcBuilding</strong> has an <strong>IfcRelAggregates</strong> relationship with the <strong>IfcProject</strong>.
</blockquote>

<p>The <i>RelatingContext</i> is the project, or project library that comprises all elements. The unit assignments and the presentation contexts defined at <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> apply to all these elements.</p>



<h1>IfcRelDecomposes</h1>
                                
                                <p>The decomposition relationship,
<span class="self-ref">IfcRelDecomposes</span>, defines the general concept of elements
being composed or decomposed. The decomposition relationship
denotes a whole/part hierarchy with the ability to navigate from
the whole (the composition) to the parts and vice versa.</p>
<p>Decompositions may be constrained by requiring both, the whole
and its parts, to be of the same type - thus establishing a
nesting relationship. Or they may require some form of physical
containment, thus establishing special types of aggregation
relationships.</p>

<blockquote class="note">
NOTE&nbsp; There are two special names for
decomposition, which are linguistically distinguished, nesting
and aggregation. The subtypes of <span class="self-ref">IfcRelDecomposes</span> will
introduce either the nesting or aggregation convention (see
<strong>IfcRelNests</strong> and <strong>IfcRelAggregates</strong>).
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp; A cost element is a nest of other cost
elements. Or a structural frame is an aggregation of beams and
columns. Both are applications of decomposition
relationship.
</blockquote>
<p>Decompositions imply a dependency, i.e. the definition of the
whole depends on the definition of the parts and the parts depend
on the existence of the whole. The decomposition relationship can
be applied in a recursive manner, i.e. a decomposed element can
be part in another decomposition. Cyclic references have to be
prevented at application level.</p>





<h1>IfcRelDefines</h1>
                                
                                <p>A generic and abstract relationship which subtypes are used to:</p>
<ul>
<li>assign a object type to an object occurrence</li>
<li>assign a property set to an object instance</li>
<li>assign a property set template to a property set</li>
</ul>

<blockquote class="example">
EXAMPLE&nbsp;Â Several instances of windows within
the IFC project model may be of the same (catalogue or
manufacturer) type. Thereby they share the same properties. This
relationship is established by the subtype
<strong>IfcRelDefinesByType</strong> of <span class="self-ref">IfcRelDefines</span> relationship
assigning an <strong>IfcWindowStyle</strong> to multiple occurrences
<strong>IfcWindow</strong>.
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp;Â The (same) property set, e.g.Â 
Pset_ProductManufacturerInfo, keeping the manufacturer name,
label and production year of a product, can be assigned to one,
or many instances of furnishing. This relationship is established
by the subtype <strong>IfcRelDefinesByProperties</strong> of
<span class="self-ref">IfcRelDefines</span> relationship assigning an
<strong>IfcPropertySet</strong> to one or more instances of
<strong>IfcFurnishingElement</strong>.
</blockquote>





<h1>IfcRelDefinesByObject</h1>
                                
                                <p>The objectified relationship <span class="self-ref">IfcRelDefinesByObject</span> defines the relationship between an object taking part in an object type decomposition and an object occurrences taking part in an occurrence decomposition of that type.</p>
<p>The <span class="self-ref">IfcRelDefinesByObject</span> is a 1-to-N relationship, as it allows for the assignment of one declaring object information to a single or to many reflected objects. Those objects then share the same object property sets and, for subtypes of <strong>IfcProduct</strong>, the eventually assigned representation maps.</p>
<p>Only objects that take part in a type decomposition and in an occurrence decomposition of the same type can be connected by the <span class="self-ref">IfcRelDefinesByObject</span> relationship.</p>



<p class="use-head">Relationship use definition</p>

<p>The <span class="self-ref">IfcRelDefinesByObject</span> links the decomposed object type part, also called the "declaring part" with the occurrence of that part inside the occurrence of the decomposed type, also called the "reflected part", as shown in 

<table border="0" cellpadding="0" cellspacing="0" summary="relationship usage">
<tr><td><img src="../../../figures/IfcRelDefinesByObject_fig-1.png" alt="instance diagram" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<p>The <span class="self-ref">IfcRelDefinesByObject</span> can be used together with the shape representations of the product type as shown in 

<table border="0" cellpadding="0" cellspacing="0" summary="relationship usage">
<tr><td><img src="../../../figures/IfcRelDefinesByObject_fig-2.png" alt="geometry diagram" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcRelDefinesByProperties</h1>
                                
                                <p>The objectified relationship
<span class="self-ref">IfcRelDefinesByProperties</span> defines the relationships
between property set definitions and objects. Properties are
aggregated in property sets. Property sets can be either directly
assigned to occurrence objects using this relationship, or
assigned to an object type and assigned via that type to
occurrence objects.</p>
<p>The <span class="self-ref">IfcRelDefinesByProperties</span> is a 1-to-N relationship,
as it allows for the assignment of one property set to a single
or to many objects. Those objects then share the same property
definition.</p>





<h1>IfcRelDefinesByTemplate</h1>
                                
                                <p>
      The objectified relationship <span class="self-ref">IfcRelDefinesByTemplate</span>
      defines the relationships between property set template and
      property sets. Common information about property sets, e.g.
      the applicable name, description, contained properties, is
      defined by the property set template and assigned to all
      property sets.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The assignment of an <strong>IfcPropertySetTemplate</strong> is
      supported for <strong>IfcPropertySet</strong> and
      <strong>IfcQuantitySet</strong>.
    </blockquote>
    <p>
      The <span class="self-ref">IfcRelDefinesByTemplate</span> is a 1-to-N relationship,
      as it allows for the assignment of one property set template
      to a single or to many property sets or quantity sets. Those
      property sets then share the same property set template
      definition.
    </p>
    
<h1>IfcRelDefinesByType</h1>
                                
                                <p>The objectified relationship
<span class="self-ref">IfcRelDefinesByType</span> defines the relationship between an
object type and object occurrences.</p>
<p>The <span class="self-ref">IfcRelDefinesByType</span> is a 1-to-N relationship, as it
allows for the assignment of one type information to a single or
to many objects. Those objects then share the same object type,
and the property sets and properties assigned to the object
type.</p>





<p class="use-head">Relationship use definition</p>

<p>The <span class="self-ref">IfcRelDefinesByType</span> links the object type
definition with the object occurrence. Both may define properties
by assigning an <strong>IfcPropertySet</strong>, including one or many
subtypes of <strong>IfcProperty</strong> to either the object type or
object occurrence, as shown in 
<p>There are several scenarios to define the same property
set on the object type definition and object occurrence
side:</p>
<ol>
<li>All properties for all object occurrences of a common
object type have the same value - then only the object type
definition has a property set assigned.</li>
<li>All properties for all object occurrences are
different, that is there are no common property values for the
object type definition - then each of the object occurrence has a
property set assigned.</li>
<li>Some properties within the same property set have
common values and are assigned to the object type definition and
some are occurrence specific and assigned (with potentially
different values) to the object occurrences - then:
<ul>
<li>The sum of all properties within a given property set
applicable to an object occurrence is the union of properties
assigned to the object type definition plus the properties
assigned to the object occurrence.</li>
<li>If the object occurrence has a property with the same
<i>IfcProperty.Name</i> in an <strong>IfcPropertySet</strong>, as the
corresponding object type definition, then the occurrence
property value overrides the type property value.</li>
</ul>
</li>
</ol>

<table border="0" cellpadding="0" cellspacing="0" summary=
"relationship usage">
<tr><td valign="top"><img src="../../../figures/IfcRelDefinesByType_fig-1.png"
alt="instance diagram" border="0"></td></tr>
<td valign="top"><p class="figure">
</table>

<p>The following table provides an example of assigning</p>
<table border="1" cellpadding="2" cellspacing="2" summary=
"example for property assignment">
<tr valign="top">
<td><small><b>properties assigned to
<strong>IfcWall</strong></b></small></td>
<td><small><b>properties assigned to
<strong>IfcWallType</strong></b></small></td>
<td><small><b>resulting property value for individual
wall</b></small></td>
</tr>
<tr valign="top">
<td><small><span class="self-ref">Pset_WallCommon</span></small></td>
<td><small><span class="self-ref">Pset_WallCommon</span></small></td>
<td>Â </td>
</tr>
<tr valign="top">
<td><i><small>Â -Â ExtendToStructure</small> = TRUE</i></td>
<td>Â </td>
<td><small>TRUE</small></td>
</tr>
<tr valign="top">
<td>Â </td>
<td><small><i>Â -Â ThermalTransmittance</i> = 0.375</small></td>
<td><small>0.375</small></td>
</tr>
<tr valign="top">
<td><small><i>Â -Â ExtendToStructure</i> = FALSE</small></td>
<td><small><i>Â -Â ExtendToStructure</i> = TRUE</small></td>
<td><small>FALSE</small></td>
</tr>
</table>
<h1>IfcRelNests</h1>
                                
                                <p>
      The nesting relationship <span class="self-ref">IfcRelNests</span> is a special type
      of the general composition/decomposition (or whole/part)
      relationship <strong>IfcRelDecomposes</strong>. The nesting
      relationship can be applied to all non physical subtypes of
      object and object types, namely processes, controls (like
      cost items), and resources. It can also be applied to
      physical subtypes of object and object types, namely elements
      having ports. The nesting implies an order among the nested
      parts.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; A nesting of costs items in an
      <strong>IfcCostSchedule</strong> is the composition of complex cost
      items from other cost items. The order of the nested cost
      items underneath the parent cost item is determined by the
      order of the list of <i>RelatedObjects</i>.
    </blockquote>
    <blockquote class="example">
      EXAMPLE&nbsp; A nesting of <strong>IfcTask</strong>'s within a work
      schedule is the composition of a parent work task from more
      specific sub work tasks. The order of the sub tasks
      underneath the parent task is determined by the order of the
      list of <i>RelatedObjects</i>.
    </blockquote>
    <blockquote class="example">
      EXAMPLE&nbsp; A series of <strong>IfcDistributionPort</strong>'s can
      be nested within an <strong>IfcDistributionElement</strong>. They
      decompose the distribution element and have an implied order.
    </blockquote>
    <p>
      Decompositions imply a dependency, i.e. the definition of the
      whole depends on the definition of the parts and the parts
      depend on the existence of the whole. The behaviour that is
      implied from the dependency has to be established inside the
      applications.
    </p>
    
    
<h1>IfcResource</h1>
                                
                                <p><span class="self-ref">IfcResource</span> contains the information needed to represent the costs, schedule, and other impacts from the use of a thing in a process. It is not intended to use <span class="self-ref">IfcResource</span> to model the general properties of the things themselves, while an optional linkage from <span class="self-ref">IfcResource</span> to the things to be used can be specified (specifically, the relationship from subtypes of <span class="self-ref">IfcResource</span> to <strong>IfcProduct</strong> through the <strong>IfcRelAssignsToResource</strong> relationship). </p> 

<p>There are two basic intended uses of <span class="self-ref">IfcResource</span>. First, if the attributes of the thing are not needed for the purpose of the use of <span class="self-ref">IfcResource</span>, or the types of things are not explicitly modeled in IFC yet, then the linkage between the resource and the thing doesn't have to be instantiated in the system. That is, the attributes of <span class="self-ref">IfcResource</span> (or its subtypes) alone are sufficient to represent the use of the thing as a resource for the purpose of the project. </p> 

<blockquote class="example"> 
EXAMPLE&nbsp; construction equipment such as earth-moving vehicles or tools are not currently modeled within the IFC. For the purpose of estimating and scheduling, these can be represented using subtypes of <span class="self-ref">IfcResource</span> alone.
</blockquote> 

<p>Second, if the attributes of the thing are needed for the use of <span class="self-ref">IfcResource</span> objects, and they are modeled explicitly as objects, then the <span class="self-ref">IfcResource</span> instances can be linked to the instances of the type of the things being referenced. Things that might be used as resources and that are already modeled in the IFC include physical products, people and organizations, and materials. The relationship object <strong>IfcRelAssignsToResource</strong> is provided for this approach.</p> 

<p>The inherited attribute <i>ObjectType</i> is used as a textual code that identifies the resource type. </p> 

 



<h1>IfcResourceSelect</h1>
                                
                                <h1>IfcRoot</h1>
                                
                                <p><span class="self-ref">IfcRoot</span> is the most abstract and root class for all IFC entity definitions that roots in the kernel or in subsequent layers of the IFC object model. It is therefore the common supertype of all IFC entities, beside those defined in an IFC resource schema. All entities that are subtypes of <span class="self-ref">IfcRoot</span> can be used independently, whereas resource schema entities, that are not subtypes of <span class="self-ref">IfcRoot</span>, are not supposed to be independent entities.</p>

<blockquote class="note">
NOTE&nbsp; View definitions and implementation agreement may impose additional restrictions on the use of the <i>OwnerHistory</i> to handle object versioning.
</blockquote>





<h1>IfcSimplePropertyTemplate</h1>
                                
                                <p>
      The <span class="self-ref">IfcSimplePropertyTemplate</span> defines the template
      for all dynamically extensible properties, either the
      subtypes of <strong>IfcSimpleProperty</strong>, or the subtypes of
      <strong>IfcPhysicalSimpleQuantity</strong>. The individual property
      templates are interpreted according to their <i>Name</i>
      attribute and may have a predefined template type, property
      units, and property measure types. The correct interpretation
      of the attributes:
    </p>
    <ul>
      <li>
        <i>PrimaryUnit</i>
      </li>
      <li>
        <i>SecondaryUnit</i>
      </li>
      <li>
        <i>PrimaryMeasureType</i>
      </li>
      <li>
        <i>SecondaryMeasureType</i>
      </li>
    </ul>
    <p>
      is determined by the <i>TemplateType</i>. The attributes
      Enumerators and Expression only apply to instances of
      <span class="self-ref">IfcSimplePropertyTemplate</span> having a particular
      <i>TemplateType</i>. The <i>TemplateType</i> also
      controls, which subtype of either <strong>IfcSimpleProperty</strong>
      or <strong>IfcPhysicalSimpleQuantity</strong> shall be used for
      property occurrences corresponding to this template.
    </p>
    

    <p class="use-head">
      Relationship use definition
    </p>
    <p>
      The <span class="self-ref">IfcSimplePropertyTemplate</span> is part of the set of
      templates included in the <strong>IfcPropertySetTemplate</strong>.
      The template can be accessed throught the inverse attribute
      <i>PartOfPsetTemplate</i> The
      <strong>IfcPropertySetTemplate</strong> may define one or several
      instances of <strong>IfcPropertySet</strong> (or
      <strong>IfcElementQuantity</strong>). The definition assignment is
      established by the objectified relationship
      <strong>IfcRelDefinesByTemplate</strong> as shown in 
    </p>
    <p>
      There is no direct link between an
      <span class="self-ref">IfcSimplePropertyTemplate</span> and a subtype of either
      <strong>IfcSimpleProperty</strong> or
      <strong>IfcPhysicalSimpleQuantity</strong>. The definition
      relationship between the template and the individual
      properties (or quantities) is established by the
      <i>Name</i> attributes.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Constraints at <strong>IfcPropertySetTemplate</strong> and
      <strong>IfcPropertySet</strong> (and <strong>IfcElementQuantity</strong>)
      guarantee that the <i>Name</i> attributes of included
      property templates and individual properties are unique.
    </blockquote>
    <table>
      <tr>
        <td>
          <img src="../../../figures/IfcSimplePropertyTemplate_fig-1.png"
          alt="IfcSimplePropertyTemplate 
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
      </tr>
    </table>
<h1>IfcSimplePropertyTemplateTypeEnum</h1>
                                
                                <h1>IfcSingleProjectInstance</h1>
                                
                                <h1>IfcTypeObject</h1>
                                
                                <p>The object type defines the
specific information about a type, being common to all
occurrences of this type. It refers to the specific level of the
well recognized <i>generic - specific - occurrance</i> modeling
paradigm. The <span class="self-ref">IfcTypeObject</span> gets assigned to the
individual object instances (the occurrences) via the
<strong>IfcRelDefinesByType</strong> relationship.</p>
<blockquote class="note">NOTE&nbsp; The terms 'Type' and 'Style' are often
used interchangeably.</blockquote>
<p>The object type is represented by a set of property set
definitions. The attached property sets describe the available
alpha-numeric information about the object type. and are used to
define all common properties that apply to all object occurrences
of that type.</p>
<blockquote class="note">NOTE&nbsp; If a property having having the same name
is used within the <strong>IfcPropertySet</strong> assigned to an
<span class="self-ref">IfcTypeObject</span> (and subtypes) and to an occurrence of that
type, then the occurrence property overrides the type property.
See <strong>IfcRelDefinesByType</strong> for an explanatory
figure.</blockquote>
<p>Object types may be exchanged without being already assigned
to objects. An object type may have an indication of the library
(or catalogue) from which its definition originates. This
association is handled by the inherited <i>HasAssociations</i>
relationship pointing to <strong>IfcRelAssociatesLibrary</strong>.</p>







<h1>IfcTypeProcess</h1>
                                
                                <p><span class="self-ref">IfcTypeProcess</span> defines a
specific (or type) definition of a process or activity without
being assigned to a schedule or a time.Â It is used to define a
process or activity specification, that is, the specific process or
activity information that is common to all occurrences that are
defined for that process or activity type.</p>

<p>An <span class="self-ref">IfcTypeProcess</span> may have a list of property set
attached. Values of these properties are common to all
occurrences of that process or activity type. The type occurrence
relationship is realized using the objectified relationship
<strong>IfcRelDefinesByType</strong>.</p>

<p>Subtypes of <span class="self-ref">IfcTypeProcess</span> may be exchanged without
being already assigned to subtypes of <strong>IfcProcess</strong>.</p>



<p class="use-head">Property set use definition</p>
<p>An <span class="self-ref">IfcTypeProcess</span> may have a list of property sets
attached, accessible by the attribute
<i>SELF\IfcTypeObject.HasPropertySets</i>. Currently there are no
predefined property sets defined as part of the IFC
specification.</p>

<blockquote class="note">
NOTE&nbsp; For property sets, a property within an
occurrence property set that is assigned at the process
occurrence, overrides the same property assigned to the process
type.
</blockquote>

<h1>IfcTypeProduct</h1>
                                
                                <p><span class="self-ref">IfcTypeProduct</span> defines a type definition of a product without being already inserted into a
project structure (without having a placement), and not being included in the geometric representation context of the
project.Â It is used to define a product specification, that is, the specific product information that is common to all occurrences
of that product type.</p>

<p>An <span class="self-ref">IfcTypeProduct</span> may have a list of property set attached and an optional set of product representations. Values of these properties and the representation maps are common to all occurrencesÂ of that product type.Â The type-occurrence relationship is realized using the objectified relationship
<strong>IfcRelDefinesByType</strong>.</p>

<blockquote class="note">
NOTE&nbsp; The product representations are defined as representation maps, which may be assigned by a product instance through the representation item(s) being an <strong>IfcShapeRepresentation</strong> and having <i>Items</i> of typeÂ <strong>IfcMappedItem</strong>.
</blockquote>

<p>The representations at the occurrence level (represented by subtypes of <strong>IfcProduct</strong>) can override the specific representations at the type level: </p>
<ul>
<li>for geometric representations, a Cartesian transformation operator can be applied at the occurrence level.</li>
<li>for property sets, a property within an occurrence property set, assigned at the product occurrence, overrides the same property assigned to the product type.</li>
</ul>

<p>An <span class="self-ref">IfcTypeProduct</span> may be exchanged without being
already assigned to subtypes of <strong>IfcProduct</strong>.</p>





<p class="use-head">Geometry use definition</p>
<p>The <i>RepresentationMaps</i> define the type product shape
and multiple geometric representations can be assigned. If a
product occurrence is assigned to the type by using the
<strong>IfcRelDefinesByType</strong> relationship, then these occurrences
have to reference the representation maps. The reference is
created by one or multiple <strong>IfcShapeRepresentation</strong>'s having
an <strong>IfcMappedItem</strong> as <i>Items</i>, that places the
<strong>IfcRepresentationMap</strong> of the type product into the spatial
contexts, i.e. by using an Cartesian transformation operator to
transform the <strong>IfcRepresentationMap</strong> into the object
coordinate system of the product occurrence.</p>

<p>
the shape representation of a product occurrence. Here the
Cartesian transformation operator only uses translation, but no
rotation, mirroring, or scaling.</p>

<table border="0" cellpadding="2" cellspacing="2" summary="representation map">
<tr><td valign="top"><img src="../../../figures/IfcTypeProduct_RepresentationMap-1.png" alt="representation map" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<p>
multiple times map by the shape representation of a product
occurrence. Here the Cartesian transformation operator only uses
translation, but no rotation, mirroring, or scaling. The
different translation values determine the pattern of the
multiple placement.</p>

<table border="0" cellpadding="2" cellspacing="2" summary="representation map">
<tr><td valign="top"><img src="../../../figures/IfcTypeProduct_RepresentationMap-2.png" alt="representation map" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcTypeResource</h1>
                                
                                <p><span class="self-ref">IfcTypeResource</span> defines a specific (or type) definition of a resource.Â It is used to define a resource specification (the specific resource, that is common to all occurrences that are defined for that resource) and could act as a resource template.</p>

<p>An <span class="self-ref">IfcTypeResource</span> may have a list of property sets attached. Values of these properties are common to all occurrences of that resource type. The type occurrence relationship is realized using the objectified relationship <strong>IfcRelDefinesByType</strong>.</p>

<p>Subtypes of <span class="self-ref">IfcTypeResource</span> may be exchanged without being already assigned to subtypes of <strong>IfcResource</strong>.</p>



<p class="use-head">Property set use definition</p>
<p>An <span class="self-ref">IfcTypeResource</span> may have a list of property sets attached, accessible by the attribute <i>SELF\IfcTypeObject.HasPropertySets</i>. Currently there are no predefined property sets defined as part of the IFC specification.</p>

<blockquote class="note">
NOTE&nbsp; For property sets, a property within an occurrence property set that is assigned at the resource occurrence, overrides the same property assigned to the resource type.
</blockquote>

<h1>IfcUniquePropertyName</h1>
                                
                                <h1>IfcUniquePropertyTemplateNames</h1>
                                
                                <h1>IfcCardinalPointReference</h1>
                                
                                <h1>IfcDirectionSenseEnum</h1>
                                
                                <h1>IfcLayerSetDirectionEnum</h1>
                                
                                <h1>IfcMaterial</h1>
                                
                                <p><span class="self-ref">IfcMaterial</span> is a homogeneous or inhomogeneous
substance that can be used to form elements (physical products or
their components).</p>
<p><span class="self-ref">IfcMaterial</span> is the basic entity for material
designation and definition; this includes identification by name
and classification (via reference to an external classification),
as well as association of material properties (isotropic or
anisotropic) defined by (subtypes of)
<strong>IfcMaterialProperties</strong>. An instance of <span class="self-ref">IfcMaterial</span>
may be associated to an element or element type using the
<strong>IfcRelAssociatesMaterial</strong> relationship. The assignment
might either be direct as a single material information, or
via</p>
<ul>
<li>a material layer set</li>
<li>a material profile set</li>
<li>a material constituent set</li>
</ul>
<p>An <span class="self-ref">IfcMaterial</span> may also have presentation information associated. Such presentation information is provided by
<strong>IfcMaterialDefinitionRepresentation</strong>, associating curve styles, hatching definitions or surface colouring/rendering
information to a material.</p>





<h1>IfcMaterialClassificationRelationship</h1>
                                
                                <p><span class="self-ref">IfcMaterialClassificationRelationship</span> is a relationship assigning classifications to materials.</p>






<h1>IfcMaterialConstituent</h1>
                                
                                <p><span class="self-ref">IfcMaterialConstituent</span> is a single and identifiable part of an element which is constructed of a number of part (one or more) each having an individual material. The association of the material constituent to the part is provided by a keyword as value of the <i>Name</i> attribute. In order to identify and distinguish the part of the shape representation to which the material constituent applies the <strong>IfcProductDefinitionShape</strong> of the element has to include instances of <strong>IfcShapeAspect</strong>, using the same keyword for their <i>Name</i> attribute. </p>

<blockquote class="note">NOTE&nbsp; See the "Material Use Definition" at the individual element to which an <strong>IfcMaterialConstituentSet</strong> may apply for a required or recommended definition of such keywords as value for <i>IfcMaterialConstituent.Name</i>.</blockquote>



<h1>IfcMaterialConstituentSet</h1>
                                
                                <p><span class="self-ref">IfcMaterialConstituentSet</span> is a collection of individual material constituents, each assigning a material to a part of an element. The parts are only identified by a keyword (as opposed to an <strong>IfcMaterialLayerSet</strong> or <strong>IfcMaterialProfileSet</strong> where each part has an individual shape parameter (layer thickness or layer profile).</p>

<blockquote class="example">EXAMPLE The different materials of a window
construction shall be provided for the window lining and the
window glazing. An <span class="self-ref">IfcMaterialConstituentSet</span> is assigned
to the window with two <strong>IfcMaterialConstituent</strong>'s, one with
the <i>Name</i> = 'Lining', one with the <i>Name</i> =
'Glazing'.</blockquote>
<blockquote class="note">NOTE&nbsp; See the "Material Use Definition" at the individual
element to which an <span class="self-ref">IfcMaterialConstituentSet</span> may apply
for a required or recommended definition of such
keywords.</blockquote>



<h1>IfcMaterialDefinition</h1>
                                
                                <p><span class="self-ref">IfcMaterialDefinition</span> is a general supertype for all
material related information items in IFC that have common
material related properties that may include association of
material with some shape parameters or assignments to identified
parts of a component.</p>
<p>There are three ways of assigning materials to a single component or
multiple components; they are characterized as:</p>
<ul>
<li>by layer - assigning a material to a layer with constant
thickness</li>
<li>by profile - assigning a material to a profile with a
constant of varying shape along an extrusion</li>
<li>by constituents - assigning a material to an identified part
of a component shape; the identification is by a keyword rather than 
by a shape parameter</li>
</ul>
<p>Each instantiable subtype of <span class="self-ref">IfcMaterialDefinition</span> may
have material properties assigned, or have an external
classification of its definition. It can be assigned to either a
subtype of <strong>IfcElement</strong>, or a subtype of
<strong>IfcElementType</strong> by using the objectified relationship
<strong>IfcRelAssociatesMaterial</strong>.</p>



<h1>IfcMaterialLayer</h1>
                                
                                <p><span class="self-ref">IfcMaterialLayer</span> is a single and identifiable part of an element which is constructed of a number of layers (one or more). Each <span class="self-ref">IfcMaterialLayer</span> has a constant thickness and is located relative to the referencing <strong>IfcMaterialLayerSet</strong> along the MlsBase.</p>

<blockquote class="example">EXAMPLE&nbsp; A cavity wall with brick masonry used with an air gap in between would be modeled using three
<span class="self-ref">IfcMaterialLayer</span>'s: [1] Brick, [2] Air gap, [3] Brick. The inner layer "Brick" would have a <i>Name</i> = "Brick", an
individual <i>LayerThickness</i>, and potentially a <i>Category</i> indicating it as "load bearing", and a
<i>Priority</i> that controls how this material layer interacts with other material layers in wall connections.</blockquote>

<p>The <span class="self-ref">IfcMaterialLayer</span> may have a material layer name which may differ from the <strong>IfcMaterial</strong> name referenced.</p>

<blockquote class="example">EXAMPLE&nbsp; The <span class="self-ref">IfcMaterialLayer</span> name of an insulation layer can be "Insulation", whereas the
<strong>IfcMaterial</strong> name is "polystyrene insulating boards".</blockquote>





<h1>IfcMaterialLayerSet</h1>
                                
                                <p>The <span class="self-ref">IfcMaterialLayerSet</span> is a designation by which materials of an element constructed of a number of material layers is known and through which the relative positioning of individual layers can be expressed.</p>

<p>The Material Layer Set Base (MlsBase) describes the imaginary axis along which the material layers are positioned.</p>
<ul>
 <li>In case of assigning the <span class="self-ref">IfcMaterialLayerSet</span> directly to an element or element type, the individual layers are stacked 
  according to their position within the list of <i>MaterialLayers</i> without providing information on how to spatially relate the 
  material layer information to the shape representation of the element or element type. </li>
 <li>In case of assigning the <span class="self-ref">IfcMaterialLayerSet</span>  through an <strong>IfcMaterialLayerSetUsage</strong> to an element, 
  the MlsBase is positioned along the reference axis or reference plane of the element.  An offset from the reference axis or plane to MlsBase is  
  supported by <strong>IfcMaterialLayerSetUsage</strong> which combines layers and an offset. Offsets from element edges are supported by the subtype  
  <strong>IfcMaterialLayerWithOffsets</strong>. The positive <i>LayerSetDirection</i> (MlsDirection) describes the direction by which the individual
  material layers are stacked. The <strong>IfcMaterialLayer</strong>'s are stacked with no gap. Gaps within a material layer set are expressed as layers by
  themselves.</li>
</ul>

<blockquote class="example">EXAMPLE A cavity brick wall would be modeled as <span class="self-ref">IfcMaterialLayerSet</span> consisting of three
<strong>IfcMaterialLayer</strong>'s: brick, air cavity and brick. The air gap is identified by the <i>IsVentilated</i> flag at
<strong>IfcMaterialLayer</strong>.</blockquote>





<p class="use-head">Attribute use definition</p>
<p>As shown in 
layer set base line (MlsBase), to which the start of the first
<strong>IfcMaterialLayer</strong> is aligned. The total thickness of a
layer set is calculated from the individual layer thicknesses, the
first layer starting from the MlsBase and following layers being
placed on top of the previous (no gaps or overlaps).</p>

<table>
<tr><td><img src="../../../figures/IfcMaterialLayerSet-01.png" alt="material layer set" border="0"></td></tr>
<tr><td><p class="figure">
</table>
<h1>IfcMaterialLayerSetUsage</h1>
                                
                                <p>The <span class="self-ref">IfcMaterialLayerSetUsage</span> determines the usage of <strong>IfcMaterialLayerSet</strong> in terms of its location and
orientation relative to the associated element geometry. The location of material layer set shall be compatible with the
building element geometry (that is, material layers shall fit inside the element geometry). The rules to ensure the compatibility 
depend on the type of the building element.</p>

<blockquote class="example">EXAMPLE&nbsp;Â For a cavity brick wall with shape representation SweptSolid, the <i>IfcMaterialLayerSet.TotalThickness</i> 
shall be equal to the wall thickness. Also the <i>OffsetFromReferenceLine</i> shall match the exact positions between the two shape representations
of <strong>IfcWallStandardCase</strong>, that is the <strong>IfcShapeRepresentation</strong>'s with <i>RepresentationIdentifier</i>="Axis" and
<i>RepresentationIdentifier</i>="Body".</blockquote>

<blockquote class="note">NOTE&nbsp;Â Model view definitions or implementer agreements may provide more instructions on matching between building element geometry and material layer set usage.</blockquote>

<p>The <span class="self-ref">IfcMaterialLayerSetUsage</span> is always assigned to an individual occurrence object (and only to relevant subtypes of
<strong>IfcElement</strong>). The <strong>IfcMaterialLayerSet</strong>, referenced by <i>ForLayerSet</i>, can however be shared among several occurrence
objects. If the element type is available (in other words, an instance of the relevant subtype of <strong>IfcElementType</strong> exists), then the
<strong>IfcMaterialLayerSet</strong> can be assigned to the element type. The assignment between aÂ subtype of <strong>IfcElement</strong> and the
<span class="self-ref">IfcMaterialLayerSetUsage</span> is handled by <strong>IfcRelAssociatesMaterial</strong>.</p>

<p class="use-head">Attribute use definition</p>
<p>The <span class="self-ref">IfcMaterialLayerSetUsage</span> is primarily intended to be associated with planar building elements having a constant
thickness. With further agreements on the interpretation of <i>LayerSetDirection</i>, the usage can be extended also to other
cases, for example to curved building elements, provided that the material layer thicknesses are constant.</p>

<p>Generally, an element may be layered in any of its primary directions, denoted by its x, y or z axis. The geometry use
definitions at eachÂ specific type of building element will determine the applicableÂ <i>LayerSetDirection</i>.</p>

<p>The following examples illustrate how the <span class="self-ref">IfcMaterialLayerSetUsage</span> attributes (<i>LayerSetDirection</i>, <i>DirectionSense</i>, 
<i>OffsetFromReferenceLine</i>) can be used in different cases. Normative material use definitions are documented at each element 
(how these shall be used).</p>

<p>

<blockquote class="example">EXAMPLE&nbsp; For a standard wall with extruded geometric representation (vertical extrusion), the layer set
direction will be perpendicular to extrusion direction, andÂ can be derived from the direction of the wall axis. With the<i>DirectionSense</i> (positive in this example) the individual <i>IfcMaterialLayers</i> are assigned consecutively right-to-left or left-to-right. For a curved wall, 
"direction denoting the wall thickness" can be derived from the direction of the wall axis, and it will remain perpendicular to the wall path. 
The <i>DirectionSense</i> applies as well.</blockquote>

<blockquote class="note">NOTE&nbsp; According to the <strong>IfcWallStandardCase</strong> material use definition the <i>LayerSetDirection</i> for
<strong>IfcWallStandardCase</strong> is always AXIS2 (that is, along the y-axis), as shown in this example.</small></blockquote>

<table>
<tr><td><img src="../../../figures/IfcMaterialLayerSetUsage_Wall-01.png" alt="Mls usage"border="0"></td></tr>
<tr><td><p class="figure">
</table>

<p>

<blockquote class="example">EXAMPLE&nbsp;Â For a slab with perpendicular extruded geometric representation, the <i>LayerSetDirection</i>
will coincide with the extrusion direction (in positive or negative sense). In this example, the material layer set base is
the extruded profile and consistent with the <i>IfcExtrudedAreaSolid.Position</i>,Â with the <i>DirectionSense</i> being positive, the
individual <i>IfcMaterialLayers</i> are built up from the base towards the positive z direction in this case.</blockquote>

<blockquote class="note">NOTE&nbsp;Â According to the <strong>IfcSlabStandardCase</strong> material use definition the <i>LayerSetDirection</i> for
<strong>IfcSlabStandardCase</strong> is always AXIS3 (that is, along the z-axis).</blockquote>

<table>
<tr><td><img src="../../../figures/IfcMaterialLayerSetUsage_Slab-01.png" alt="Mls usage" border="0" height="320" width="601"></td></tr>
<tr><td><p class="figure">
</table>

<p>

<blockquote class="example">EXAMPLE&nbsp;Â For a slab with non-perpendicular extruded geometric representation, the guidelines above apply as
well</small><small>. The material layer thickness and the <i>OffsetFromReferenceLine</i> are always measured
perpendicularly, even if the extrusion direction is not perpendicular. Therefore the total material layer thickness is
not equal to the extrusion depth of the geometry.</blockquote>

<table>
<tr><td><img src="../../../figures/IfcMaterialLayerSetUsage_RoofSlab-01.png" alt="Mls usage" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcMaterialLayerWithOffsets</h1>
                                
                                <p><span class="self-ref">IfcMaterialLayerWithOffsets</span> is a specialization of <strong>IfcMaterialLayer</strong> enabling definition
of offset values along edges (within the material layer set usage in parent layer set).</p>

<p>It defines the assignment of two offset values for a material
layer in its intended use within a material layer set. Offsets are
applied to the edges of layered elements (that is, in directions
perpendicular to the layer set direction). Offsets shall not be
used in layer set direction, that is, for modelling gaps (or overlaps)
between layers; gaps shall be modeled as layers with appropriate
material assignment for the void.</p>

<blockquote class="example">EXAMPLE &nbsp; At the top of a standard wall,
with shape representation SweptSolid, offset of a given layer can
be specified in the direction of the extrusion (positive Z axis),
applied at the start or end (extruded from bottom to top), and with
a positive (extending above extrusion) or negative (ending below
extrusion).<br>
<br>
Take a standard wall with the outer material layer for the
external isolation extending above extrusion by 100mm, but starting
at the same base height. In this case the following values are
set:
<ul>
<li><small><i>OffsetDirection</i> = .AXIS3.</small></li>
<li><small><i>OffsetValues[1]</i> = 0.0</small></li>
<li><small><i>OffsetValues[2]</i> = 100.0 (default unit assumed to
be mm)</blockquote>



<p class="spec-head">Informal Propositions:</p>
<ol>
 <li>The <i>OffsetDirection</i> shall not be identical to the <i>LayerSetDirection</i> of the corresponding <strong>IfcMaterialLayerSetUsage</strong>.</li>
 <li>The attribute ReferenceExtent shall be asserted at the corresponding <strong>IfcMaterialLayerSetUsage</strong>.</li>
</ol>

<p class="use-head">Attribute use definition</p>
<p>The <i>OffsetValues</i> and <i>OffsetDirection</i> correspond to the definitions <i>ReferenceExtent</i> and <i>LayerSetDirection</i> at the <strong>IfcMaterialLayerSetUsage</strong>. 

<table>
<tr><td><img src="../../../figures/IfcMaterialLayerWithOffsets_fig-1.png" width="600" height="600" alt="IfcMaterialLayerWithOffsets_fig-1"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcMaterialList</h1>
                                
                                <p><span class="self-ref">IfcMaterialList</span> is a list of the different materials
that are used in an element.</p>

<blockquote class="note">NOTE&nbsp; The class <span class="self-ref">IfcMaterialList</span> will normally be used where an element is described at a more abstract
level. For example, for an architectural specification writer, the only information that may be needed about a concrete column
is that it contains concrete, reinforcing steel and mild steel ligatures. It shall not be used for elements consisting of
material layers when the different layers can be defined and the class <strong>IfcMaterialLayerSet</strong> can be used. Also,
<span class="self-ref">IfcMaterialList</span> shall not be used for elements consisting of a single identifiable material (for example, to represent anisotropic
material).</blockquote>



<h1>IfcMaterialProfile</h1>
                                
                                <p><span class="self-ref">IfcMaterialProfile</span> is a single and identifiable cross section of an element which is constructed of a number of profiles (one or more).</p>

<blockquote class="note">NOTE&nbsp; In case of multiple <i>MaterialProfiles</i>, the relative positioning of individual profiles in <strong>IfcMaterialProfileSet</strong> are defined using the concept of <strong>IfcCompositeProfileDef</strong> in <i>IfcProfileResource</i> schema; otherwise, only one <i>MaterialProfile</i> is given and defined by an individual <strong>IfcProfileDef</strong> (subtype).</blockquote>




<h1>IfcMaterialProfileSet</h1>
                                
                                <p>The <span class="self-ref">IfcMaterialProfileSet</span> is a designation by which individual material(s) of a prismatic element (for example, beam or column) constructed of a single or multiple material profiles is known.</p>

<blockquote class="note">NOTE&nbsp; In case of multiple <i>MaterialProfiles</i>, the relative positioning of individual profiles in <span class="self-ref">IfcMaterialProfileSet</span> are defined using the concept of <strong>IfcCompositeProfileDef</strong> in <i>IfcProfileResource</i> schema; otherwise, only one <i>MaterialProfile</i> is given and defined by an individual <strong>IfcProfileDef</strong> (subtype).</blockquote>



<h1>IfcMaterialProfileSetUsage</h1>
                                
                                <p><span class="self-ref">IfcMaterialProfileSetUsage</span> determines the usage of <strong>IfcMaterialProfileSet</strong> in terms of its location relative to the associated element geometry. The location of a material profile set shall be compatible with the building element geometry (that is, material profiles shall fit inside the element geometry). The rules to ensure the compatibility depend on the type of the building element. For building elements with shape representations which are based on extruded solids, this is accomplished by referring to the identical profile definition in the shape model as in the material profile set.</p>

<blockquote class="note">NOTE&nbsp; Model view definitions or implementer agreements may provide more instructions on matching between building element geometry and material profile set usage.</blockquote>
<blockquote class="note">NOTE&nbsp; The referenced <strong>IfcMaterialProfileSet</strong> may represent a single material
profile, or a composite profile with two or more material profiles.</blockquote>



<h1>IfcMaterialProfileSetUsageTapering</h1>
                                
                                <p><span class="self-ref">IfcMaterialProfileSetUsageTapering</span> specifies dual material profile sets in association with tapered prismatic (beam- or column-like) elements.</p>



<p class="use-head">Usage with tapered building elements</p>
<p>The inherited attribute <i>ForProfileSet</i> specifies the
profile and material at the start of the member,
<i>ForProfileEndSet</i> at its end. Start and end correspond to
the extrusion direction in the shape model of the shape
representation of the element or element type.</p>
<p>Both material profile sets should refer to the same material,
that is, only differ with respect to their profiles.</p>

<p class="use-head">Usage with structural analysis curve members</p>
<p><span class="self-ref">IfcMaterialProfileSetUsageTapering</span> may be used with the
structural analysis idealization
(<strong>IfcStructuralCurveMember</strong>) of uniform members as well as
of tapered members.</p>
<p>In case of uniform members, <i>ForProfileSet</i> and
<i>ForProfileEndSet</i> refer to the same material profile set.
In case of tapered members, <i>ForProfileSet</i> specifies the
profile and material at the start of the member,
<i>ForProfileEndSet</i> at its end. Start and end correspond to
the edge direction in the topological representation of the curve
member.</p>

<h1>IfcMaterialProfileWithOffsets</h1>
                                
                                <p><span class="self-ref">IfcMaterialProfileWithOffsets</span> is a specialization of <strong>IfcMaterialProfile</strong> with additional longitudinal offsets .</p>

<p>Relative positions of <span class="self-ref">IfcMaterialProfileWithOffsets</span> in the longitudinal direction of an element can be defined giving offsets at the start at the end, or at start and end. This shall not be used for relative positions of individual profiles in the plane of profile definition, which is given in composite profile definition itself. Also, care should be taken especially when used with <strong>IfcMaterialProfileSetUsageTapering</strong> for correct start and end offset assignment.</p>



<h1>IfcMaterialProperties</h1>
                                
                                <p>
      The <span class="self-ref">IfcMaterialProperties</span> assigns a set of material properties to associated material definitions. The set may be
      identified by a <i>Name</i> and a <i>Description</i>. The <strong>IfcProperty</strong> (instantiable subtypes) is used to express
      the individual material properties by name, description, value and unit.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The set of material properties can be assigned to an individual <strong>IfcMaterial</strong>, a set or composite of
      materials (<strong>IfcMaterialConstituent</strong>, <strong>IfcMaterialConstituentSet</strong>), or set or individual
      material layer (<strong>IfcMaterialLayer</strong>, <strong>IfcMaterialLayerSet</strong>), or a set or individual
      material profile (<strong>IfcMaterialProfile</strong>, <strong>IfcMaterialProfileSet</strong>)
    </blockquote>
    
    
    <p>
      &nbsp;
    </p>
    <p class="use-head">
      Property use definitions
    </p>
    <p>
      The following sets of material property definitions are part
      of this IFC release. They are direct instantiations of
      <i>IfcProperties</i> with the <i>Name</i> attribute
      holding the property set name.
    </p>

<ul>
<li><b>(All Types)</b>
<ul class="inner">
<li><strong>Pset_MaterialCombustion</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialCommon</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialEnergy</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialFuel</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialHygroscopic</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialMechanical</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialOptical</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialThermal</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialWater</strong> (<strong>occurrence driven</strong>)</li>
</ul>
</li>
<li><b>Concrete</b>
<ul class="inner">
<li><strong>Pset_MaterialConcrete</strong> (<strong>occurrence driven</strong>)</li>
</ul>
</li>
<li><b>Steel</b>
<ul class="inner">
<li><strong>Pset_MaterialSteel</strong> (<strong>occurrence driven</strong>)</li>
</ul>
</li>
<li><b>Wood</b>
<ul class="inner">
<li><strong>Pset_MaterialWood</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialWoodBasedBeam</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_MaterialWoodBasedPanel</strong> (<strong>occurrence driven</strong>)</li>
</ul>
</li>
</ul>

<h1>IfcMaterialRelationship</h1>
                                
                                <p><span class="self-ref">IfcMaterialRelationship</span>  defines a relationship between part and whole in material definitions (as in composite materials). The parts, expressed by the set of <i>RelatedMaterials</i>, are material constituents of which a single material aggregate is composed.</p>



<h1>IfcMaterialSelect</h1>
                                
                                <h1>IfcMaterialUsageDefinition</h1>
                                
                                <p><span class="self-ref">IfcMaterialUsageDefinition</span> is a general supertype for all
material related information items in IFC that have occurrence
specific assignment parameters to assign a set of materials with
shape parameters to a reference geometry item of that
component.</p>
<p>There are two ways of assigning a set of materials with shape
parameters:</p>
<ul>
<li>a layer set to a reference curve - assigning a material layer
set with material layers having a sequence and thickness
parameter to a reference curve of an element - represented by the
'Axis' shape representation of that element</li>
<li>a profile set to a cardinal point - assigning a material
profile set with assigned profile geometry and insertion points
to a reference curve by an offset, called "cardinal point" - the
reference curve is represented by the 'Axis' shape representation
of that element</li>
</ul>
<p>Each instantiable subtype of <span class="self-ref">IfcMaterialUsageDefinition</span>
has to be assigned to a subtype of <strong>IfcElement</strong> by using the
objectified relationship <strong>IfcRelAssociatesMaterial</strong>; it is
only valid in conjunction with an element occurrence.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>It is illegal to assign a subtype of
<span class="self-ref">IfcMaterialUsageDefinition</span> to a subtype of
<strong>IfcElementType</strong>, it shall only be assigned to an element
occurrence.</li>
</ol>
<h1>IfcMlsTotalThickness</h1>
                                
                                <h1>IfcAbsorbedDoseMeasure</h1>
                                
                                <h1>IfcAccelerationMeasure</h1>
                                
                                <h1>IfcAmountOfSubstanceMeasure</h1>
                                
                                <h1>IfcAngularVelocityMeasure</h1>
                                
                                <h1>IfcAreaDensityMeasure</h1>
                                
                                <h1>IfcAreaMeasure</h1>
                                
                                <h1>IfcBoolean</h1>
                                
                                <h1>IfcComplexNumber</h1>
                                
                                <h1>IfcCompoundPlaneAngleMeasure</h1>
                                
                                <h1>IfcContextDependentMeasure</h1>
                                
                                <h1>IfcContextDependentUnit</h1>
                                
                                <h1>IfcConversionBasedUnit</h1>
                                
                                <p>An IfcConversionBasedUnit is used to define a unit that has a conversion rate to a base unit. To identify some commonly used conversion based units, the standard designations (case insensitive) for the <i>Name</i> attribute are indicated in Table 4.</p>
<p>&nbsp;</p>

<table>
<tr><td>
<table class="gridtable">
	<tr><th><i><b>Name</b></i></th>	<th><i><b>Description</b></i></th></tr>
	<tr><td>'inch'</td>		<td>Length measure equal to 25.4 mm</td></tr>
	<tr><td>'foot'</td>		<td>Length measure equal to 304.8 mm</td></tr>
	<tr><td>'yard'</td>		<td>Length measure equal to 914 mm</td></tr>
	<tr><td>'mile'</td>		<td>Length measure equal to 1609 m</td></tr>
	<tr><td>'square inch'</td>	<td>Area measure equal to 0.0006452 square meters</td></tr>
	<tr><td>'square foot'</td>	<td>Area measure equal to 0.09290 square meters</td></tr>
	<tr><td>'square yard'</td>	<td>Area measure equal to 0.83612736 square meters</td></tr>
	<tr><td>'acre'</td>		<td>Area measure equal to 4046.86 square meters</td></tr>
	<tr><td>'square mile'</td>	<td>Area measure equal to 2 588 881 square meters</td></tr>
	<tr><td>'cubic inch'</td>	<td>Volume measure equal to 0.00001639 cubic meters</td></tr>
	<tr><td>'cubic foot'</td>	<td>Volume measure equal to 0.02832 cubic meters</td></tr>
	<tr><td>'cubic yard'</td>	<td>Volume measure equal to 0.7636 cubic meters</td></tr>
	<tr><td>'litre'</td>		<td>Volume measure equal to 0.001 cubic meters</td></tr>
	<tr><td>'fluid ounce UK'</td>	<td>Volume measure equal to 0.0000284130625 cubic meters</td></tr>
	<tr><td>'fluid ounce US'</td>	<td>Volume measure equal to 0.00002957353 cubic meters</td></tr>
	<tr><td>'pint UK'</td>		<td>Volume measure equal to 0.000568 cubic meters</td></tr>
	<tr><td>'pint US'</td>		<td>Volume measure equal to 0.000473 cubic meters</td></tr>
	<tr><td>'gallon UK'</td>	<td>Volume measure equal to 0.004546 cubic meters</td></tr>
	<tr><td>'gallon US'</td>	<td>Volume measure equal to 0.003785 cubic meters</td></tr>
	<tr><td>'degree'</td>		<td>Angle measure equal to &pi;/180 rad</td></tr>
	<tr><td>'ounce'</td>		<td>Mass measure equal to 28.35 g</td></tr>
	<tr><td>'pound'</td>		<td>Mass measure equal to 0.454 kg</td></tr>
	<tr><td>'ton UK'</td>		<td>Mass measure equal to 1016.0469088 kg, also known as long ton, gross ton, shipper's ton</td></tr>
	<tr><td>'ton US'</td>		<td>Mass measure equal to 907.18474 kg, also known as short ton, net ton</td></tr>
	<tr><td>'lbf'</td>		<td>Force measure equal to 4.4482216153 N, pound-force</td></tr>
	<tr><td>'kip'</td>		<td>Force measure equal to 4448.2216153 N, kilopound-force</td></tr>
	<tr><td>'psi'</td>		<td>Pressure measure equal to 6894.7572932 Pa, pound-force per square inch</td></tr>
	<tr><td>'ksi'</td>		<td>Pressure measure equal to 6894757.2932 Pa, kilopound-force per square inch</td></tr>
	<tr><td>'minute'</td>		<td>Time measure equal to 60 s</td></tr>
	<tr><td>'hour'</td>		<td>Time measure equal to 3600 s</td></tr>
	<tr><td>'day'</td>		<td>Time measure equal to 86400 s</td></tr>
	<tr><td>'btu'</td>		<td>Energy measure equal to 1055.056 J, British Thermal Unit</td></tr>
</table>
</td></tr>
<tr><td><p class="table">Table 685 &mdash; Standard unit names</p></td></tr>
</table>

<blockquote class="example">EXAMPLE&nbsp; An inch is a converted unit. It is from the Imperial system, its name is "inch" and it can be related to the SI unit, millimetre, through a measure with unit whose value is 25.4 millimetre. A foot is also a converted unit. It is from the Imperial system, its name is "foot" and it can be related to an <strong>IfcSIUnit</strong>, millimetre, either directly or through the unit called "inch". Note that several US customary units differ from Imperial units (nonmetric English units) of the same name.</blockquote>


<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-41:1992<br>A conversion based unit is a unit that is defined based on a measure with unit.</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>conversion_based_unit</strong> defined in ISO
10303-41.</blockquote>







<h1>IfcConversionBasedUnitWithOffset</h1>
                                
                                <p><span class="self-ref">IfcConversionBasedUnitWithOffset</span> is a unit which is converted from another unit by applying a conversion factor and an offset.</p>



<p>Example: The temperature unit Fahrenheit is based on the temperature unit Kelvin as follows:</p>

<blockquote><i>f</i>&nbsp;=&nbsp;<i>k</i>&nbsp;&middot;&nbsp;1.8&nbsp;&ndash;&nbsp;459.67</blockquote>

<p>wherein <i>k</i> is an absolute temperature expressed in Kelvin and <i>f</i> is the same temperature in Fahrenheit.  The following entity instances provide Fahrenheit as a unit:</p>

<blockquote><code>
IfcConversionBasedUnitWithOffset(<br>
&nbsp;&nbsp;&nbsp;&nbsp;IfcDimensionalExponents(0, 0, 0, 0, 1, 0, 0),<br>
&nbsp;&nbsp;&nbsp;&nbsp;THERMODYNAMICTEMPERATUREUNIT,<br>
&nbsp;&nbsp;&nbsp;&nbsp;'Fahrenheit',<br>
&nbsp;&nbsp;&nbsp;&nbsp;IfcMeasureWithUnit(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IfcThermodynamicTemperatureMeasure(1.8),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IfcSiUnit(THERMODYNAMICTEMPERATUREUNIT, ?, KELVIN)),<br>
&nbsp;&nbsp;&nbsp;&nbsp;-459.67);
</code></blockquote>


<h1>IfcCorrectDimensions</h1>
                                
                                <h1>IfcCorrectUnitAssignment</h1>
                                
                                <h1>IfcCountMeasure</h1>
                                
                                <h1>IfcCurvatureMeasure</h1>
                                
                                <h1>IfcDeriveDimensionalExponents</h1>
                                
                                <h1>IfcDerivedMeasureValue</h1>
                                
                                <h1>IfcDerivedUnit</h1>
                                
                                <h1>IfcDerivedUnitElement</h1>
                                
                                <h1>IfcDerivedUnitEnum</h1>
                                
                                <h1>IfcDescriptiveMeasure</h1>
                                
                                <h1>IfcDimensionalExponents</h1>
                                
                                <h1>IfcDimensionsForSiUnit</h1>
                                
                                <h1>IfcDoseEquivalentMeasure</h1>
                                
                                <h1>IfcDynamicViscosityMeasure</h1>
                                
                                <h1>IfcElectricCapacitanceMeasure</h1>
                                
                                <h1>IfcElectricChargeMeasure</h1>
                                
                                <h1>IfcElectricConductanceMeasure</h1>
                                
                                <h1>IfcElectricCurrentMeasure</h1>
                                
                                <h1>IfcElectricResistanceMeasure</h1>
                                
                                <h1>IfcElectricVoltageMeasure</h1>
                                
                                <h1>IfcEnergyMeasure</h1>
                                
                                <h1>IfcForceMeasure</h1>
                                
                                <h1>IfcFrequencyMeasure</h1>
                                
                                <h1>IfcHeatFluxDensityMeasure</h1>
                                
                                <h1>IfcHeatingValueMeasure</h1>
                                
                                <h1>IfcIdentifier</h1>
                                
                                <h1>IfcIlluminanceMeasure</h1>
                                
                                <h1>IfcInductanceMeasure</h1>
                                
                                <h1>IfcInteger</h1>
                                
                                <h1>IfcIntegerCountRateMeasure</h1>
                                
                                <h1>IfcIonConcentrationMeasure</h1>
                                
                                <h1>IfcIsothermalMoistureCapacityMeasure</h1>
                                
                                <h1>IfcKinematicViscosityMeasure</h1>
                                
                                <h1>IfcLabel</h1>
                                
                                <h1>IfcLengthMeasure</h1>
                                
                                <h1>IfcLinearForceMeasure</h1>
                                
                                <h1>IfcLinearMomentMeasure</h1>
                                
                                <h1>IfcLinearStiffnessMeasure</h1>
                                
                                <h1>IfcLinearVelocityMeasure</h1>
                                
                                <h1>IfcLogical</h1>
                                
                                <h1>IfcLuminousFluxMeasure</h1>
                                
                                <h1>IfcLuminousIntensityDistributionMeasure</h1>
                                
                                <h1>IfcLuminousIntensityMeasure</h1>
                                
                                <h1>IfcMagneticFluxDensityMeasure</h1>
                                
                                <h1>IfcMagneticFluxMeasure</h1>
                                
                                <h1>IfcMassDensityMeasure</h1>
                                
                                <h1>IfcMassFlowRateMeasure</h1>
                                
                                <h1>IfcMassMeasure</h1>
                                
                                <h1>IfcMassPerLengthMeasure</h1>
                                
                                <h1>IfcMeasureValue</h1>
                                
                                <h1>IfcMeasureWithUnit</h1>
                                
                                <p><span class="self-ref">IfcMeasureWithUnit</span> has two usages:<br>
1. For representing measure value together with its unit on the entity type attribute level; thus
   overriding the IFC model global unit assignments.<br>
2. For conversion based unit to give the conversion rate and its base.
</p>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: measure_with_unit, please refer to ISO/IS 10303-41 for the final definition of the formal standard.
</blockquote>



<h1>IfcModulusOfElasticityMeasure</h1>
                                
                                <h1>IfcModulusOfLinearSubgradeReactionMeasure</h1>
                                
                                <h1>IfcModulusOfRotationalSubgradeReactionMeasure</h1>
                                
                                <h1>IfcModulusOfSubgradeReactionMeasure</h1>
                                
                                <h1>IfcMoistureDiffusivityMeasure</h1>
                                
                                <h1>IfcMolecularWeightMeasure</h1>
                                
                                <h1>IfcMomentOfInertiaMeasure</h1>
                                
                                <h1>IfcMonetaryMeasure</h1>
                                
                                <h1>IfcMonetaryUnit</h1>
                                
                                <p><span class="self-ref">IfcMonetaryUnit</span> is a unit to define currency for money.</p>






<h1>IfcNamedUnit</h1>
                                
                                <h1>IfcNonNegativeLengthMeasure</h1>
                                
                                <h1>IfcNormalisedRatioMeasure</h1>
                                
                                <h1>IfcNumericMeasure</h1>
                                
                                <h1>IfcParameterValue</h1>
                                
                                <h1>IfcPHMeasure</h1>
                                
                                <h1>IfcPlanarForceMeasure</h1>
                                
                                <h1>IfcPlaneAngleMeasure</h1>
                                
                                <h1>IfcPositiveLengthMeasure</h1>
                                
                                <h1>IfcPositivePlaneAngleMeasure</h1>
                                
                                <h1>IfcPositiveRatioMeasure</h1>
                                
                                <h1>IfcPowerMeasure</h1>
                                
                                <h1>IfcPressureMeasure</h1>
                                
                                <h1>IfcRadioActivityMeasure</h1>
                                
                                <h1>IfcRatioMeasure</h1>
                                
                                <h1>IfcReal</h1>
                                
                                <h1>IfcRotationalFrequencyMeasure</h1>
                                
                                <h1>IfcRotationalMassMeasure</h1>
                                
                                <h1>IfcRotationalStiffnessMeasure</h1>
                                
                                <h1>IfcSectionalAreaIntegralMeasure</h1>
                                
                                <h1>IfcSectionModulusMeasure</h1>
                                
                                <h1>IfcShearModulusMeasure</h1>
                                
                                <h1>IfcSimpleValue</h1>
                                
                                <h1>IfcSIPrefix</h1>
                                
                                <h1>IfcSIUnit</h1>
                                
                                <p>The <span class="self-ref">IfcSIUnit</span> covers both standard base SI units such as meter and second, and derived SI units such as Pascal, square meter and cubic meter.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-41:1992<br>
An SI unit is the fixed quantity used as a standard in terms of which items are measured as defined by ISO 1000 (clause 2).</blockquote>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: si_unit, please refer to ISO/IS 10303-41 for the final definition of the formal standard.
</blockquote>



<h1>IfcSIUnitName</h1>
                                
                                <h1>IfcSolidAngleMeasure</h1>
                                
                                <h1>IfcSoundPowerLevelMeasure</h1>
                                
                                <h1>IfcSoundPowerMeasure</h1>
                                
                                <h1>IfcSoundPressureLevelMeasure</h1>
                                
                                <h1>IfcSoundPressureMeasure</h1>
                                
                                <h1>IfcSpecificHeatCapacityMeasure</h1>
                                
                                <h1>IfcTemperatureGradientMeasure</h1>
                                
                                <h1>IfcTemperatureRateOfChangeMeasure</h1>
                                
                                <h1>IfcText</h1>
                                
                                <h1>IfcThermalAdmittanceMeasure</h1>
                                
                                <h1>IfcThermalConductivityMeasure</h1>
                                
                                <h1>IfcThermalExpansionCoefficientMeasure</h1>
                                
                                <h1>IfcThermalResistanceMeasure</h1>
                                
                                <h1>IfcThermalTransmittanceMeasure</h1>
                                
                                <h1>IfcThermodynamicTemperatureMeasure</h1>
                                
                                <h1>IfcTimeMeasure</h1>
                                
                                <h1>IfcTorqueMeasure</h1>
                                
                                <h1>IfcUnit</h1>
                                
                                <h1>IfcUnitAssignment</h1>
                                
                                <p><span class="self-ref">IfcUnitAssignment</span> indicates a set of units which may be assigned. Within an <i>IfcUnitAssigment</i> each unit definition shall be unique; that is, there shall be no redundant unit definitions for the same unit type such as length unit or area unit. For currencies, there shall be only a single <strong>IfcMonetaryUnit</strong> within an <span class="self-ref">IfcUnitAssignment</span>.</p>

<blockquote class="note">
NOTE&nbsp; A <strong>IfcProject</strong> has a unit assignment which establishes a set of units which will be used globally within the project, if not otherwise defined. Other objects may have local unit assignments if there is a requirement for them to make use of units which do not fall within the project unit assignment.
</blockquote>



<h1>IfcUnitEnum</h1>
                                
                                <h1>IfcValue</h1>
                                
                                <h1>IfcVaporPermeabilityMeasure</h1>
                                
                                <h1>IfcVolumeMeasure</h1>
                                
                                <h1>IfcVolumetricFlowRateMeasure</h1>
                                
                                <h1>IfcWarpingConstantMeasure</h1>
                                
                                <h1>IfcWarpingMomentMeasure</h1>
                                
                                <h1>IfcFireSuppressionTerminal</h1>
                                
                                <p>A fire suppression terminal has the purpose of delivering a fluid (gas or liquid) that will suppress a fire.</p>
<p>A fire suppression terminal provides for all forms of sprinkler, spreader and other form of terminal that is connected to a pipework system and intended to act in the role of suppressing a fire.</p> 
 
<blockquote class="note"></blockquote><h1>IfcFireSuppressionTerminalType</h1>
                                
                                <p>The flow terminal type <b>IfcFireSuppressionTerminalType</b> defines commonly shared information for occurrences of fire suppression terminals. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a fire suppression terminal type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFireSuppressionTerminalType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFireSuppressionTerminalType</b> are represented by instances of <strong>IfcFireSuppressionTerminal</strong>. 
Refer to the documentation at <strong>IfcFireSuppressionTerminal</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcFireSuppressionTerminalTypeEnum</h1>
                                
                                <h1>IfcInterceptor</h1>
                                
                                <p>An interceptor is a device designed and installed in order to separate and retain deleterious, hazardous or undesirable matter while permitting normal sewage or liquids to discharge into a collection system by gravity.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcInterceptorType</h1>
                                
                                <p>The flow treatment device type <b>IfcInterceptorType</b> defines commonly shared information for occurrences of interceptors. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a interceptor type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcInterceptorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcInterceptorType</b> are represented by instances of <strong>IfcInterceptor</strong>. 
Refer to the documentation at <strong>IfcInterceptor</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcInterceptorTypeEnum</h1>
                                
                                <h1>IfcSanitaryTerminal</h1>
                                
                                <p>A sanitary terminal is a fixed appliance or terminal usually supplied with water and used for drinking, cleaning or foul water disposal or that is an item of equipment directly used with such an appliance or terminal.</p> 
 
<blockquote class="note"></blockquote><h1>IfcSanitaryTerminalType</h1>
                                
                                <p>The flow terminal type <b>IfcSanitaryTerminalType</b> defines commonly shared information for occurrences of sanitary terminals. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a sanitary terminal type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSanitaryTerminalType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSanitaryTerminalType</b> are represented by instances of <strong>IfcSanitaryTerminal</strong>. 
Refer to the documentation at <strong>IfcSanitaryTerminal</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcSanitaryTerminalTypeEnum</h1>
                                
                                <h1>IfcStackTerminal</h1>
                                
                                <p>A stack terminal is placed at the top of a ventilating stack (such as to prevent ingress by birds or rainwater) or rainwater pipe (to act as a collector or hopper for discharge from guttering).</p> 
 
<blockquote class="note"></blockquote><h1>IfcStackTerminalType</h1>
                                
                                <p>The flow terminal type <b>IfcStackTerminalType</b> defines commonly shared information for occurrences of stack terminals. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a stack terminal type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcStackTerminalType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcStackTerminalType</b> are represented by instances of <strong>IfcStackTerminal</strong>. 
Refer to the documentation at <strong>IfcStackTerminal</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcStackTerminalTypeEnum</h1>
                                
                                <h1>IfcWasteTerminal</h1>
                                
                                <p>A waste terminal has the purpose of collecting or intercepting waste from one or more sanitary terminals or other fluid waste generating equipment and discharging it into a single waste/drainage system.</p>
<p>A waste terminal provides for all forms of trap and waste point that collects discharge from a sanitary terminal and discharges it into a waste/drainage subsystem or that collects waste from several terminals and passes it into a single waste/drainage subsystem. This includes the P and S traps from soil sanitary terminals, sinks, and basins as well as floor wastes and gully traps that provide collection points.</p> 
 
<blockquote class="note"></blockquote>
<h1>IfcWasteTerminalType</h1>
                                
                                <p>The flow terminal type <b>IfcWasteTerminalType</b> defines commonly shared information for occurrences of waste terminals. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a waste terminal type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcWasteTerminalType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcWasteTerminalType</b> are represented by instances of <strong>IfcWasteTerminal</strong>. 
Refer to the documentation at <strong>IfcWasteTerminal</strong> for supported property sets, materials, composition, and ports.</p>


<h1>IfcWasteTerminalTypeEnum</h1>
                                
                                <h1>IfcBlobTexture</h1>
                                
                                <p>An <span class="self-ref">IfcBlobTexture</span> provides a 2-dimensional distribution of the lighting parameters of a surface onto which it is mapped. The texture itself is given as a single binary blob, representing the content of a pixel format file. The file format of the pixel file is given by the <i>RasterFormat</i> attribute and allowable formats are guided by where rule <i>SupportedRasterFormat</i>.</p>

<blockquote class="note">
NOTE&nbsp; Toolbox specific implementations of the binary datatype may restrict the maximum length of the binary blob to capture the raster file content.
</blockquote>

<p>For interpretation of the texture nodes see <strong>IfcImageTexture</strong> definition.</p>





<h1>IfcColour</h1>
                                
                                <h1>IfcColourOrFactor</h1>
                                
                                <h1>IfcColourRgb</h1>
                                
                                <h1>IfcColourRgbList</h1>
                                
                                <p>
      The <span class="self-ref">IfcColourRgbList</span> defines an ordered collection
      of RGB colour values. Each colour value is a fixed list of
      three colour components (red, green, blue). The attribute
      <i>ColourList</i> is a two-dimensional list, where
    </p>
    <ul>
      <li>first dimension is an unbounded list representing each
      colour value;
      </li>
      <li>second dimension is a fixed list of three list members,
      where [1] is the red component, [2] the green component, and
      [3] the blue component.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The <span class="self-ref">IfcColourRgbList</span> is introduced to
      provide a compact representation of an indexable
      representation of colours for texture maps in tessellated
      items.
    </blockquote>
    
  <h1>IfcColourSpecification</h1>
                                
                                <h1>IfcCorrectFillAreaStyle</h1>
                                
                                <h1>IfcCurveFontOrScaledCurveFontSelect</h1>
                                
                                <h1>IfcCurveStyle</h1>
                                
                                <p>An <span class="self-ref">IfcCurveStyle</span> provides the style table for presentation information assigned to geometric curves. The style is defined by a color, a font and a width. The <span class="self-ref">IfcCurveStyle</span> defines curve patterns as model patterns, that is, the distance between visible and invisible segments of curve patterns are given in model space dimensions (that have to be scaled using the target plot scale).</p>

<p>Styles are intended to be shared by multiple <strong>IfcStyledItem</strong>'s, assigning the style to occurrences of (subtypes of) <strong>IfcGeometricRepresentationItem</strong>'s. Measures given to a font pattern or a curve width are given in global drawing length units.</p>

<blockquote class="note">
NOTE&nbsp; global units are defined at the single <strong>IfcProject</strong> instance, given by <i>UnitsInContext:IfcUnitAssignment</i>, the same units are used for the geometric representation items and for the style definitions.
</blockquote>

<p>The measure values for font pattern and curve width apply to the model space with a target plot scale provided for the correct appearance in the default plot scale.. For different scale and projection dependent curve styles a different instance of <span class="self-ref">IfcCurveStyle</span> needs to be used by <strong>IfcPresentationStyleAssignment</strong> for different <strong>IfcGeometricRepresentationSubContext</strong> dependent representations.</p>

<blockquote class="note">NOTE&nbsp; the target plot scale is given by <i>IfcGeometricRepresentationSubContext.TargetScale</i>.
</blockquote>

<p>An <span class="self-ref">IfcCurveStyle</span> can be assigned to <strong>IfcGeometricRepresentationItem</strong>'s via the <strong>IfcPresentationStyleAssignment</strong> through an intermediate <strong>IfcStyledItem</strong> or <i>IfcAnnotationCurveOccurrence</i>.</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-46:1992<br>
A curve style specifies the visual appearance of curves.</blockquote>
<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: curve_style. Please refer to ISO/IS 10303-46:1994 for the final definition of the formal standard.
</blockquote>



<h1>IfcCurveStyleFont</h1>
                                
                                <h1>IfcCurveStyleFontAndScaling</h1>
                                
                                <p>The <span class="self-ref">IfcCurveStyleFontAndScaling</span> allows for the reuse of the same curve style definition in several sizes. The definition of the <i>CurveFontScale</i> is the scaling of a base curve style pattern to be used as a new or derived curve style pattern.</p>

<blockquote class="note">
NOTE&nbsp; The <i>CurveFontScale</i> should not be mixed up with the target plot scale.
</blockquote>

<p>An example for <span class="self-ref">IfcCurveStyleFontAndScaling</span> is the sizing of a basic curve style dash pattern 'dash' (visible 0.01m, invisible 0.005m) into 'dash large' with&nbsp;<i>CurveFontScale</i> = 2 (resulting in&nbsp;visible 0.02m, invisible 0.01m), and into 'dash small'&nbsp;with&nbsp;<i>CurveFontScale</i> = 0.5 (resulting in&nbsp;visible 0.005m, invisible 0.0025m).</p>

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-46:1992<br>
A curve style font and scaling is a curve style font and a scalar factor for that font, so that a given curve style font may be applied at various scales.</blockquote>
<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: curve_style_font_and_scaling. Please refer to ISO/IS 10303-46:1994 for the final definition of the formal standard.
</blockquote>



<h1>IfcCurveStyleFontPattern</h1>
                                
                                <h1>IfcCurveStyleFontSelect</h1>
                                
                                <h1>IfcDraughtingPreDefinedColour</h1>
                                
                                <p>The draughting pre defined colour is a pre defined colour for the purpose to identify a colour by name. Allowable names are:</p>
<ul>
<li>'black',</li>
<li>'red',</li>
<li>'green',</li>
<li>'blue',</li>
<li>'yellow',</li>
<li>'magenta',</li>
<li>'cyan',</li>
<li>'white',</li>
<li>'by layer'</li>
</ul>

<blockquote class="note">
NOTE&nbsp;Â The <span class="self-ref">IfcDraughtingPreDefinedColour</span> is an entity that had been adopted from ISO 10303-202, Industrial automation systems and integration&mdash;Product data representation and exchange, Part 202: Application protocol: Associative draughting.
</blockquote>

<p>The following table states the RGB values associated with the names given by the <i>IfcDraughtingPreDefinedColour.</i></p>
<blockquote>
<table>
<tbody>
<tr>
<td><b>Colour name</b></td>
<td align="center"><b>Red</b></td>
<td align="center"><b>Green</b></td>
<td align="center"><b>Blue</b></td>
</tr>
<tr>
<td>black</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td>red</td>
<td align="center">1.0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td>green</td>
<td align="center">0</td>
<td align="center">1.0</td>
<td align="center">0</td>
</tr>
<tr>
<td>blue</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1.0</td>
</tr>
<tr>
<td>yellow</td>
<td align="center">1.0</td>
<td align="center">1.0</td>
<td align="center">0</td>
</tr>
<tr>
<td>magenta</td>
<td align="center">1.0</td>
<td align="center">0</td>
<td align="center">1.0</td>
</tr>
<tr>
<td>cyan</td>
<td align="center">0</td>
<td align="center">1.0</td>
<td align="center">1.0</td>
</tr>
<tr>
<td>white</td>
<td align="center">1.0</td>
<td align="center">1.0</td>
<td align="center">1.0</td>
</tr>
<tr valign="top">
<td>by layer</td>
<td align="left" colspan="3">colour values obtained from<br>
<strong>IfcPresentationLayerWithStyle</strong>.</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</blockquote>

<blockquote class="note">
NOTE&nbsp;Â Corresponding ISO 10303 name: draughting_pre_defined_colour. Please refer to ISO/IS 10303-202:1994 page 194 for the final definition of the formal standard.
</blockquote>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The value 'by layer' shall only be inserted, if the geometric representation item using the colour definition has an association to <strong>IfcPresentationLayerWithStyle</strong>, and if that instance of <strong>IfcPresentationLayerWithStyle</strong> has a valid colour definition for <strong>IfcCurveStyle</strong>, <i>IfcSymbolStyle</i>, or <strong>IfcSurfaceStyle</strong> (depending on what is applicable).</li>
</ol>

<h1>IfcDraughtingPreDefinedCurveFont</h1>
                                
                                <p>The draughting predefined curve font type defines a selection of widely used curve fonts for draughting purposes by name.</p> 

<blockquote class="note"> 
NOTE&nbsp; The <span class="self-ref">IfcDraughtingPreDefinedCurveFont</span> is an entity that had been adopted from ISO 10303, Industrial automation systems and integration&#151;Product data representation and exchange, Part 46 Technical Corrigendum 2: Integrated generic resources: Visual presentation.
</blockquote> 

<p>
<table>
<tr><td><img src="../../../figures/IfcDraughtingPreDefinedCurveFont_Fig1.gif" alt="predefined fonts" width="550" height="330" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<blockquote class="note">
NOTE&nbsp; If the <span class="self-ref">IfcDraughtingPreDefinedCurveFont</span> is used within an <strong>IfcCurveStyleFontAndScaling</strong> then the segment and space lengths that are given in the table are as such for the scale factor 1.0
</blockquote> 

<blockquote class="note"> 
NOTE&nbsp; Corresponding ISO 10303 name: pre_defined_curve_font. Please refer to ISO/IS 10303-46:1994 TC2, page 12 for the final definition of the formal standard.
</blockquote>



<h1>IfcExternallyDefinedHatchStyle</h1>
                                
                                <h1>IfcExternallyDefinedSurfaceStyle</h1>
                                
                                <p><span class="self-ref">IfcExternallyDefinedSurfaceStyle</span> is a definition of a surface style through referencing an external source, such as a material library for rendering information.</p>

<blockquote class="note">
NOTE&nbsp; In order to achieve expected results, the externally defined surface style should normally only be given in addition to an explicitly defined surface styles.
</blockquote>



 

<h1>IfcExternallyDefinedTextFont</h1>
                                
                                <h1>IfcFillAreaStyle</h1>
                                
                                <p>An <span class="self-ref">IfcFillAreaStyle</span> provides the style table for presentation information assigned to annotation fill areas or surfaces for hatching and tiling. The <i>IfcFillAreaStyle </i>defines hatches as model hatches, that is, the distance between hatch lines, or the curve patterns of hatch lines are given in model space dimensions (that have to be scaled using the target plot scale). The <span class="self-ref">IfcFillAreaStyle</span> allows for the following combinations of defining the style of hatching and tiling:</p>

<ul>
<li>Solid fill for areas and surfaces by only assigning <strong>IfcColour</strong> to the set of <i>FillStyles</i>. It then provides the background colour for the filled area or surface.</li>
</ul>

<blockquote class="note">NOTE&nbsp; Color information of surfaces for rendering is assigned by using <strong>IfcSurfaceStyle</strong>, not by using <span class="self-ref">IfcFillAreaStyle</span>.</blockquote>

<ul> 
<li>Vector based hatching for areas and surfaces based on a single row of hatch lines by assigning a single instance of <strong>IfcFillAreaStyleHatching</strong> to the set of <i>FillStyles</i>.</li> <ul> <li>If an instance of <strong>IfcColour</strong> is assigned in addition to the set of <i>FillStyles</i>, it provides the background colour for the hatching.</li> </ul> <li>Vector based hatching for areas and surfaces based on two (potentially crossing) rows of hatch lines by assigning two instances of <strong>IfcFillAreaStyleHatching</strong> to the set of <i>FillStyles.</i></li> 

<ul> <li>If an instance of <strong>IfcColour</strong> is assigned in addition to the set of <i>FillStyles</i>, it provides the background colour for the hatching.</li> </ul>
</ul>

<blockquote> <blockquote class="note">
NOTE&nbsp; Assigning more then two instances of <strong>IfcFillAreaStyleHatching</strong> to define three or more rows of hatch lines is not encouraged.
</blockquote> </blockquote>

<ul>
<li>Tiling for areas and surfaces by assigning a single instance of <strong>IfcFillAreaStyleTiles</strong> to the set of <i>FillStyles</i>.</li> <ul> <li>If an instance of <strong>IfcColour</strong> is assigned in addition to the set of <i>FillStyles</i>, it provides the background colour for the tiling.</li> </ul>
</ul>

<ul>
<li>Externally defined hatch style by assigning a single instance of <strong>IfcExternallyDefinedHatchStyle</strong> to the set of <i>FillStyles</i>. 
  <ul><li>If an instance of <strong>IfcColour</strong> is assigned in addition to the set of <i>FillStyles</i>, it provides the background colour for the hatching.</li></ul>
</li>
</ul>

<p>Measures given to a hatch or tile pattern are given in global drawing length units.</p>

<blockquote class="note">
NOTE&nbsp; Global units are defined at the single <strong>IfcProject</strong> instance, given by <i>UnitsInContext:IfcUnitAssignment</i>, the same units are used for the geometric representation items and for the style definitions.
</blockquote>

<p>The measure values for hatch or tile pattern apply to the model space with a target plot scale provided for the correct appearance in the default plot scale. For different scale and projection dependent fill area styles a different instance of <span class="self-ref">IfcFillAreaStyle</span> needs to be used by <strong>IfcPresentationStyleAssignment</strong> for different <strong>IfcGeometricRepresentationSubContext</strong> dependent representations.</p>

<blockquote class="note">
NOTE&nbsp; the target plot scale is given by <i>IfcGeometricRepresentationSubContext.TargetScale</i>.
</blockquote>

<p>An <span class="self-ref">IfcFillAreaStyle</span> can be assigned to <i>IfcFillArea</i> via the <strong>IfcPresentationStyleAssignment</strong> through an intermediate <strong>IfcStyledItem</strong> or subtype <i>IfcAnnotationFillAreaOccurrence</i>.</p>


<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-46:1992<br>
The style for filling visible curve segments, annotation fill areas or surfaces with tiles or hatches.</blockquote>
<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: fill_area_style. Please refer to ISO/IS 10303-46:1994 for the final definition of the formal standard.
</blockquote>


<blockquote class="deprecated">
DEPRECATION&nbsp; The use of IfcFillAreaStyleTiles is deprecated, as its definition might change is future releases.
</blockquote>

<h1>IfcFillAreaStyleHatching</h1>
                                
                                <p>The <span class="self-ref">IfcFillAreaStyleHatching</span> is used to define simple, vector-based hatching patterns, based on styled straight lines. The curve font, color and
thickness is given by the <i>HatchLineAppearance</i>, the angle by the <i>HatchLineAngle</i> and the distance to the next hatch line by
<i>StartOfNextHatchLine</i>, being either an offset distance or a vector.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 10303-46:<br> The fill area style hatching defines a styled pattern of curves for hatching an
annotation fill area or a surface.</blockquote>
<blockquote class="note">NOTE&nbsp; If the hatch pattern involves two (potentially crossing) rows of hatch lines, then two instances of
<span class="self-ref">IfcFillAreaStyleHatching</span> should be assigned to the <strong>IfcFillAreaStyle</strong>. Both share the same (virtual) point of origin of the
hatching that is used by the reference hatch line (or the <i>PointOfReferenceHatchLine</i> if there is an offset).</blockquote>
<p>For better control of the hatching appearance, when using hatch lines with other fonts then continuous, the <i>PatternStart</i> allows to offset the
start of the curve font pattern along the reference hatch line (if not given, the <i>PatternStart</i> is at zero distance from the virtual point of
origin). If the reference hatch line does not go through the origin (of the virtual hatching coordinate system), it can be offset by using the
<i>PatternStart</i> .</p>
<blockquote class="note">NOTE&nbsp; The coordinates of the <i>PatternStart</i> are given relative to the origin of the object coordinate
of <strong>IfcAnnotationFillArea</strong>, or if present, the <i>FillAreaTarget</i> attribute of <strong>IfcAnnotationFillArea</strong>. The measure values are given in
global drawing length units, representing a model hatching, and can be translated into drawing units by the <i>TargetScale</i> for a scale depended
<i>IfcGeometricRepresentationSubcontext</i>, if provided.</blockquote>
<blockquote class="deprecated">DEPRECATION&nbsp; The use of <i>PointOfReferenceHatchLine</i> is deprecated.</blockquote>
<p><small>
<table>
<tr>
<td>
<table border="0" cellpadding="2" cellspacing="2" width="100%">
<tbody>
<tr>
<td align="left" valign="top" width="280"><img src="../../../figures/IfcFillAreaStyleHatching_Fig1.gif" alt="hatch example 1"></td>
<td align="left" valign="top"><small><u>Example 1</u><br>
This example shows simple hatching given by using a curve font "continuous" at <i>HatchLineAppearance</i>.<br>
<br>
The distance of hatch lines is given by a positive length measure. The angle (here 45' if measures in degree) is provided by <i>HatchLineAngle</i>.<br>
<br>
The <i>PatternStart</i> is set to NIL ($) in this example.</small></td>
<td align="left" valign="top" width="280"> <img src="../../../figures/IfcFillAreaStyleHatching_Fig2.gif" alt="hatch example 2"></td>
<td align="left" valign="top"><small><u>Example 2</u><br>
This shows hatching from example 1 with using a different curve font at <i>HatchLineAppearance</i>.<br>
<br></small> <small>The distance of hatch lines is given by a positive length
measure, therefore the font pattern start is at a point at the next hatch line
given by a vector being perpendicular to the point of origin at the reference
hatch line.<br>
<br></small> <small>The <i>PatternStart</i> is set to NIL ($) in this
example.</small></td>
</tr>
<tr>
<td width="280"><img src="../../../figures/IfcFillAreaStyleHatching_Fig3.gif" alt="hatch example 3"></td>
<td align="left" valign="top"><small><u>Example 3</u><br>
This example uses hatching from example 2 with a vector to determine the pattern start of the next hatch lines.<br>
<br>
The pattern start is the beginning of the first visual curve font pattern segment at <i>IfcCurveFont.CurveFont</i>.<br>
<br></small> <small>The <i>PatternStart</i> is set to NIL ($) in this
example.</small><br></td>
<td width="280"><img src="../../../figures/IfcFillAreaStyleHatching_Fig4.gif" alt="hatch example 4"></td>
<td align="left" valign="top"><small><u>Example 4</u><br>
This example uses hatching from example 3 where the pattern start is offset
from the point of origin at the reference hatch line. That is, the first
visible curve font pattern segment now does not start at the point of origin at
the reference hatch line.</small><br>
<small><br></small></td>
</tr>
<tr>
<td><img src="../../../figures/IfcFillAreaStyleHatching_Fig5.gif" alt="hatch example 5"></td>
<td align="left" valign="top"><small><u>Example 5</u><br>
This example uses hatching from example 4 where the hatch pattern is shifted
against the underlying coordinate system.<br>
<br>
The point that is mapped to the insertion point of the
<i>IfcAnnotationFillAreaOccurrence</i> now has an X and Y offset from the
start of the reference hatch line. That is, the reference hatch line now does
not go through the insertion point of the hatching.<br>
<br>
<br>
<br></small></td>
<td valign="top"><img src="../../../figures/IfcFillAreaStyleHatching_Fig6.gif" alt="fig 6"></td>
<td valign="top"><small><u>Example 6</u><br>
This example shows use of <span class="self-ref">IfcFillAreaStyleHatching</span> attributes for two <span class="self-ref">IfcFillAreaStyleHatching</span>'s within one <strong>IfcFillAreaStyle</strong>.<br>
<br>
Note that the <i>PatternStart</i> now displaces both the reference hatch line from the point of origin and the start of the curve pattern. This can be used
in cases when more than one <span class="self-ref">IfcFillAreaStyleHatching</span> is used in an <strong>IfcFillAreaStyle</strong> in order to place rows of hatch lines with an offset
from each other.</small></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>fill_area_style_hatching</strong> defined in ISO10303-46</blockquote>



<h1>IfcFillAreaStyleTiles</h1>
                                
                                <p>The <span class="self-ref">IfcFillAreaStyleTiles</span> defines the filling of an
<strong>IfcAnnotationFillArea</strong> by recurring patterns of styled two dimensional
geometry, called a tile. The recurrence pattern is determined by two vectors,
that multiply the tile in regular form.</p>
<p>The two vectors act as a two dimensional repeat factor that determins eight
new positions for the tiles.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 10303-46:<br>
The fill area style tiles defines a two dimensional tile to be used for the
filling of annotation fill areas or other closed regions. The content of a tile
is defined by the tile set, and the placement of each tile determined by the
filling pattern which indicates how to place tiles next to each other. Tiles or
parts of tiles outside of the annotation fill area or closed region shall be
clipped at the of the area or region.</blockquote>
<blockquote class="extDef">
<p style="font-size:inherit"><i>I + k<sub>1</sub>* R<sub>1</sub> +
k<sub>2</sub>* R<sub>2</sub></i>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>k<sub>1</sub>,k<sub>2</sub></i>= -1,0,1 ,
<img src="../../../figures/IfcFillAreaStyleTileSymbolWithStyle_Fig1.gif" alt="formula"
width="100" height="30" border="0" align="middle"></p>
<p style="font-size:inherit">
distances</p>
<table summary="figure" border="0">
<tr>
<td><img src="../../../figures/IfcFillAreaStyleTiles_Fig1.gif" width="420" height="390"
alt="IfcFillAreaStyleTiles_Fig1.gif 12,9 KB"></td>
</tr>
<tr>
<td>
<p class="figure">
factor</p>
</td>
</tr>
</table>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>fill_area_style_tiles</strong> defined in ISO10303-46</blockquote>


<h1>IfcFillStyleSelect</h1>
                                
                                <h1>IfcFontStyle</h1>
                                
                                <h1>IfcFontVariant</h1>
                                
                                <h1>IfcFontWeight</h1>
                                
                                <h1>IfcHatchLineDistanceSelect</h1>
                                
                                <h1>IfcImageTexture</h1>
                                
                                <p>An <span class="self-ref">IfcImageTexture</span> provides a 2-dimensional texture that can be applied to a surface of an geometric item and that provides lighting parameters of a surface onto which it is mapped. The texture is provided as an image file at an external location for which an URL is provided.</p>

<p>The following definitions from ISO/IEC 19775-1 X3D Architecture and base components (<strong>X3D Specification</strong>) apply:</p>
<ul style="list-style-type:disk;font-size:smaller>
<li>The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry.</li> 
<li>The texture is read from the URL specified by the url field. When the url field contains no [resolvable] values, texturing is disabled. Browsers shall support the JPEG and PNG (see ISO/IEC 15948) image file formats.</li>
<li>Texture nodes that require support for the PNG image format shall interpret the PNG pixel formats in the following way:
<ol type="a">
<li>Greyscale pixels without alpha or simple transparency are treated as intensity textures.</li>
<li>Greyscale pixels with alpha or simple transparency are treated as intensity plus alpha textures.</li>
<li>RGB pixels without alpha channel or simple transparency are treated as full RGB textures.</li>
<li>RGB pixels with alpha channel or simple transparency are treated as full RGB plus alpha textures.</li>
</ol>
</li>
<li>If the image specifies colours as indexed-colour (that is, palettes or colourmaps), the following semantics should be used (note that `greyscale' refers to a palette entry with equal red, green, and blue values):
<ol type="a">
<li>If all the colours in the palette are greyscale and there is no transparency chunk, it is treated as an intensity texture.</li>
<li>If all the colours in the palette are greyscale and there is a transparency chunk, it is treated as an intensity plus opacity texture.</li>
<li>&gt;If any colour in the palette is not grey and there is no transparency chunk, it is treated as a full RGB texture.</li>
<li>If any colour in the palette is not grey and there is a transparency chunk, it is treated as a full RGB plus alpha texture.</li>
</ol>
</li>
<li>Texture nodes that require support for JPEG files shall interpret JPEG files as follows:
<ol type="a">
<li>Greyscale files (number of components equals 1) are treated as intensity textures.</li>
<li>YCbCr files are treated as full RGB textures.</li>
<li>No other JPEG file types are required. It is recommended that other JPEG files are treated as a full RGB textures.</li>
</ol>
</li>
<li>Texture nodes that recommend support for GIF files shall follow the applicable semantics described above for the PNG format.</li>
</ul>

<p>The Uniform Resource Locator (URL) is a form of an URI and specified in <strong>RFC1738</strong> by IETF. It supports resources located on a particular server being accessed by a particular protocol (usually http), and resources located at a local machine.</p>

<blockquote class="note">
NOTE&nbsp; Exchange files following the ifcZIP convention may include a sub directory structure for image resources to be stored together with the product data set.
</blockquote>

<blockquote class="note">
<p><span style="font-size:smaller;color:blue">NOTE&nbsp; The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO/IEC 19775-1.2:2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard.
</blockquote>



<h1>IfcIndexedColourMap</h1>
                                
                                <p>
      The <span class="self-ref">IfcIndexedColourMap</span> provides the assignment of
      colour information to individual faces. It is used for
      colouring faces of tessellated face sets.
    </p>
    <p>
      The <span class="self-ref">IfcIndexedColourMap</span> defines an index into an
      indexed list of colour information. The <i>Colours</i> are
      a two-dimensional list of colours provided by three RGB
      values [0 .. 1]. The <i>ColourIndex</i> attribute
      corresponds to the <i>CoordIndex</i> of the
      <strong>IfcTessellatedFaceSet</strong> defining the
      corresponding index list of faces.
    </p>
    <p>
      
    </p>
    <table summary="">
      <tr>
        <td colspan="2">
          <img src="../../../figures/IfcIndexedColourMap_01.png" width="760"
          height="400" alt="IfcIndexedColourMap_01">
        </td>
      </tr>
      <tr>
        <td colspan="2">
          <p class="figure">
          </p>
        </td>
      </tr>
    </table>
    <p>
      
      <i>IfcTriangulatedFaceSet.CoordIndex</i>: ((1,6,5),
      (1,2,6), (6,2,7), (7,2,3), (7,8,6), (6,8,5), (5,8,1),
      (1,8,4), (4,2,1), (2,4,3), (4,8,7), (7,3,4))<br>
      <i>IfcCartesianPointList.CoordList</i>: ((0.,0.,0.),
      (1.,0.,0.), (1.,1.,0.), (0.,1.,0.), (0.,0.,2.), (1.,0.,2.),
      (1.,1.,2.), (0.,1.,2.))<br>
      <i>IfcIndexedColourMap.ColourIndex</i>: (1, 1, 2, 2, 3, 3,
      1, 1, 1, 1, 1, 1, )<br>
      <i>IfcColourRgbList.ColourList</i>: ((1.,0.,0.),
      (0.,1.,0.), (1.,1.,0.))
    </p>
    <table>
      <tr>
        <td>
          <img src="../../../figures/IfcIndexedColourMap_example-01.png"
          width="275" height="350" alt=
          "IfcIndexedColourMap_example-01">
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
          </p>
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>

    
  
<h1>IfcIndexedTextureMap</h1>
                                
                                <p>
      The <span class="self-ref">IfcIndexedTextureMap</span> provides the mapping of the
      2-dimensional texture coordinates to the surface onto which
      it is mapped. It is used for mapping the texture to faces of
      tessellated face sets.
    </p>
    <p>
      The <span class="self-ref">IfcIndexedTextureMap</span> defines an index into an
      indexed list of texture coordinates. The <i>TexCoords</i>
      are a two-dimensional list of texture coordinates provided by
      two parameter values. Subtypes of
      <span class="self-ref">IfcIndexedTextureMap</span> establish the index attribute
      corresponding to subtypes of
      <strong>IfcTessellatedFaceSet</strong> defining the
      corresponding index lists of vertices.
    </p>
    
  <h1>IfcIndexedTriangleTextureMap</h1>
                                
                                <p>
      The <span class="self-ref">IfcIndexedTriangleTextureMap</span> provides the
      mapping of the 2-dimensional texture coordinates to the
      surface onto which it is mapped. It is used for mapping the
      texture to triangles of the <strong>IfcTriangulatedFaceSet</strong>.
    </p>
    <p>
      The <span class="self-ref">IfcIndexedTriangleTextureMap</span> defines an index
      into an indexed list of texture coordinates. The
      <i>TexCoordIndex</i> is a two-dimensional list, where
    </p>
    <ul>
      <li>first dimension is the unbounded list of faces
      corresponding to the list of triangles defined by
      <i>CoordIndex</i> at <strong>IfcTriangulatedFaceSet</strong>;
      </li>
      <li>second dimension is the fixed list of three indices to
      texture vertices cooresponding to the fixed list of indices
      to vertices at <strong>IfcTriangulatedFaceSet</strong>
      </li>
    </ul>
    <p>
      The <i>TexCoords</i> defined at supertype
      <strong>IfcIndexedTextureMap</strong> are a two-dimensional list of
      texture coordinates provided by two parameter values. Each
      index of the second dimension list of <i>TexCoordIndex</i>
      points to a texture vertex in <i>TexCoords</i>.
    </p>
    <p>
      
    </p>
    <table summary="">
      <tr>
        <td>
          <img src="../../../figures/IfcIndexedTriangleTextureMap_01.png"
          width="760" height="400" alt=
          "IfcIndexedTriangleTextureMap_01">
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
          </p>
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>
    <p>
     
      <i>IfcTriangulatedFaceSet.CoordIndex</i>: ((1,6,5), (1,2,6), (6,2,7), (7,2,3),
      (7,8,6), (6,8,5), (5,8,1), (1,8,4), (4,2,1), (2,4,3),
      (4,8,7), (7,3,4))<br>
      <i>IfcCartesianPointList.CoordList</i>: ((0.,0.,0.), (1.,0.,0.),
      (1.,1.,0.), (0.,1.,0.), (0.,0.,2.), (1.,0.,2.), (1.,1.,2.),
      (0.,1.,2.))<br>
      <i>IfcIndexedTriangleTextureMap.TexCoordsIndex</i>: ((1 4 3), (1 2 4), (3 1 4), (4 1 2), (8 7 6), (6 7 5), (4 3 2), (2 3 1), 
      (5 8 7), (8 5 6), (2 4 3), (3 1 2))<br>
      <i>IfcTextureVertexList.TexCoordsList</i>: ((0. -0.5), (1. -0.5), (0. 1.5), (1. 1.5), 
      (0. 0.), (0. 1.), (1. 0.), (1. 1.))
    </p>
    <table summary="">
      <tr>
        <td>
          <img src=
          "../../../figures/IfcIndexedTriangleTextureMap_example-01.png"
          width="500" height="350" alt=
          "IfcIndexedTriangleTextureMap_example-01">
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
          </p>
        </td>
        <td>
          &nbsp;
        </td>
      </tr>
    </table>
    
  
<h1>IfcNullStyle</h1>
                                
                                <h1>IfcPixelTexture</h1>
                                
                                <p>An <span class="self-ref">IfcPixelTexture</span> provides a 2D image-based texture map as an explicit array of pixel values (list of <i>Pixel</i> binary attributes). In contrary to the <strong>IfcImageTexture</strong> the <span class="self-ref">IfcPixelTexture</span> holds a 2 dimensional list of pixel color
(and opacity) directly, instead of referencing to an URL.</p>

<p>The following definitions from ISO/IEC 19775-1 X3D Architecture and base components (<strong>X3D Specification</strong>) apply:</p>
<ul style="list-style-type:disk;font-size:smaller">
<li>The PixelTexture node defines a 2D image-based texture map as an explicit array of pixel values (image field) and parameters controlling tiling repetition of the texture onto geometry.</li>
<li>Texture maps are defined in a 2D coordinate system (s, t) that ranges from 0.0 to 1.0 in both directions. The bottom edge of the pixel image corresponds to the S-axis of the texture map, and left edge of the pixel image corresponds to the T-axis of the texture map. The lower-left pixel of the pixel image corresponds to s=0.0, t=0.0, and the top-right pixel of the image corresponds to s = 1.0, t = 1.0.</li>
<li>The Image field specifies a single uncompressed 2-dimensional pixel image. Image fields contain three integers representing the width, height and number of components in the image, followed by width&times;height hexadecimal values representing the pixels in the image. Pixel values are limited to 256 levels of intensity (that is, 0x00-0xFF hexadecimal).
<ol>
<li>A one-component image specifies one-byte hexadecimal value representing the intensity of the image. For example, 0xFF is full intensity in hexadecimal (255 in decimal), 0x00 is no intensity (0 in decimal).</li>
<li>A two-component image specifies the intensity in the first
(high) byte and the alpha opacity in the second (low) byte.</li>
<li>Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components (for example, 0xFF0000 is red, 0x00FF00 is green, 0x0000FF is blue).</li>
<li>Four-component images specify the alpha opacity byte after red/green/blue (e.g., 0x0000FF80 is semi-transparent blue). A value of 00 is completely transparent, FF is completely opaque, 80 is semi-transparent.</li>
</ol>
</li>
<li style="list-style: none; display: inline"><font size="-1">Note that alpha equals (1.0 -transparency), if alpha and transparency each range from 0.0 to 1.0.</font></li>
</ul>



<h1>IfcPreDefinedColour</h1>
                                
                                <p>The pre defined colour determines those qualified names which can be used to identify a colour that is in scope of the current data exchange specification (in contrary to colour specification which defines the colour directly by its colour components).</p>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: pre_defined_colour. It has been made into an abstract entity in IFC. Please refer to ISO/IS 10303-46:1994, p. 141 for the final definition of the formal standard.
</blockquote>



<h1>IfcPreDefinedCurveFont</h1>
                                
                                <h1>IfcPreDefinedItem</h1>
                                
                                <p>A pre defined item is a qualified name given to a style or font which is determined within the data exchange specification by convention on using the <i>Name</i> attribute value (in contrary to externally defined items, which are agreed by an external source).</p>

<blockquote class="note">
NOTE&nbsp; The convention on using the <i>Name</i> value is defined at the subtypes of <span class="self-ref">IfcPreDefinedItem</span> and is part of the specification.
</blockquote>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: pre_defined_item. Please refer to ISO/IS 10303-41:1994, page 137 for the final definition of the formal standard.
</blockquote>



<h1>IfcPreDefinedTextFont</h1>
                                
                                <p>The pre defined text font determines those qualified names which can be used for fonts that are in scope of the current data exchange specification (in contrary to externally defined text fonts). There are two choices:</p>
<ul>
  <li><i>IfcDraughtingPreDefinedTextFont</i> for definitions from ISO/IS 10303-46:1994 for (old) vector based and monospace text.<br>
  </li>
  <li><strong>IfcTextStyleFontModel</strong> for definitions from <strong>Cascading Style Sheets, level 1</strong>, W3C Recommendation 17 Dec 1996, revised 11 Jan 1999, CSS1, for all true type text. The use of the CSS1 definitions is the preferred way to represent text fonts.</li>
</ul>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: pre_defined_text_font. Please refer to ISO/IS 10303-46:1994, p. 138 for the final definition of the formal standard.
</blockquote>





<h1>IfcPresentableText</h1>
                                
                                <h1>IfcPresentationStyle</h1>
                                
                                <p>The <span class="self-ref">IfcPresentationStyle</span> is an abstract generalization of style
table for presentation information assigned to geometric representation items.
It includes styles for curves, areas, surfaces, and text. Style information may
include colour, hatching, rendering, and text fonts.</p>
<p>The different styles may include length measures (directly as a length
measure with infered unit, or indirectly as a ratio in relation to another
length measure). They may apply to curve pattern, hatch line distances, text
spacing and font sizes. The attribute <i>ModelOrDraughting</i> determines
whether those length measures are provided as model or draughting measures.</p>
<ul>
<li>Model measures, also called scale dependent measures, define the distance,
size or other length measures as being always the same in model space and the
distance size or other length measures on paper depend on the plotting
scale.</li>
<li>Draughting measures, also called scale independent measures, define the
distance , size or other length measures as being always the same, when plotted
on paper, independent of the plot scale.</li>
</ul>
<p>Each subtype of&nbsp; <span class="self-ref">IfcPresentationStyle</span> is assigned to the
<strong>IfcGeometricRepresentationItem</strong>'s through an intermediate
<strong>IfcStyledItem</strong>.</p>


<h1>IfcPresentationStyleAssignment</h1>
                                
                                <p>Assignment of style information to a styled item.</p>

<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The presentation style assignment is a set of styles which are assigned to styled items for the purpose of presenting these styled items.
</blockquote> 

<blockquote class="note"> 
NOTE&nbsp; Entity adapted from <strong>presentation_style_assignment</strong> defined in 0ISO10303-46.
</blockquote>



<blockquote class="deprecated">
Deprecation&nbsp; Entity deprecated, it shall not be used anymore. Use direct assignment of <strong>IfcPresentationStyle</strong> to <strong>IfcStyledItem</strong>.
</blockquote>

<h1>IfcPresentationStyleSelect</h1>
                                
                                <h1>IfcReflectanceMethodEnum</h1>
                                
                                <h1>IfcSizeSelect</h1>
                                
                                <h1>IfcSpecularExponent</h1>
                                
                                <h1>IfcSpecularHighlightSelect</h1>
                                
                                <h1>IfcSpecularRoughness</h1>
                                
                                <h1>IfcStyleAssignmentSelect</h1>
                                
                                <h1>IfcStyledItem</h1>
                                
                                <p>The <span class="self-ref">IfcStyledItem</span> holds presentation style information for products, either explicitly for an <strong>IfcGeometricRepresentationItem</strong> being part of an <strong>IfcShapeRepresentation</strong> assigned to a product, or by assigning presentation information to <strong>IfcMaterial</strong> being assigned as other representation for a product.</p>
<ul>
<li>If the <span class="self-ref">IfcStyledItem</span> is used within a reference from an <strong>IfcProductDefinitionShape</strong> then one <i>Item</i> shall be provided.</li>
<li>If the <span class="self-ref">IfcStyledItem</span> is used within a reference from an <strong>IfcMaterialDefinitionRepresentation</strong> then no <i>Item</i> shall be provided.</li>
</ul>

<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-46:1992<br>
The styled item is an assignment of style for presentation to a geometric representation item as it is used in a representation.</blockquote>
<blockquote class="note"> 
NOTE&nbsp; Entity adapted from <strong>styled_item</strong> defined in ISO10303-46.
</blockquote>









<p class="use-head">Use Definition</p>

<p>
<ul>
<li><small>As a presentation for a geometric representation item</small></li>
<li><small>As a presentation for a material definition</small></li>
</ul>
<blockquote class="note">NOTE&nbsp; The new <strong>IfcStyleAssignmentSelect</strong> allows the direct assignment styles, such as <strong>IfcCurveStyle</strong>, <strong>IfcSurfaceStyle</strong> without using the intermediate <strong>IfcPresentationStyleAssignment</strong></blockquote>

<table summary="use diagram">
<tr><td><img src="../../../figures/IfcStyledItem_fig-1.png" alt="2x4 example" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSurfaceSide</h1>
                                
                                <h1>IfcSurfaceStyle</h1>
                                
                                <p><span class="self-ref">IfcSurfaceStyle</span> is an assignment of one or many surface style elements to a surface, defined by subtypes of <strong>IfcSurface</strong>, <strong>IfcFaceBasedSurfaceModel</strong>, <strong>IfcShellBasedSurfaceModel</strong>, or by subtypes of <strong>IfcSolidModel</strong>. The positive direction of the surface normal relates to the positive side. In case of solids the outside of the solid is to be taken as positive side.</p> 

<blockquote class="note">
NOTE&nbsp; The surface style is often referred to as material definition in rendering applications.
</blockquote>
 
<blockquote class="note"> 
NOTE&nbsp; Corresponding ISO 10303 entity: surface_style_usage and surface_side_style. Please refer to ISO/IS 10303-46:1994 for the final definition of the formal standard. The surface style definition in regard to support of rendering has been greatly expanded beyond the scope of ISO/IS 10303-46.
</blockquote> 

 

<h1>IfcSurfaceStyleElementSelect</h1>
                                
                                <h1>IfcSurfaceStyleLighting</h1>
                                
                                <p><span class="self-ref">IfcSurfaceStyleLighting</span> is a container class for properties for calculation of physically exact illuminance related to a particular surface style.</p>

<p>

<table>
<tr><td><img src="../../../figures/IfcSurfaceLightingProperties_Fig1.gif" alt="material reflection components" width="300" height="236" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<p>All these factors can be measured physically and are ratios for the red, green and blue part of the light. These properties are defined in the model as Type <i>IfcColorRGB</i> with a factor for each colour.</p> 

<blockquote class="example"> 
EXAMPLE&nbsp; A green glass transmits only green light, so its transmission factor is 0.0 for red, between 0.0 and 1.0 for green and 0.0 for blue. A green surface reflects only green light, so the reflectance factor is 0.0 for red, between 0.0 and 1.0 for green and 0.0 for blue.
</blockquote> 




<h1>IfcSurfaceStyleRefraction</h1>
                                
                                <p><span class="self-ref">IfcSurfaceStyleRefraction</span> extends the surface style lighting, or the surface style rendering definition for properties for calculation of physically exact illuminance by adding seldomly used properties. Currently this includes the refraction index (by which the light ray refracts when passing through a prism) and the dispersion factor (or Abbe constant) which takes into account the wavelength dependency of the refraction.</p>

<blockquote class="note">
NOTE&nbsp; If such refraction properties are used, the <strong>IfcSurfaceStyle</strong> should include within its set of <i>Styles</i> (depending on whether rendering or lighting is used) an instance of <strong>IfcSurfaceStyleLighting</strong> and <span class="self-ref">IfcSurfaceStyleRefraction</span>, or an instance of <strong>IfcSurfaceStyleRendering</strong> and <span class="self-ref">IfcSurfaceStyleRefraction</span>.
</blockquote> 



<h1>IfcSurfaceStyleRendering</h1>
                                
                                <p><span class="self-ref">IfcSurfaceStyleRendering</span> holds the properties for visualization related to a particular surface side style. </p> 

<p>It allows rendering properties to be defined by:</p> 
<ul> 
 <li>a transparency component (<i>Transparency</i> attribute)</li> 
 <li>a colour component (<i>SurfaceColour</i> attribute inherited from <strong>IfcSurfaceStyleShading</strong>)</li> 
 <li>a reflectance component, given either by 
  <ul> 
   <li>applying reflectance factors to the surface colour: 
  <ul> 
   <li>diffuse component (<i>SurfaceColour * DiffuseFactor</i>)</li>				  
   <li>transmission component (<i>SurfaceColour * TransmissionFactor</i>)</li> 
   <li>diffuse transmission component (<i>SurfaceColour * DiffuseTransmissionFactor</i>)</li> 
   <li>reflection component (<i>SurfaceColour * ReflectionFactor</i>)</li> 
   <li>specular component (<i>SurfaceColour * SpecularFactor</i> attribute together with <i>SpecularHighlight</i>)</li> 
  </ul> </li> 
  <li>explicitly defining such factors as colours (<i>DiffuseColour</i>, <i>TransmissionColour</i>, <i>DiffuseTransmissionColour</i>, <i>ReflectionColour</i> and <i>SpecularColour</i>)</li> 
 </ul> </li> 
 <li>a displacement component, currently only given by a texture map with the TextureType = bump</li> 
 <li>a coverage component, currently only given by the alpha component of the texture map (2 or 4 component colour texture)</li> 
 </ul> 

<blockquote class="note">
NOTE&nbsp; The inherited attribute <i>SurfaceColour</i> is treated as the ambient colour and specifies how much ambient light from light sources this surface shall reflect. Ambient light is omnidirectional and depends only on the number of light sources, not their positions with respect to the surface.
</blockquote> 

<blockquote class="note"> 
NOTE&nbsp; If the reflectance method, as given by the <strong>IfcReflectanceMethodEnum</strong> is "GLASS", the transmission factor controls the level of transparency in the glass, In this case the transparency factor is interpreted as transmission factor.
</blockquote> 

<blockquote class="note">
NOTE&nbsp; Both <i>Transparency</i> and <i>TransmissionColour</i> (or factor) are included, the following definitions apply:
		<ul> 
		  <li>Transparency is the ratio of the transmitted flux in a solid angle of 2 * PI sr (one hemisphere). It is a simple colour filtration that does not account for refraction.</li> 
		  <li>Transmission factor of a material is the ratio of transmitted flux in a given solid angle to the transmitted flux of a completely diffuse material with 100% transmission in the same solid angle. It is the portion of light that goes through the material and may be refracted.</li> 
		</ul>
</blockquote> 

<blockquote class="note">
NOTE&nbsp; IFC2x2 adds additional capability for presentation of physically accurate illuminance on surfaces. VRML type rendering and rendering based on ISO 10303-46 continues to be supported by a subset of the information. For reflectance equations and further information about the surface style properties and its processing, see:
		<ul> 
		  <li>ISO/IEC 14772-1: 1997: The Virtual Reality Modeling Language</li> 
		</ul>
</blockquote> 

<blockquote class="note">
NOTE&nbsp; The definition of <i>IfcSurfaceStyleRenderingProperties</i> includes the definitions as found in ISO 10303-46:1994, in particular of:
		<ul> 
		  <li>surface_style_rendering_with_properties</li>
		  <li>surface_style_rendering_ambient</li>
		  <li>surface_style_rendering_ambient_diffuse</li>
		  <li>surface_style_rendering_ambient_diffuse_specular</li>
		  <li>surface_style_transparent</li>
		</ul>
</blockquote> 

<blockquote>In addition to the attributes as defined in ISO 10303-46, (ambient_reflectance, diffuse_reflectance, specular_reflectance, specular_exponent, and specular_colour), the current IFC definition adds other colours, reflectance factors and specular roughness.
</blockquote> 



<h1>IfcSurfaceStyleShading</h1>
                                
                                <p>The <span class="self-ref">IfcSurfaceStyleShading</span> allows for colour information used for shading, whereas subtypes provide data for more sophisticated rendering techniques. The surface colour is used for colouring or simple shading of the assigned surfaces.</p> 

<blockquote class="extDef">
NOTE&nbsp; Definition according to ISO/CD 10303-46:1992<br>
The surface style rendering allows the realistic visualization of surfaces referring to rendering techniques based on the laws of physics and mathematics.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>surface_style_rendering</strong> defined in ISO
10303-41.</blockquote>


<h1>IfcSurfaceStyleWithTextures</h1>
                                
                                <p>The entity <span class="self-ref">IfcSurfaceStyleWithTextures</span> allows to include image textures in surface styles. These image textures can be applied repeating across the surface or mapped with a particular scale upon the surface.</p>

<p>The entity <span class="self-ref">IfcSurfaceStyleWithTextures</span> is part of the surface style table for presentation information assigned to surfaces for shading, rendering and lighting with textures. The mapping of the texture onto the surface or the solid is determined by the texture coordinates, in absense of an <strong>IfcTextureCoordinate</strong> assigned to each surface texture, a default mapping of the texture to the geometric face or surface applies.</p>

<p>Surface textures included in the <span class="self-ref">IfcSurfaceStyleWithTextures</span> are two dimensional map formats. They define 2D images that contain an array of colour values describing the texture. Depending on the number of <i>IfcSurfaceTextures</i> being included in the list of <i>Textures</i> the <span class="self-ref">IfcSurfaceStyleWithTextures</span> either describes a single texture, or a multi texture.</p>
<ul>
<li>single texture: a single surface texture is applied to the styled geometric item (entirely or partly) with optional repetition and texture transformation</li>
<li>multi texture: two or more surface textures are applied to the styled geometric item (entirely or partly) with optional repetition, texture transformation or texture coordinate mapping being specific for each texture.</li>
</ul>
<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Only one instance of <span class="self-ref">IfcSurfaceStyleWithTextures</span> shall be referenced by an <strong>IfcStyledItem</strong> and be assigned to an <strong>IfcGeometricRepresentationItem</strong></li>
</ol>

<blockquote class="note">
NOTE&nbsp; The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO/IEC 19775-1.2:2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard.
</blockquote>





<h1>IfcSurfaceTexture</h1>
                                
                                <p>An <span class="self-ref">IfcSurfaceTexture</span> provides a 2-dimensional
image-based texture map. It can either be given by referencing an
external image file through an URL reference
(<strong>IfcImageTexture</strong>), including the image file as a blob
(long binary) into the data set (<strong>IfcBlobTexture</strong>), or by
explicitly including an array of pixels
(<strong>IfcPixelTexture</strong>).</p>
<p>The following definitions from ISO/IEC 19775-1 X3D Architecture
and base components (<a href=
"http://www.web3d.org/x3d/specifications/">X3D Specification</strong>)
apply:</p>
<ul>
<li><span style="font-size:smaller;color:blue">Texture: An image
used in a texture map to create visual appearance effects when
applied to geometry nodes.</span></li>
<li><span style="font-size:smaller;color:blue">Texture map: A
texture plus the general parameters necessary for mapping the
texture to geometry.</span></li>
</ul>
<p>Texture are defined by 2D images that contain an array of colour
values describing the texture. The texture values are interpreted
differently depending on the number of components in the texture
and the specifics of the image format. In general, texture may be
described using one of the following forms:</p>
<ol>
<li>Intensity textures (one-component)</li>
<li>Intensity plus alpha opacity textures (two-component)</li>
<li>Full RGB textures (three-component)</li>
<li>Full RGB plus alpha opacity textures (four-component)</li>
</ol>
<blockquote class="note">
<p>NOTE&nbsp; Image formats specify an alpha opacity, not transparency (where alpha = 1 - transparency).</p>
</blockquote>

<p>

<table summary="texture coordinate">
<tr><td><img src="../../../figures/IfcSurfaceTexture_fig-1.png" alt="texture coordinates"></td></tr>
<tr><td><p class="figure">
</table>

<p>The following definitions from ISO/IEC 19775-1 X3D Architecture and base components (<strong>X3D Specification</strong>) on texture coordinates apply:</p>
<ul>
<li><span style="font-size:smaller;color:blue">Texture maps are defined in a 2D coordinate system (s,&nbsp;t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. Texture maps may be viewed as two dimensional colour functions that, given an <i>(s,&nbsp;t)</i> coordinate, return a colour value <i>colour(s,&nbsp;t)</i>.</span></li>
</ul>

<p>If multiple surface textures are included in the
<strong>IfcSurfaceStyleWithTextures</strong> applying them to a geometric
item, a mode and optional parameters can be included that blending
operations.</p>
<p>The <i>RepeatS</i> and <i>RepeatT</i> Boolean flags control
whether the texture map is repeated outside the [0.0, 1.0] texture
coordinate range, when applied to a geometric surface, or clamped
to lie within the [0.0, 1.0] range. The <i>TextureTransform</i>
applies a 2D non-uniform transformation to the texture before it is
applied to a geometric surface.</p>
<p>The following definitions from ISO/IEC 19775-1 X3D Architecture
and base components (<a href=
"http://www.web3d.org/x3d/specifications/">X3D Specification</strong>)
apply:</p>
<ul>
<li><span style="font-size:smaller;color:blue">These parameters
support changes to the size, orientation, and position of textures
on shapes. Note that these operations appear reversed when viewed
on the surface of geometry. For example, a <i>scale</i> value of (2
2) will scale the texture coordinates and have the net effect of
shrinking the texture size by a factor of 2 (texture coordinates
are twice as large and thus cause the texture to repeat). A
translation of (0.5 0.0) translates the texture coordinates +.5
units along the S-axis and has the net effect of translating the
texture &minus;0.5 along the S-axis on the geometry's surface. A
rotation of &pi;/2 of the texture coordinates results in a
&minus;&pi;/2 rotation of the texture on the geometry.</span></li>
<li><span style="font-size:smaller;color:blue">The <i>center</i>
field specifies a translation offset in texture coordinate space
about which the <i>rotation</i> and <i>scale</i> fields are
applied. The <i>scale</i> field specifies a scaling factor in S and
T of the texture coordinates about the <i>center</i> point.
<i>scale</i> values shall be in the range (&minus;&infin;,&infin;).
The <i>rotation</i> field specifies a rotation in radians of the
texture coordinates about the <i>center</i> point after the scale
has been applied. A positive rotation value makes the texture
coordinates rotate counterclockwise about the centre, thereby
rotating the appearance of the texture itself clockwise. The
<i>translation</i> field specifies a translation of the texture
coordinates.</span><br>
<span style="font-size:smaller">The following conventions
apply:</span>
<ul>
<li style="list-style-type:none"><span style=
"font-size:smaller">center =
<i>TextureTransform.LocalOrigin</i>;<br>
rotation = <i>TextureTransform.Axis1</i><br>
scale S = <i>TextureTransform.Scale</i><br>
scale T = <i>TextureTransform.Scale2</i></span></li>
</ul>
</li>
</ul>

<blockquote class="note">
NOTE&nbsp; The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO/IEC 19775-1.2:2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard.
</blockquote>





<h1>IfcTextAlignment</h1>
                                
                                <h1>IfcTextDecoration</h1>
                                
                                <h1>IfcTextFontName</h1>
                                
                                <h1>IfcTextFontSelect</h1>
                                
                                <h1>IfcTextStyle</h1>
                                
                                <p>The <span class="self-ref">IfcTextStyle</span> is a presentation style for annotations that place a text in model space. The <span class="self-ref">IfcTextStyle</span> provides the text style for presentation information assigned to <strong>IfcTextLiteral</strong>'s. The style is defined by color, text font characteristics, and text box characteristics.</p>

<p>An <span class="self-ref">IfcTextStyle</span> is instantiated with:</p>
<ul>
  <li><i>TextCharacterAppearance</i>: <strong>IfcTextStyleForDefinedFont</strong></li>
  <li><i>TextStyle</i>: <strong>IfcTextStyleTextModel</strong></li>
  <li><i>TextFontStyle</i>: <strong>IfcTextStyleFontModel</strong></li>
</ul>

<p>An <span class="self-ref">IfcTextStyle</span> is assigned to <strong>IfcTextLiteral</strong> through the <strong>IfcStyledItem</strong> entity.</p>


<blockquote class="note">
NOTE&nbsp; Entity adopted from font properties (font-family, font-style, font-variant, font-weight, font-size), Color and background properties (color, background-color) and text properties (word-spacing, letter-spacing, text-decoration, text-transform, text-align, text-indent, line-height) defined in <strong>CSS-1</strong>.
</blockquote>







<h1>IfcTextStyleFontModel</h1>
                                
                                <p>(The above algorithm can be
optimized to avoid having to revisit
the CSS1 properties for each character.)
</p>
<p>The per-property matching rules
from (2) above are as follows:
</p>
<ol>
  <li>'font-style' is tried first.
'italic'
will be satisfied if there is either a face in the UA's font database
labeled with the CSS keyword 'italic' (preferred) or 'oblique'.
Otherwise the values must be matched exactly or font-style will fail. </li>
  <li>'font-variant' is tried
next. 'normal'
matches a font not labeled as 'small-caps'; 'small-caps' matches (1) a
font labeled as 'small-caps', (2) a font in which the small caps are
synthesized, or (3) a font where all lowercase letters are replaced by
upper case letters. A small-caps font may be synthesized by
electronically scaling uppercase letters from a normal font. </li>
  <li>'font-weight' is matched next, it will never fail. (See 'font-weight' below.) </li>
  <li>'font-size' must be matched within a
UA-dependent margin of tolerance. (Typically, sizes for scalable fonts
are rounded to the nearest whole pixel, while the tolerance for
bitmapped fonts could be as large as 20%.) Further computations, are
based on the 'font-size' value that is used, not the one that is specified.</li>
</ol>

<p>The inherited <i>Name</i> attribute is used to define the font name, particularly in cases, where no (list of) font families are provided. </p>

<blockquote class="note">
NOTE&nbsp; Corresponding CSS1 definitions are Font properties ('font-family', 'font-style', 'font-variant',&nbsp; 'font-weight').</font>
</blockquote>



<h1>IfcTextStyleForDefinedFont</h1>
                                
                                <p>The <span class="self-ref">IfcTextStyleForDefinedFont</span> combines the text font color with an optional background color, that fills the text box, defined by the planar extent given to the text literal.</p>

<blockquote class="extDef">Definition according to W3C for Cascading Style Sheets:</br>
These properties describe the color (often called foreground color) and background of an element (i.e. the surface onto which the content is rendered). One can set a background color.</blockquote>

<blockquote class="note">
NOTE&nbsp; Corresponding CSS definitions are Color and background properties (color, background-color).</font>
</blockquote>





<h1>IfcTextStyleTextModel</h1>
                                
                                <p>The <span class="self-ref">IfcTextStyleTextModel</span> combines all text style properties, that affect the presentation of a text literal within a given extent. It includes the spacing between characters and words, the horizontal and vertical alignment of the text within the planar box of the extent, decorations (like underline), transformations of the literal (like uppercase), and the height of each text line within a multi-line text block.</p>
<blockquote class="extDef">Definition according to W3C for Cascading Style Sheets:</br>
The properties defined in the text model affect the visual presentation of characters, spaces, words, and paragraphs.</blockquote>
<blockquote class="note">
NOTE&nbsp; Corresponding CSS1 definitions are Text properties (word-spacing, letter-spacing, text-decoration, vertical-align, text-transform, text-align, text-indent, line-height).
</blockquote>



<h1>IfcTextTransformation</h1>
                                
                                <h1>IfcTextureCoordinate</h1>
                                
                                <p>The <span class="self-ref">IfcTextureCoordinate</span> is an abstract supertype of the different kinds to apply texture coordinates to
geometries. For vertex based geometries an explicit assignment of 2D texture vertices to the 3D geometry points
is supported by the subtype <strong>IfcTextureMap</strong>, in addition there can be a procedural description of how texture
coordinates shall be applied to geometric items. If no <span class="self-ref">IfcTextureCoordinate</span> is provided for the
<strong>IfcSurfaceTexture</strong>, the default mapping shall be used.
</p>
<blockquote class="note">NOTE&nbsp; See relevant subtypes of <strong>IfcGeometricRepresentationItem</strong> for default texture
mapping description.
</blockquote>
<blockquote class="note">NOTE&nbsp; The definitions of texturing has been adapted from X3D Architecture and base components, 
section 18 <strong>Texturing component</strong> as defined in ISO/IEC 19775-1.2</blockquote>



<h1>IfcTextureCoordinateGenerator</h1>
                                
                                <p>
      The <span class="self-ref">IfcTextureCoordinateGenerator</span> describes a
      procedurally defined mapping function with input parameter to
      map 2D texture coordinates to 3D geometry vertices. The
      allowable <i>Mode</i> values and input <i>Parameter</i>
      need to be agreed upon in view definitions and implementer
      agreements.
    </p>
    <blockquote class="note">
NOTE&nbsp; It is recommended to use
        the texture coordinate generation modes as defined in
        X3D.
    </blockquote>
    <blockquote class="extDef">
        NOTE&nbsp; Definition according to
        ISO/IEC 19775-1:<br><br>
				The TextureCoordinateGenerator supports the automatic
				generation of texture coordinates for geometric shapes.<br>
      The mode field describes the algorithm used to compute
      texture coordinates.
        <ul class="std" style=" font-size:inherit;">
          <li style=" font-size:inherit;">SPHERE,
          </li>
          <li style=" font-size:inherit;">CAMERASPACENORMAL,
          </li>
          <li style=" font-size:inherit;">CAMERASPACEPOSITION,
          </li>
          <li style=" font-size:inherit;">CAMERASPACEREFLECTIONVECTOR,
          </li>
          <li style=" font-size:inherit;">SPHERE-LOCAL,
          </li>
          <li style=" font-size:inherit;">COORD,
          </li>
          <li style=" font-size:inherit;">COORD-EYE,
          </li>
          <li style=" font-size:inherit;">NOISE,
          </li>
          <li style=" font-size:inherit;">NOISE-EYE,
          </li>
          <li style=" font-size:inherit;">SPHERE-REFLECT,
          </li>
          <li style=" font-size:inherit;">SPHERE-REFLECT-LOCAL
          </li>
        </ul>
		</blockquote>
    <blockquote class="note">
      NOTE&nbsp; The definitions of texturing within this standard
      have been developed in dependence on the texture component of
      X3D. See ISO/IEC 19775-1.2:2008 X3D Architecture and base
      components Edition 2, Part 1, 18 Texturing component for the
      definitions in the international standard.
    </blockquote>
    
    
<h1>IfcTextureMap</h1>
                                
                                <p>
      An <span class="self-ref">IfcTextureMap</span> provides the mapping of the
      2-dimensional texture coordinates to the surface onto which
      it is mapped. It is used for mapping the texture to surfaces
      of vertex based geometry models, such as
    </p>
    <ul>
      <li>
        <strong>IfcFacetedBrep</strong>
      </li>
      <li>
        <strong>IfcFacetedBrepWithVoids</strong>
      </li>
      <li>
        <strong>IfcFaceBasedSurfaceModel</strong>
      </li>
      <li>
        <strong>IfcShellBasedSurfaceModel</strong>
      </li>
    </ul>
    <p>
      The <span class="self-ref">IfcTextureMap</span> has a list of
      <i>TextureVertex</i>, that corresponds to the points of the
      outer face bound of the vertex based geometry item. The
      corresponding pair of lists is:
    </p>
    <ol>
      <li>the list of <i>Polygon</i> of the
      <strong>IfcFaceOuterBound</strong> of type
      <strong>IfcCartesianPoint</strong>, and
      </li>
      <li>the list of <i>Vertices</i> of type
      <strong>IfcTextureVertex</strong>.
      </li>
    </ol>
    <p>
      Each <strong>IfcTextureVertex</strong> (given as S, T coordinates of
      the 2-dimension texture coordinate system) corresponds to the
      geometric coordinates of the <strong>IfcCartesianPoint</strong>
      (given as 3-dimension X, Y, and Z coordinates within the
      object coordinate system of the geometric item).
    </p>
    <blockquote class="extDef">
        NOTE&nbsp; Definition according to
        ISO/IEC 19775-1:<br>
        The TextureCoordinate node is a geometry property node that
        specifies a set of 2D texture coordinates used by
        vertex-based geometry nodes to map textures to
        vertices.
    </blockquote>
    <blockquote class="note">
        NOTE&nbsp; In contrary to
        the X3D vertext based geometry, for example IndexedFaceSet
        and ElevationGrid, the vertext based geometry in IFC may
        include inner loops. The areas of inner loops have to be
        cut-out from the texture applied to the outer loop.
    </blockquote>
    <table summary="texture map use">
      <tr>
        <td>
          <img src="../../../figures/IfcTextureMap_fig-1.png" width="620"
          height="600" alt="IfcTextureMap_fig-1.png 35,6 KB">
        </td>
				<td style=" vertical-align:bottom;"><span style=" font-size:x-small;">
      based geometry.</span>
				</td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
				<td>&nbsp;</td>
      </tr>
    </table>
    
    
    
    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>The <strong>IfcFace</strong> referenced in <i>AppliedTo</i>
      shall be used by the vertex based geometry, to which this
      texture map is assigned to by through the
      <strong>IfcStyledItem</strong>.
      </li>
    </ol>
<h1>IfcTextureVertex</h1>
                                
                                <p>
      An <span class="self-ref">IfcTextureVertex</span> is a list of 2 (S, T) texture
      coordinates.
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition according to ISO/IEC 19775-1 :<br>
      <br>
      Each vertex-based geometry node uses a set of 2D texture
      coordinates that map textures to vertices. Texture map values
      ( ImageTexture, PixelTexture) range from [0.0, 1.0] along the
      S-axis and T-axis. However, texture coordinate values may be
      in the range (-&infin;,&infin;). Texture coordinates identify
      a location (and thus a colour value) in the texture map. The
      horizontal coordinate S is specified first, followed by the
      vertical coordinate T. If the texture map is repeated in a
      given direction (S-axis or T-axis), a texture coordinate C (s
      or t) is mapped into a texture map that has N pixels in the
      given direction as follows:
<pre style=" font-size:larger;">
<b>Texture map location = (C - floor(C)) &times; N</b>
</pre>
    </blockquote>
    <blockquote class="extDef">
      If the texture map is not repeated, the texture coordinates
      are clamped to the 0.0 to 1.0 range as follows:
<pre style=" font-size:larger;">
<b>Texture map location = N,     if C &gt; 1.0,
<br>                     = 0.0,   if C &lt; 0.0,
<br>                     = C &times; N, if 0.0 &le; C &le; 1.0.</b>
</pre>
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Texture coordinates may be transformed (scaled, rotated,
      translated) by supplying a TextureTransform as a component of
      the texture's definition.
    </blockquote>
    
<h1>IfcTextureVertexList</h1>
                                
                                <p>
      The <span class="self-ref">IfcTextureVertexList</span> defines an ordered
      collection of texture vertices. Each texture vertex is
      a two-dimensional vertex provided by a fixed list of
      two  texture coordinates. The attribute <i>TexCoordsList</i> is a
      two-dimensional list, where
    </p>
    <ul>
      <li>first dimension is an unbounded list representing each
      texture vertex;
      </li>
      <li>second dimension is a fixed list of two list members,
      where [1] is the S-coordinate, and [2] the T-coordinate of 
			the texture vertex.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The <span class="self-ref">IfcTextureVertexList</span> is introduced
      to provide a compact representation of an indexable
      representation of texture coordinates for texture maps
			in tessellated items.
    </blockquote>
    
  <h1>IfcAnnotationFillArea</h1>
                                
                                <p>The <span class="self-ref">IfcAnnotationFillArea</span> defines an area by a definite
<i>OuterBoundary</i>, that might include <i>InnerBoundaries</i>. The areas
defined by the <i>InnerBoundaries</i> are excluded from applying the fill
area style. The <i>InnerBoundaries</i> shall not intersect with the
<i>OuterBoundary</i> nor being outside of the <i>OuterBoundary</i>.</p>
<p>The fill area style that is applied to the <span class="self-ref">IfcAnnotationFillArea</span> is
declared using the <strong>IfcFillAreaStyle</strong>, associated to the area by an
<strong>IfcStyledItem</strong>. Applicable fill area styles are a solid color, a
hatching, tiles, or a combination of those styles.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 10303-46:<br>
An annotation fill area is a set of curves that may be filled with hatching,
colour or tiling. The annotation fill are is described by boundaries which
consist of non-intersecting, non-self-intersecting closed curves. These curves
form the boundary of planar areas to be filled according to the style for the
annotation fill area.</blockquote>
<p>
<table>
<tr>
<td>&nbsp; &nbsp; <img src="../../../figures/IfcAnnotationFillArea_Fig1.png" alt=
"annotation fill area" border="0"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>annotation_fill_area</strong> defined in ISO10303-46</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>Any curve that describes an inner boundary shall not intersect with, nor
include, another curve defining an inner boundary.</li>
<li>The curve defining the outer boundary shall not intersect with any curve
defining an inner boundary, nor shall it be surrounded by a curve defining an
inner boundary.</li>
</ol>

<h1>IfcBoxAlignment</h1>
                                
                                <h1>IfcPlanarBox</h1>
                                
                                <p>A planar box specifies an arbitrary rectangular box and its location in a
two dimensional Cartesian coordinate system. If the planar box is used within a
three-dimensional coordinate system, it defines the rectangular box within the
XY plane.</p>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>planar_box</strong> defined in ISO10303-46</blockquote>

<h1>IfcPlanarExtent</h1>
                                
                                <p>The planar extent defines the extent along the two axes of the
two-dimensional coordinate system, independently of its position. If the planar
extent is used within a three-dimensional coordinate system, it defines the
extent along the x and y axes.</p>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>planar_extent</strong> defined in ISO10303-46</blockquote>

<h1>IfcPresentationItem</h1>
                                
                                <p>The <span class="self-ref">IfcPresentationItem</span> is the abstract supertype of all entities
used for presentation appearance definitions.</p>

<h1>IfcTextLiteral</h1>
                                
                                <p>The text literal is a geometric representation item which describes a text
string using a string literal and additional position and path information. The
text size and appearance is determined by the <strong>IfcTextStyle</strong> that is
associated to the <span class="self-ref">IfcTextLiteral</span> through an
<strong>IfcStyledItem</strong>.</p>
<p>The text string is placed within the planar extent (the box) defined within
the subtype <strong>IfcTextLiteralWithExtent</strong>.</p>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>text_literal</strong> defined in ISO10303-46</blockquote>


<blockquote class="deprecated">DEPRECATION&nbsp; The use of
<span class="self-ref">IfcTextLiteral</span> is deprecated and it will be made
abstract.</blockquote>
<h1>IfcTextLiteralWithExtent</h1>
                                
                                <p>The text literal with extent is a text literal with the additional explicit
information of the planar extent. An alignment attribute defines how the text
box is aligned to the placement and how it may expand if additional lines of
text need to be added.</p>
<p>
text string</p>
<table style="margin:10px">
<tr>
<td><img src="../../../figures/IfcTextLiteralWithExtent_Fig1.png" width="300" height=
"170" alt="IfcTextLiteralWithExtent_Fig1.png 8,1 KB"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<p>The planar extent defines the box model within which the text is placed.
Padding maybe defined in the text style that offsets the text from the box to
its inside.</p>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>text_literal_with_extent</strong> defined in ISO10303-46</blockquote>


<h1>IfcTextPath</h1>
                                
                                <h1>IfcLayeredItem</h1>
                                
                                <h1>IfcLightDistributionCurveEnum</h1>
                                
                                <h1>IfcLightDistributionData</h1>
                                
                                <p><span class="self-ref">IfcLightDistributionData</span> defines the luminous intensity of a light source given at a particular main plane angle. It is based on some standardized light distribution curves; the <i>MainPlaneAngle</i> is either the</p> 

<ul> 
<li>A angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_A</li> 
<li>B angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_B</li> 
<li>C angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_C</li> 
</ul> 

<p>For each <i>MainPlaneAngle</i> (considered as being the row of a table) a list of <i>SecondaryPlaneAngle'</i>s are given (considered to be the columns of a table). They are either the:</p> 

<ul> 
<li>&#945; angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_A</li> 
<li>&#946; angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_B</li> 
<li>&#947; angle; if the <strong>IfcLightDistributionCurveEnum</strong> is set to TYPE_C</li> 
</ul> 

<p>For each pair of <i>MainPlaneAngle</i> and <i>SecondaryPlaneAngle</i> the <i>LuminousIntensity</i> is provided (the unit is given by the <strong>IfcUnitAssignment</strong> referring to the LuminousIntensityDistributionUnit, normally cd/klm).</p> 



<h1>IfcLightDistributionDataSourceSelect</h1>
                                
                                <h1>IfcLightEmissionSourceEnum</h1>
                                
                                <h1>IfcLightIntensityDistribution</h1>
                                
                                <p><span class="self-ref">IfcLightIntensityDistribution</span> defines the the luminous intensity of a light source that changes according to the direction of the ray. It is based on some standardized light distribution curves, which are defined by the <i>LightDistributionCurve</i> attribute.</p> 



<h1>IfcLightSource</h1>
                                
                                <h1>IfcLightSourceAmbient</h1>
                                
                                <h1>IfcLightSourceDirectional</h1>
                                
                                <h1>IfcLightSourceGoniometric</h1>
                                
                                <p><span class="self-ref">IfcLightSourceGoniometric</span> defines a light source for which exact lighting data is available. It specifies the type of a light emitter, defines the position and orientation of a light distribution curve and the data concerning lamp and photometric information.</p> 

<p>

<table>
<tr><td><img src="../../../figures/IfcLightSourceGoniometric_Fig1.gif" alt="Example" width="587" height="366" border="0"></td></tr>
<tr><td><p class="figure">
</table>




<h1>IfcLightSourcePositional</h1>
                                
                                <h1>IfcLightSourceSpot</h1>
                                
                                <p class="figure">
</table>
</blockquote> 

<blockquote class="note"> 
NOTE&nbsp; Corresponding ISO 10303 entity: light_source_spot. Please refer to ISO/IS 10303-46:1994, p. 33 for the final definition of the formal standard.
</blockquote>

<blockquote class="note">
NOTE&nbsp; In addition to the attributes as defined in ISO10303-46 the additional property from ISO/IEC 14772-1:1997 (VRML) <i>Radius</i>, <i>BeamWidth</i>, and <i>QuadricAttenuation</i> are added to this subtype and the <i>AmbientIntensity</i> and <i>Intensity</i> are inherited from the supertype.
</blockquote> 



<h1>IfcPresentationLayerAssignment</h1>
                                
                                <p>The presentation layer assignment provides the layer name (and optionally a description and an identifier) for a collection of geometric representation items. The <span class="self-ref">IfcPresentationLayerAssignment</span> corresponds to the term "CAD Layer" and is used mainly for grouping and visibility control.</p>

<blockquote class="note">
NOTE&nbsp; The use of presentation layer shall be restricted to simple grouping and displaying purposes.
</blockquote>

<p>Visibility and access control and layer style assignment (colour, line style, line width) is handled by the subtype <i>IfcPresentationLayerAssignmentWithStyle</i>.</p>

<blockquote class="note">
NOTE&nbsp; Corresponding ISO 10303 name: presentation layer assignment. Please refer to ISO/IS 10303-46:1994, p. 36 for the final definition of the formal standard.
</blockquote>



<p class="use-head">Attribute use definition</p>

<p>

<table summary="overriding of layer assignment">
<tr><td valign="top"><img src="../../../figures/IfcPresentationLayerAssignment-fig1.png" alt="instantiation diagram"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcPresentationLayerWithStyle</h1>
                                
                                <p>An <i>IfcPresentationLayerAssignmentWithStyle</i> extends the presentation layer assignment with capabilities to define visibility control, access control and common style information.</p>

<p>The visibility control allows to define a layer to be either 'on' or 'off', and/or 'frozen' or 'not frozen'. The access control allows to block graphical entities from manipulations by setting a layer to be either 'blocked' or 'not blocked'. Common style information can be given to the layer.</p>

<blockquote class="note">
NOTE&nbsp; Style information assigned to layers is often restricted to 'layer colour', 'curve font', and/or 'curve width'. These styles are assigned by using the <strong>IfcCurveStyle</strong> within the <i>LayerStyles</i>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; If a styled item is assigned to a layer using the <i>IfcPresentationLayerAssignmentWithStyle</i>, it inherits the style information from the layer. In this case, it should omit its own style information. If the styled item has style information assigned (such as by <strong>IfcCurveStyle</strong>, <strong>IfcFillAreaStyle</strong>, <strong>IfcTextStyle</strong>, <strong>IfcSurfaceStyle</strong>, <i>IfcSymbolStyle</i>), then it overrides the style provided by the <i>IfcPresentationLayerAssignmentWithStyle</i>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; The <i>IfcPresentationLayerAssignmentWithStyle</i> extends the presentation_layer_assignment entity as defined in ISO/IS 10303-46:1994, p. 36.
</blockquote>





<h1>IfcEvent</h1>
                                
                                <p>
      An <span class="self-ref">IfcEvent</span> is something
      that happens that triggers an action or response.
    </p>
    
    <p class="use-head">Use definitions</p>
    <p>
      <span class="self-ref">IfcEvent</span> is used to capture information about
      particular things that happen or that may happen.
      Particularly used in work plans (or process maps) they
      identify e.g. a point at which a message containing
      information may be issued or at which a rule or constraint
      is invoked.
    </p>	
<h1>IfcEventTriggerTypeEnum</h1>
                                
                                <h1>IfcEventType</h1>
                                
                                <p>An <span class="self-ref">IfcEventType</span> defines a particular type of event that may be specified.</p>
    
    <p>An <span class="self-ref">IfcEventType</span> provides for all forms of types of event that may be specified.</p>
    <p>Usage of <span class="self-ref">IfcEventType</span> defines the parameters for one or more occurrences of <strong>IfcEvent</strong>. Parameters may be specified through property sets that may be enumerated in the <strong>IfcEventTypeEnum</strong> data type or through explicit attributes of <strong>IfcEvent</strong>. Event occurrences (<strong>IfcEvent</strong> entities) are linked to the event type through the <strong>IfcRelDefinesByType</strong> relationship.</p>
<h1>IfcEventTypeEnum</h1>
                                
                                <h1>IfcProcedure</h1>
                                
                                <p>
      An <span class="self-ref">IfcProcedure</span> is a
      logical set of actions to be taken in response to an event
      or to cause an event to occur.
    </p>
    
    
    <p class="use-head">Use definitions</p>
    <p>
      <span class="self-ref">IfcProcedure</span> is used to capture information about
      stepped processes such as calibration, start/stop
      procedures for equipment items, designated actions to take
      in the event of an emergency etc. A procedure is not a
      task, but may describe a set of tasks and their order of
      occurrence in response to or to cause an event.
    </p>
     
    <p>As shown in 
    describes specific steps of how something should happen.
    While a procedure does control/restrict in the sense of
    indicating "this is how the task should be performed" by
    nature of describing inner detail, this is not different than
    parts of a product indicating "this is how the parts should
    be assembled". Consequently, it doesn't restrict the outer
    item as a whole but provides inner detail of the item.</p>
<table>
<tr><td><img src="../../../figures/ifcprocedure_example.png" alt="procedure example" border="0"></td></tr>
<tr><td><p class="figure">
</table>
    </p>
<h1>IfcProcedureType</h1>
                                
                                <p>An <span class="self-ref">IfcProcedureType</span> defines a particular type of procedure that may be specified.</p>
    
    <p>An <span class="self-ref">IfcProcedureType</span> provides for all forms of types of procedure that may be specified.</p>
    <p>
      Usage of <span class="self-ref">IfcProcedureType</span> defines the parameters for
      one or more occurrences of <strong>IfcProcedure</strong>. Parameters
      may be specified through property sets that may be
      enumerated in the <strong>IfcProcedureTypeEnum</strong> data type or
      through explict attributes of <strong>IfcProcedure</strong>. Procedure occurrences
      (<strong>IfcProcedure</strong> entities) are linked to the procedure type
      through the <strong>IfcRelDefinesByType</strong> relationship.
    </p>
<h1>IfcProcedureTypeEnum</h1>
                                
                                <h1>IfcRelSequence</h1>
                                
                                <p>
      <span class="self-ref">IfcRelSequence</span> is a
      sequential relationship between processes where one process
      must occur before the other in time and where the timing of
      the relationship may be described as a type of sequence.
      The relating process
      (<i>IfcRelSequence.RelatingProcess</i>) is considered to be
      the predecessor in the relationship (has precedence) whilst
      the related process (<i>IfcRelSequence.RelatedProcess</i>)
      is the successor.
    </p>
    <p>
      <span class="self-ref">IfcRelSequence</span> is defined as one-to-one
      relationship; therefore it assigns one predecessor to one
      successor.
    </p>
    
    
    <p class="use-head">Use definitions</p>
    <p>
      <span class="self-ref">IfcRelSequence</span> is used to describe the logical
      sequence relationship that exists between two processes.
      This logical relationship identifies that there is a
      predecessor or relating process and a successor or related
      process. In IFC, there may be one predecessor and one
      successor in the relationship. Many occurrences of
      <span class="self-ref">IfcRelSequence</span> may exist to describe the sequence
      relationships of a predecessor task with many successor
      tasks or of many predecessor tasks with one successor task,
      thus enabling a m:n sequence relationship between tasks.
      Please note that sequence relationships can be used to define 
      dependencies between process occurrences but also between 
      process types (for further information see <strong>IfcRelDefinesByObject</strong> 
      and <strong>IfcTaskType</strong>). In case of defining dependencies between 
      process occurrences sequence relationships should stay 
      within the limits of a directed, non-cyclic graph.
    </p>
    <p>
      A sequence type may be set for a sequence. For tasks
      assigned to a work schedule, it is expected that the
      sequence type will be asserted. For a process map, where
      the sequence relationship between processes is simply a
      logical flow, it need not be asserted.
    </p>
    <p>
      A time lag may be assigned to a sequence, and the sequence
      type defines the way in which the time lag applies to the
      sequence either as a ratio or percentage of time duration
      (e.g. start successor task when predecessor is 50%
      complete) or as a time measure (e.g. start successor task 1
      week after commencement of the predecessor task). Care
      should be used when assigning a time lag to a sequence
      depending on the setting of the sequence type since there
      is no checking that the time lag value is in keeping with
      the sequence type set.
    </p>
 <h1>IfcSequenceEnum</h1>
                                
                                <h1>IfcTask</h1>
                                
                                <p>An <span class="self-ref">IfcTask</span> is an identifiable unit of work to be carried out in a construction project.</p>
<p>A task is typically used to describe an activity for the construction or installation of products, but is not
limited to these types. For example it might be used to describe design processes, move operations and other
design, construction and operation related activities as well.</p>
<p>
Quantities of resources
 consumed by the task are dealt with by defining the
 <strong>IfcElementQuantity</strong> for the resource and not at the
 instance of <span class="self-ref">IfcTask</span>.</p>



    <p class="use-head">Attribute use definition</p>
    <p>
      Each occurrence of <span class="self-ref">IfcTask</span> is given a name that is
      indicative of its content (<i>IfcRoot.Name</i>). A textual
      description of the task may be provided and this may be
      further elaborated by a narrative long description
      (<i>IfcProcess.LongDescription</i>). A work method may be
      declared for the method of work used in carrying out a
      task. A task is identified as being either a milestone task
      or not. A milestone task is defined by the marker
      <i>IsMilestone</i>. and has no duration. A status and
      priority for each task may also be set.
    </p>
    <p class="use-head">Time and duration use definition</p>
    <p>
      Compared to previous IFC releases, basic task time
      information (scheduled start time, scheduled finish
      time, duration) is now directly attached to <span class="self-ref">IfcTask</span>
      through the <i>TaskTime</i> attribute. Regular tasks are
      defined through <strong>IfcTaskTime</strong>. Recurring tasks are
      defined through <strong>IfcTaskTimeRecurring</strong>. In case a
      regular task is derived from a recurring task both tasks
      should be linked together through a <strong>IfcRelNests</strong>
      relationship, where <i>IfcRelNests.IsNestedBy</i> points to
      the recurring task and <i>IfcRelNests.Nests</i> points to
      all regular tasks that have been derived from the recurring
      task.
    </p>
    <p class="use-head">Representation of  other activities</p>
    <p>
      The use definitions for <span class="self-ref">IfcTask</span> have been generalised to
      represent other activities as well, including activities
      that had been defined by own entities in previous IFC
      releases. This includes
    </p>
    <ul>
      <li>Order actions</li>
      <li>Move operations</li>
    </ul>
    <p>
      <span class="self-ref">IfcTask</span> represents an order that might be carried
      out by a Helpdesk acting the role of interface for the
      organization between the facility user and the functional
      requirement of fulfilling their needs. The actual task
      represented by the <span class="self-ref">IfcTask</span> entity is turning a
      request into an order and initiating the action that will
      enable the order to be completed. The
      <strong>IfcProjectOrder</strong> or one of its subtypes including
      maintenance work order, is related to the <span class="self-ref">IfcTask</span>
      using <strong>IfcRelAssignsToControl</strong>.
    </p>
    <p>
      <span class="self-ref">IfcTask</span> can also be used to describe an activity
      that moves people, groups within an organization or
      complete organizations together with their associated
      furniture and equipment from one place to another. It thus
      replaces the previous IFC entity IfcMove. The functionality
      is represented in <span class="self-ref">IfcTask</span> as follows:<br>
    </p>
<ul>
      <li>Move from: The place from which actors and their
      associated equipment are moving.<br>
      Use <strong>IfcRelAssignsToProcess</strong> where
      <i>RelatingProcess</i> points to the task and
      <i>RelatedObjects</i> holds the location(s) from which to
      move.</li>
      <li>Move to: The place to which actors and their
      associated equipment are moving.<br>
      Use <strong>IfcRelAssignsToProduct</strong> where
      <i>RelatedObjects</i> points to the task(s) and
      <i>RelatingProduct</i> points to the location to which to
      move.</li>
     <li>Punch list: A list of points concerning a move that
      require attention.<br>
      Use <i>LongDescription</i> or else identify sub-tasks to
      track punch list items individually via <strong>IfcRelNests</strong>.</li>
</ul>

<h1>IfcTaskType</h1>
                                
                                <p>
      An <span class="self-ref">IfcTaskType</span> defines a
      particular type of task that may be specified for use
      within a work control.
    </p>
    
    <p>
      An <span class="self-ref">IfcTaskType</span> provides for all forms of types of
      task that may be specified. It is a reference definition 
      for a unit of work that may be broken down into (a sequence of) 
      subtasks. Please note that a reference definition can not be 
      part of a workflow definition, i.e. <span class="self-ref">IfcTaskType</span> 
      instances define the most abstract level of a reference process 
      without dependencies to other reference processes.
    </p>
    <p>
      Usage of <span class="self-ref">IfcTaskType</span> defines the parameters for one
      or more occurrences of <strong>IfcTask</strong>. Parameters may be
      specified through property sets that may be enumerated in
      the <strong>IfcTaskTypeEnum</strong> data type or through explict
      attributes of <span class="self-ref">IfcTaskType</span>. Task occurrences
      (<strong>IfcTask</strong> entities) are linked to the task type
      through the <strong>IfcRelDefinesByType</strong> relationship.
    </p>
    <p>
      of a task template library. Please note that in this
      example the task type is further subdivided into tasks that
      define task times (for example, duration) and/or a task sequence.
    </p>
<table><tr><td><img src="../../../figures/ifctasktype_instantiation_diagram.png"
      alt="task type instantiation diagram" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcTaskTypeEnum</h1>
                                
                                <h1>IfcWorkCalendar</h1>
                                
                                <p>An <span class="self-ref">IfcWorkCalendar</span> defines working and non-working time periods for tasks and resources. It enables to define both specific time periods, such as from 7:00 till 12:00 on 25th August 2009, as well as repetitive time periods based on frequently used recurrence patterns, such as each Monday from 7:00 till 12:00 between 1st March 2009 and 31st December 2009.</p>



<p>A work calendar is a subtype of <strong>IfcControl</strong> and thus inherits the feature for controlling other objects through <strong>IfcRelAssignsToControl</strong>, which is used to define a work calendar for tasks (<strong>IfcTask</strong>) and resources (<strong>IfcResource</strong>). It also inherits a name and description attribute, whereas a name shall be given and a description may be given as an indication of its content and usage.</p>

<p>The definition of time periods can be derived from a base calendar and/or modified/defined by a set of working times and non-working exception times. All time periods defined by <i>IfcWorkCalendar.ExceptionTimes</i> override the time periods inherited from the base calendar (base calendar is defined as the next applicable calendar for the task or resource). Thus, exception times replace the working times from the base calendar.</p>

<p>

<table summary="instantiation diagram">
<tr><td><img src="../../../figures/ifcworkcalendar_instantiation_diagram.png"
alt="task type instantiation diagram" border="0"></td></tr>
<tr><td><p class="figure">
</table>


<h1>IfcWorkCalendarTypeEnum</h1>
                                
                                <h1>IfcWorkControl</h1>
                                
                                <p>
      An <span class="self-ref">IfcWorkControl</span> is an abstract supertype which captures information that is common to both <strong>IfcWorkPlan</strong> and <strong>IfcWorkSchedule</strong>.
    </p>
    
    
    <p>
      A work control may have resources assigned to it. This is
      handled by the <strong>IfcRelAssignsToControl</strong> relationship.
      A work control should also define a context that gives
      further information about its usage. If no special context
      information is required then the <strong>IfcProject</strong> instance
      as a global context should be used instead. An explicit
      link between the work control and the <strong>IfcProject</strong> via
      <strong>IfcRelDeclares</strong> should then be provided.
    </p>
    <p>
      The attribute <i>IfcWorkControl.Purpose</i> is used to
      define the purpose of either a work schedule or a work
      plan. In the case of <strong>IfcWorkPlan</strong>, the purpose
      attribute can be used to determine if the work plan is for
      cost estimating, task scheduling or some other defined
      purpose.
    </p>
<h1>IfcWorkPlan</h1>
                                
                                <p>
      An <span class="self-ref">IfcWorkPlan</span> represents work plans in a construction or a facilities management project.
    </p>
    
    <p>
      A work plan contains a set of work schedules for different
      purposes (including construction and facilities
      management). Contained work schedules are defined through
      the <strong>IfcRelAggregates</strong> relationship. Through
      inheritance from <strong>IfcWorkControl</strong> it is also possible
      to define references to activities (for example, <strong>IfcTask</strong>)
      and resources used in the work plan.
    </p>
    <p>
      A work plan has information such as start date, finish
      date, total free float, and so on. <span class="self-ref">IfcWorkPlan</span> can
      also refer to the construction project represented by the
      single <strong>IfcProject</strong> instance (please also check the
      definition of <strong>IfcWorkControl</strong>).
    </p>
    <p>
      
      defines (1) contained work schedules through
      <strong>IfcRelAggregates</strong> and (2), if not assigned otherwise
      to contained work schedules, assigned tasks and resources
      through <strong>IfcRelAssignsToControl</strong>.
    </p>
<table>
<tr><td><img src="../../../figures/ifcworkplan_instantiation_diagram.png" alt=
      "work plan instantiation diagram" border="0" width="500"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcWorkPlanTypeEnum</h1>
                                
                                <h1>IfcWorkSchedule</h1>
                                
                                <p>
      An <span class="self-ref">IfcWorkSchedule</span>
      represents a task schedule of a work plan, which in turn
      can contain a set of schedules for different purposes.
    </p>
    

    <p class="use-head">Declaration Use Definition</p>
    <p>
      <span class="self-ref">IfcWorkSchedule</span> can reference a project (the
      single <strong>IfcProject</strong> instance) via
      <strong>IfcRelDeclares</strong>.</p>

    <p>
      
      that defines (1) a context through <strong>IfcRelDeclares</strong>
      (not necessarily the project) and (2) controls tasks
      (typically the schedule summary task) and resources. Please
      note that a work calendar shall be assigned to the summary
      task and not the work schedule.
    </p>

<table>
<tr><td><img src="../../../figures/ifcworkschedule_instantiation_diagram.png" alt=
      "work schedule instantiation diagram" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcWorkScheduleTypeEnum</h1>
                                
                                <h1>IfcAnnotation</h1>
                                
                                <p>
      An annotation is a graphical representation within the geometric (and spatial) context
      of a project, that adds a note or meaning to the objects which constitutes the project model. Annotations include
      additional points, curves, text, dimensioning, hatching and other forms of graphical notes. It also include symbolic
      representations of additional model components, not representing products or spatial structures, such as survey points,
      contour lines or similar.
    </p>
    <blockquote class="note">
        NOTE&nbsp; Additional presentation information (often 2D) such as tag number or hatching, that is directly
        related to a particular product representation is included within the <strong>IfcProductDefinitionShape</strong>
        having various <strong>IfcShapeRepresentation</strong>'s of the <strong>IfcElement</strong> (and its subtypes). Only those
        presentation information, that cannot be directly related to a single product, have to be wrapped within the
        <span class="self-ref">IfcAnnotation</span>.
    </blockquote>
    <p>
      If available, the annotation should be related to the spatial context of the project, by containing the
      annotation within the appropriate level of the building structure (site, building, storey, or space). This is
      handled by the <strong>IfcRelContainedInSpatialStructure</strong> relationship.
    </p>
    
    <p class="use-head">Attribute use definition</p>
    <p>
      The <span class="self-ref">IfcAnnotation</span> can provide specific 0D, 1D, and 2D geometric items as representation of the annotation,
      offering annotation point, curves, and surfaces. The following values shall be used for the <i>ObjectType</i>.
    </p>
    <ul>
      <li>
        <b>'Annotation point'</b> is an annotation provided by a point that has additional semantic. The inherited
        attribute <i>ObjectType</i> should be used to capture the type of point annotation, some predefined values are:
        <ul>
          <li>'<b>SurveyPoint</b>: A single survey point represented by a Cartesian point. A property set may add the
          conditions (method, accurracy, etc. to the survey point).
          </li>
          <li>'<b>SurveyArea</b>': A set of survey points represented by Cartesian point. These coordinates are determined 
          relative to the coordinates of a reference point, which acts as the datum for the survey. Properties attached apply
          equally to all points. The difference in elevation of the survey points enables terrain to be determined.<br>
          </li>
        </ul>
      </li>
      <li>
        <b>'Annotation curve'</b> is an annotation provided by a
        curve that has additional semantic. The inherited
        attribute <i>ObjectType</i> should be used to capture the
        type of curve annotation, some predefined values are:
        <ul>
          <li>'<b>ContourLine</b>': A line of constant
          elevation typically used on geographic maps where the
          spacing of lines at constant intervals of elevation may
          be used as an indication of slope.
          </li>
          <li>'<b>IsoBar</b>': A line of constant pressure
          typically used on weather maps or to show pressure
          gradient in spaces, chambers or externally.
          </li>
          <li>'<b>IsoLux</b>': A line of constant illumination
          typically used to show the distribution of illumination
          levels and/or daylighting in a space or externally.
          </li>
          <li>'<b>IsoTherm</b>': A line of constant temperature
          typically used to show the distribution and effect of
          heating or cooling within a space or to show
          temperature distribution on a geographic map.<br>
          </li>
        </ul>
      </li>
      <li>
        <b>'Annotation surface'</b> is an annotation provided by
        a surface that has additional semantic. The inherited
        attribute <i>ObjectType</i> should be used to capture the
        type of surface annotation, some predefined values are:
        <ul>
          <li>'<b>SurveyArea</b>': A surface patch based on survey points.<br>
          </li>
        </ul>
      </li>
    </ul>
<h1>IfcAssemblyPlaceEnum</h1>
                                
                                <h1>IfcBuilding</h1>
                                
                                <p>
      A building represents a structure that provides shelter for
      its occupants or contents and stands in one place. The
      building is also used to provide a basic element within the
      spatial structure hierarchy for the components of a building
      project (together with site, storey, and space).
</p>
<blockquote class="extDef">
      NOTE&nbsp; Definition from ISO 6707-1:<br>
      Construction work
      that has the provision of shelter for its occupants or
      contents as one of its main purpose and is normally designed
      to stand permanently in one place.
</blockquote>
<p>
      A building is (if specified) associated to a site. A building
      may span over several connected or disconnected buildings.
      Therefore building complex provides for a collection of
      buildings included in a site. A building can also be
      decomposed in (vertical) parts, where each part defines a
      building section. This is defined by the composition type
      attribute of the supertype <i>IfcSpatialStructureElements</i>
      which is interpreted as follow:
</p>
<ul>
 <li><b>COMPLEX</b>: building complex</li>
 <li><b>ELEMENT</b>: building</li>
 <li><b>PARTIAL</b>: building section</li>
</ul>
<p>
      The <span class="self-ref">IfcBuilding</span> is used to build the spatial structure
      of a building (that serves as the primary project breakdown
      and is required to be hierarchical). The spatial structure
      elements are linked together by using the objectified
      relationship <strong>IfcRelAggregates</strong>.
</p>





    <p>
      
      structure. It also serves as the spatial container for
      building and other elements.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Detailed requirements on mandatory element containment
      and placement structure relationships are given in view
      definitions and implementer agreements.
    </blockquote>
    <table border="0" cellpadding="2" cellspacing="2" summary=
    "Spatial structure">
      <tr>
        <td valign="top">
          <img src="../../../figures/IfcBuilding-SpatialStructure.png" alt=
          "IfcBuildingStorey as part of a spatial structure" width=
          "800" height="420" border="0">
        </td>
      </tr>
      <tr>
        <td>
          <p class="figure">
          </p>
        </td>
      </tr>
    </table>
    <p>
      Systems, such as building service or electrical distribution
      systems, zonal systems, or structural analysis systems,
      relate to <span class="self-ref">IfcBuilding</span> by using the objectified
      relationship <strong>IfcRelServicesBuildings</strong>.
    </p>
    <p class="use-head">
      Attribute Use Definition
    </p>
    <p>
      
      <span class="self-ref">IfcBuilding</span>. It is used to provide the height above
      sea level of the project height datum for this building, that
      is, the internal height 0.00. The height 0.00 is often used
      as a building internal reference height and equal to the
      floor finish level of the ground floor.
    </p>
    <ul>
      <li>base elevation of building provided by:
      <i>IfcBuilding.ElevationOfRefHeight</i>, it is usually the
      top of construction slab
      </li>
      <li>base elevation of terrain at the perimeter of the
      building provided by: <i>IfcBuilding.ElevationOfTerrain</i>,
      it is usually the minimum elevation is sloped terrain
      </li>
      <li>total height of building, also referred to as ridge
      height (top of roof structure, e.g the ridge against
      terrain): provided by BaseQuantity with Name="TotalHeight"
      </li>
      <li>eaves height of building (base of roof structure, e.g the
      eaves against terrain): provided by BaseQuantity with
      Name="EavesHeight"
      </li>
    </ul>
    <table border="0" cellpadding="2" cellspacing="2">
      <tbody>
        <tr valign="top">
          <td align="left" valign="top">
            <img src="../../../figures/IfcBuilding_Heights.png" alt=
            "building heights" border="0" height="420" width=
            "800">&nbsp;
          </td>
        </tr>
        <tr>
          <td>
            <p class="figure">
            </p>
          </td>
        </tr>
      </tbody>
    </table>
<h1>IfcBuildingElement</h1>
                                
                                <p>The building element comprises all elements that are primarily
part of the construction of a building, i.e., its structural and
space separating system.</p>
<blockquote class="extDef">"Major functional part of a building,
examples are foundation, floor, roof, wall." ISO
6707-1</blockquote>
<blockquote class="example">EXAMPLE&nbsp; Building elements are
walls, beams, or doors, they are all physically existent and
tangible things.</blockquote>
<p>The <span class="self-ref">IfcBuildingElement</span> utilizes the following
capabilities mainly through inverse attributes referencing
objectified relationships:</p>
<blockquote class="note">NOTE&nbsp; View definitions and
implementer agreements will determine those relationships that have
to be supported in actual exchange.</blockquote>
<ol>
<li>Grouping - being part of a logical group of objects
<ul>
<li>objectified relationship: <strong>IfcRelAssignsToGroup</strong></li>
<li>object referenced by relationship: <strong>IfcGroup</strong> (and
subtypes)</li>
<li>inverse attribute: <i>HasAssignment</i></li>
</ul>
</li>
<li>Work processes - reference to work tasks, in which this
building element is used
<ul>
<li>objectified relationship: <strong>IfcRelAssignsToProcess</strong></li>
<li>object referenced by relationship: <strong>IfcProcess</strong> (and
subtypes)</li>
<li>inverse attribute: <i>HasAssignments</i></li>
</ul>
</li>
<li>Structural member reference - information whether the building
element is represented in a structural analysis model by a
structural member
<ul>
<li>objectified relationship: <strong>IfcRelAssignsToProduct</strong></li>
<li>object referenced by relationship: <strong>IfcStructuralMember</strong>
(and by default <strong>IfcStructuralCurveMember</strong>)</li>
<li>inverse attribute: <i>HasAssignments</i></li>
</ul>
</li>
<li>Aggregation - aggregated together with other elements to form
an aggregate
<ul>
<li>objectified relationship: <strong>IfcRelAggregates</strong></li>
<li>object referenced by relationship: <strong>IfcElement</strong> (and
subtypes)</li>
<li>inverse attribute (for container): <i>IsDecomposedBy</i></li>
<li>inverse attribute (for contained parts): <i>Decomposes</i></li>
</ul>
</li>
<li>Material - assignment of material used by this building element
<ul>
<li>objectified relationship: <strong>IfcRelAssociatesMaterial</strong></li>
<li>object referenced by relationship: <strong>IfcMaterialSelect</strong>
(and selected items)</li>
<li>inverse attribute: <i>HasAssociations</i></li>
</ul>
</li>
<li>Classification - assigned reference to an external
classification
<ul>
<li>objectified relationship:
<strong>IfcRelAssociatesClassification</strong></li>
<li>object referenced by relationship:
<i>IfcClassificationNotationSelect</i> (and selected items, default
<strong>IfcClassificationReference</strong>)</li>
<li>inverse attribute: <i>HasAssociations</i></li>
</ul>
</li>
<li>Library - assigned reference to an external library item
reference
<ul>
<li>objectified relationship:
<strong>IfcRelAssociatesClassification</strong></li>
<li>object referenced by relationship: <strong>IfcLibrarySelect</strong> (and
selected items, default <strong>IfcLibraryReference</strong>)</li>
<li>inverse attribute: <i>HasAssociations</i></li>
</ul>
</li>
<li>Documentation - assigned reference to an external documentation
<ul>
<li>objectified relationship:
<i>IfcRelAssociatesDocumentation</i></li>
<li>object referenced by relationship: <strong>IfcDocumentSelect</strong>
(and selected items, default <strong>IfcDocumentReference</strong>)</li>
<li>inverse attribute: <i>HasAssociations</i></li>
</ul>
</li>
<li>Type - reference to the common product type information for the
element occurrence
<ul>
<li>objectified relationship: <strong>IfcRelDefinesByType</strong></li>
<li>object referenced by relationship:
<strong>IfcBuildingElementType</strong> (and subtypes)</li>
<li>inverse attribute: <font color=
"#0000FF"><i>IsTypedBy</i></font></li>
</ul>
</li>
<li>Properties - reference to all attached properties, including
quantities
<ul>
<li>objectified relationship: <strong>IfcRelDefinesByProperties</strong></li>
<li>object referenced by relationship:
<strong>IfcPropertySetDefinition</strong> (default
<strong>IfcPropertySet</strong>)</li>
<li>inverse attribute: <i>IsDefinedBy</i></li>
</ul>
</li>
<li>Connection - connectivity to other elements, including the
definition of the joint
<ul>
<li>objectified relationship: <strong>IfcRelConnectsElements</strong></li>
<li>object referenced by relationship: <strong>IfcElement</strong></li>
<li>inverse attribute: <i>ConnectedTo</i></li>
<li>inverse attribute: <i>ConnectedFrom</i></li>
</ul>
</li>
<li>Realization - information, whether the building element is used
to realize a connection (e.g. as a weld in a connection between two
members)
<ul>
<li>objectified relationship:
<strong>IfcRelConnectsWithRealizingElements</strong></li>
<li>object referenced by relationship: <strong>IfcElement</strong></li>
<li>inverse attribute: <i>IsConnectionRealization</i></li>
</ul>
</li>
<li>Assignment to spatial structure - hierarchical assignment to
the right level within the spatial structure
<ul>
<li>objectified relationship:
<strong>IfcRelContainedInSpatialStructure</strong></li>
<li>object referenced by relationship:
<strong>IfcSpatialStructureElement</strong></li>
<li>inverse attribute: <i>ContainedInStructure</i></li>
</ul>
</li>
<li>Reference to spatial structure(s) - non hierarchical reference
to one or more elements within the spatial structure (e.g. a
curtain wall, being contained in the building, references several
stories)
<ul>
<li>objectified relationship:
<strong>IfcRelReferencedInSpatialStructure</strong></li>
<li>object referenced by relationship:
<strong>IfcSpatialElement</strong></li>
<li>inverse attribute: <i>ReferencedInStructure</i></li>
</ul>
</li>
<li>Boundary - provision of space boundaries by this building
element
<ul>
<li>objectified relationship: <strong>IfcRelSpaceBoundary</strong></li>
<li>object referenced by relationship: <strong>IfcSpace</strong></li>
<li>inverse attribute: <i>ProvidesBoundaries</i></li>
</ul>
</li>
<li>Coverings - assignment of covering elements to this building
element (note: normally covering elements are assigned to the
space, only used for special cases)
<ul>
<li>objectified relationship: <strong>IfcRelCoversBldgElements</strong></li>
<li>object referenced by relationship: <strong>IfcCovering</strong></li>
<li>inverse attribute: <i>HasCoverings</i></li>
</ul>
</li>
<li>Voids - information, whether the building element includes
openings, recesses or other voids
<ul>
<li>objectified relationship: <strong>IfcRelVoidsElement</strong></li>
<li>object referenced by relationship:
<strong>IfcFeatureElementSubtraction</strong> (default
<strong>IfcOpeningElement</strong>)</li>
<li>inverse attribute: <i>HasOpenings</i></li>
</ul>
</li>
<li>Projection - information, whether the building element has
projections (such as a fascia)
<ul>
<li>objectified relationship: <strong>IfcRelProjectsElement</strong></li>
<li>object referenced by relationship:
<strong>IfcFeatureElementAddition</strong> (default
<strong>IfcProjectionElement</strong>)</li>
<li>inverse attribute: <i>HasProjections</i></li>
</ul>
</li>
<li>Filling - information whether the building element is used to
fill openings
<ul>
<li>objectified relationship: <strong>IfcRelFillsElement</strong></li>
<li>object referenced by relationship:
<strong>IfcOpeningElement</strong></li>
<li>inverse attribute: <i>FillsVoids</i></li>
</ul>
</li>
</ol>


<h1>IfcBuildingElementType</h1>
                                
                                <p>
      The element type
      (<span class="self-ref">IfcBuildingElementType</span>) defines a list of commonly
      shared property set definitions of a building element and
      an optional set of product representations. It is used to
      define an element specification (i.e. the specific product
      information, that is common to all occurrences of that
      product type).
    </p>
    <blockquote class="note">
NOTE&nbsp; The product representations are
        defined as representation maps (at the level of the
        supertype <strong>IfcTypeProduct</strong>, which gets assigned by
        an element occurrence instance through the
        <i>IfcShapeRepresentation.Item[1]</i> being an
        <strong>IfcMappedItem</strong>.
    </blockquote>
    <p>
      A building element type is used to define the common
      properties of a certain type of a building element that may
      be applied to many instances of that feature type to assign
      a specific style. Building element types (or the
      instantiable subtypes) may be exchanged without being
      already assigned to occurrences.
    </p>
    <p>
      The <span class="self-ref">IfcBuildingElementType</span> is an abstract type.
      Occurrences of subtypes of the
      <span class="self-ref">IfcBuildingElementType</span> are represented by instances
      of the appropriate subtypes of <strong>IfcBuildingElement</strong>.
    </p>
    
<h1>IfcBuildingStorey</h1>
                                
                                <p>The building storey has an
elevation and typically represents a (nearly) horizontal
aggregation of spaces that are vertically bound.</p>
<p>A storey is (if specified) associated to a building. A storey
may span over several connected storeys. Therefore storey complex
provides for a collection of storeys included in a building. A
storey can also be decomposed in (horizontical) parts, where each
part defines a partial storey. This is defined by the composition
type attribute of the supertype
<i>IfcSpatialStructureElements</i> which is interpreted as
follow:</p>
<ul>
<li><b>COMPLEX</b>: building storey complex</li>
<li><b>ELEMENT</b>: building storey</li>
<li><b>PARTIAL</b>: partial building storey</li>
</ul>
<blockquote class="example">
EXAMPLE&nbsp; In split level houses, a storey is split into two or more partial storeys, each with a different elevation. It can be handled by defining a storey, which includes two or more partial storeys with the individual elevations.</blockquote>

<p>The <span class="self-ref">IfcBuildingStorey</span> is used to build the spatial
structure of a building (that serves as the primary project
breakdown and is required to be hierarchical). The spatial
structure elements are linked together by using the objectified
relationship <strong>IfcRelAggregates</strong>.</p>


<p>
s patial structure. It also serves as the spatial container for 
building and other elements.</p>

<blockquote class="note">NOTE&nbsp; Detailed requirements on mandatory element
containment and placement structure relationships are given in
view definitions and implementer agreements.</blockquote>


<table summary="Spatial structure">
 
<tr>
  <td valign="top"><img src=
"../../../figures/IfcBuildingStorey-SpatialStructure.png" alt=
"IfcBuildingStorey as part of a spatial structure" width="800" 
height="420" border="0">
  </td>
 </tr>
 
<tr>
  <td><p class="figure">
  </td>
 </tr>

</table>



<p class="use-head">Attribute Use Definition</p>

<p>
<ul>
<li>elevation of storey provided by: <i>IfcBuildingStorey.Elevation</i> as a local height value
relative to <i>IfcBuilding.ElevationOfRefHeight</i>, it is usually the top of construction slab</li>
<li>net height of storey, also referred to as total height or system height (top of construction slab to top of construction slab above): provided by BaseQuantity with Name="GrossHeight"</li>
<li>net height of storey (top of construction slab to bottom of construction slab above): provided by BaseQuantity with Name="NetHeight"</li>
</ul>

<table summary="attributes" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td align="left" valign="top"><img src=
"../../../figures/IfcBuildingStorey_Heights.png" alt="space heights"
border="0" height="400" width="450"></td>
<td align="left" valign="top"></td></tr>
<tr><td><p class="figure">
</tbody>
</table>

<h1>IfcCivilElement</h1>
                                
                                <p>An <span class="self-ref">IfcCivilElement</span> is a generalization of all elements within a civil engineering works. It includes in particular
all occurrences of typical linear construction works, such as road segments, bridge segments, pavements, etc. Depending on
the context of the construction project, included building work, such as buildings or factories, are represented as a collection 
of <strong>IfcBuildingElement</strong>'s, distribution systems, such as piping or drainage, are represented as a collection of
<strong>IfcDistributionElement</strong>'s, and other geographic elements, such as trees, light posts, traffic signs etc. are represented
as <strong>IfcGeographicElement</strong>'s.</p>

<blockquote class="note">NOTE&nbsp; The <span class="self-ref">IfcCivilElement</span> has been intruduced as a stub for future extensions of this specification 
to include an object model for civil engineering works.</blockquote>


<h1>IfcCivilElementType</h1>
                                
                                <p>An <span class="self-ref">IfcCivilElementType</span> is used to define an element specification of an element used within civil engineering works. Civil element types
include for different types of element that may be used to represent information for construction works external to a building. 
<span class="self-ref">IfcCivilElementType</span>'s may include:
</p>
<ul>
 <li>linear elements such as sections of a roadway (including carriageway/pavement, verge, median, marker line, kerb etc.);</li>
 <li>elements for connections and junctions including traffic roundabouts, T junctions, 4 way junctions; </li>
 <li>elements for supporting structures such as piers, piles, pylons, and similar.</li>
</ul>
<p>The specification of the specific types is provided by the inherited attribute <i>IfcElementType.ElementType</i> given as an <strong>IfcLabel</strong>.
</p>
<blockquote class="note">NOTE&nbsp; This is due to the range of choices of element type that are available and their expression in different
languages. It is not considered possible to create a reasonably full list of types within an enumeration. It is suggested that selection of
the relevant type be drawn from an available 'feature catalog'.
</blockquote>
<blockquote class="note">NOTE&nbsp; The <span class="self-ref">IfcCivilElementType</span> has been intruduced as a stub for future extensions of this specification 
to include an object model for civil engineering works.</blockquote>
<h1>IfcDistributionElement</h1>
                                
                                <p>
      This entity is a generalization of all elements
      that participate in a distribution system. Typical examples
      of <span class="self-ref">IfcDistributionElement</span> are (among others):
    </p>
    <ul>
      <li>building service elements within a heating systems
      </li>
      <li>building service elements within a cooling system
      </li>
      <li>building service elements within a ventilation system
      </li>
      <li>building service elements within a plumbing system
      </li>
      <li>electrical elements
      </li>
      <li>elements within a communication network
      </li>
    </ul>
    <p>
      The <span class="self-ref">IfcDistributionElement</span> is further specialized in
      the IFC model. Direct instantiation of
      <span class="self-ref">IfcDistributionElement</span> without an assigned subtype of
      <strong>IfcDistributionElementType</strong> provides the meaning of an
      distribution element proxy.
    </p>
    
			
    
		<p>&nbsp;</p>
<h1>IfcDistributionElementType</h1>
                                
                                <p>
      The
      <span class="self-ref">IfcDistributionElementType</span> defines a list of commonly
      shared property set definitions of an element and an optional
      set of product representations. It is used to define an
      element specification (i.e. the specific product information,
      that is common to all occurrences of that product type).
    </p>
    <blockquote class="note">NOTE&nbsp; The product representations are defined as
      representation maps (at the level of the supertype
      <strong>IfcTypeProduct</strong>, which gets assigned by an element
      occurrence instance through the
      <i>IfcShapeRepresentation.Item[1]</i> being an
      <strong>IfcMappedItem</strong>.</blockquote>
    <p>
      A distribution element type is used to define the common
      properties of a certain type of a distribution element that
      may be applied to many instances of that feature type to
      assign a specific style. Distribution element types (or the
      instantiable subtypes) may be exchanged without being already
      assigned to occurrences.
    </p>
    <p>
      The occurrences of the <span class="self-ref">IfcDistributionElementType</span> are
      represented by instances of <strong>IfcDistributionElement</strong> (or
      its subtypes).
    </p>
    
    
    
<h1>IfcElement</h1>
                                
                                <p>An element is a generalization of all components
that make up an AEC product. Those elements can be logically
contained by a spatial structure element that constitutes a
certain level within a project structure hierarchy (site,
building, storey or space). This is done by using the
<strong>IfcRelContainedInSpatialStructure</strong> relationship.</p>
<p>Elements are physically existent objects, although they might
be void elements, such as holes. Elements either remain
permanently in the AEC product, or only temporarily, as formwork
does. Elements can be either assembled on site or
pre-manufactured and built in on site.</p>

<blockquote class="example">
EXAMPLE&nbsp; Examples of elements in a building
construction context are walls, floors, windows and
recesses.
</blockquote>

<p>An element can have material and quantity information assigned
through the <strong>IfcRelAssociatesMaterial</strong> and
<strong>IfcRelDefinesByProperties</strong> relationship.</p>
<p>In addition an element can be declared to be a specific
occurrence of an element type (and thereby be defined by the
element type properties) using the <strong>IfcRelDefinesByType</strong>
relationship.</p>
<p>An element can also be defined as an element assembly that is
a group of semantically and topologically related elements that
form a higher level part of the AEC product. Those element
assemblies are defined by virtue of the <strong>IfcRelAggregates</strong>
relationship.</p>

<blockquote class="example">
EXAMPLE&nbsp; Examples for element assembly are complete Roof Structures, made by several Roof Areas, or a Stair,
composed by Flights and Landings.
</blockquote>

<p>Elements that performs the same function may be grouped by an
"Element Group By Function". It is realized by an instance of
<strong>IfcGroup</strong> with the <i>ObjectType</i> =
'ElementGroupByFunction".</p>



<p class="use-head">Quantity Use Definition</p>
<p>The quantities relating to the <span class="self-ref">IfcElement</span> are defined
by the <strong>IfcElementQuantity</strong> and attached by the
<strong>IfcRelDefinesByProperties</strong>. A detailed specification for
individual quantities is introduced at the level of subtypes of
<span class="self-ref">IfcElement</span>.</p>

<p class="use-head">Geometry Use Definitions</p>
<p>The geometric representation of any <span class="self-ref">IfcElement</span> is given
by the <strong>IfcProductDefinitionShape</strong> and
<strong>IfcLocalPlacement</strong> allowing multiple geometric
representations. A detailed specification for the local placement
and shape representaion is introduced at the level of subtypes of
<span class="self-ref">IfcElement</span>.</p>
<h1>IfcElementAssembly</h1>
                                
                                <p>The <span class="self-ref">IfcElementAssembly</span> represents complex element assemblies aggregated from several
elements, such as discrete elements, building elements, or other elements.</p>

<blockquote class="example">EXAMPLE Steel construction assemblies, such as trusses and different kinds of frames, can be represented by the
<span class="self-ref">IfcElementAssembly</span> entity. Other examples include slab fields aggregated from a number of precast concrete slabs or
reinforcement units made from several reinforcement bars. Also bathroom units, staircase sections and other premanufactured or
precast elements are examples of the general <span class="self-ref">IfcElementAssembly</span> entity</blockquote>

<blockquote class="note">NOTE&nbsp; The <span class="self-ref">IfcElementAssembly</span> is a general purpose entity that is required to be decomposed. Also
other subtypes of IfcElement can be decomposed, with some dedicated entities such as <strong>IfcWallElementedCase</strong> and
<strong>IfcSlabElementedCase</strong>.</blockquote>

<p>The assembly structure can be nested, i.e. an <span class="self-ref">IfcElementAssembly</span> could be an aggregated part within another <span class="self-ref">IfcElementAssembly</span>.</p>
<blockquote class="note">NOTE&nbsp; View definitions and/or implementer agreements may restrict the number of allowed levels of
nesting.</blockquote>

<p>The geometry of an <span class="self-ref">IfcElementAssembly</span> is generally
formed from its components, in which case it does not need to
have an explicit geometric representation. In some cases it may
be useful to also expose an own explicit representation of the 
aggregate.</p>

<blockquote class="note">NOTE&nbsp; View definitions or implementer
agreements may further constrain the applicability of certain
shape representations at the <span class="self-ref">IfcElementAssembly</span> in respect
of the shape representations of its parts.</blockquote>





<p class="spec-head">Informal Propositions:</p>

<ol>
 
<li>The <span class="self-ref">IfcElementAssembly</span> shall have an aggregation
relationship to the contained parts, i.e. the (INV)
<i>IsDecomposedBy</i> relationship shall be utilzed.</li>

</ol>


<h1>IfcElementAssemblyType</h1>
                                
                                <p>The <span class="self-ref">IfcElementAssemblyType</span>
defines a list of commonly shared property set definitions of an
element and an optional set of product representations. It is
used to define an element specification (i.e. the specific
product information, that is common to all occurrences of that
product type).</p>

<blockquote class="note">
NOTE&nbsp; The product representations are defined
as representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.
</blockquote>

<p>An element assembly type is used to define the common
properties of a certain type of an element assembly that may be
applied to many instances of that type to assign a specific
style. An element assembly types (or the instantiable subtypes)
may be exchanged without being already assigned to
occurrences.</p>
<p>The occurrences of the <span class="self-ref">IfcElementAssemblyType</span> are
represented by instances of <strong>IfcElementAssembly</strong>.</p>



<h1>IfcElementAssemblyTypeEnum</h1>
                                
                                <h1>IfcElementCompositionEnum</h1>
                                
                                <h1>IfcElementQuantity</h1>
                                
                                <p>
      An <span class="self-ref">IfcElementQuantity</span> defines a set of derived measures of an element's physical property. Elements could be
      spatial structure elements (like buildings, storeys, or spaces) or building elements (like walls, slabs, finishes).
      The <span class="self-ref">IfcElementQuantity</span> gets assigned to the element by using the <strong>IfcRelDefinesByProperties</strong> relationship.
    </p>
    <p>
      The optional <i>MethodOfMeasurement</i> attribute defines the code, e.g. from a standard method of measurement, which had
      been used to calculate the element quantity.
    </p>
    <blockquote class="note">
        NOTE&nbsp; The recognizable values for the name and the method of measurement attributes have to be agreed upon in
        further agreement documents, such as implementers agreements. Some of these agreements might be limited to a
        certain region, to which the method of measurement applies.
    </blockquote>
    <p>
      The name attribute, given at the individual <i>Quantities</i> provides a recognizable semantic meaning of the element
      quantity. Both information is needed to establish a precise meaning for the measure value. An optional description may be
      assigned to each of the <i>Quantities</i>. All quantities assigned by a single instance of <span class="self-ref">IfcElementQuantity</span>
      are deemed to have been generated according to the same method of measurement. However several instances of
      <span class="self-ref">IfcElementQuantity</span> are assignable to an element, thus allowing for an element having quantities generated according
      to several methods of measurement.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; To exchange the net floor area of spaces in the German region (as <strong>IfcSpace</strong>), the name might be
      'Netto-Grundfl&auml;che' (net floor area), and the method of  measurement might be accordingly 'DIN277-2' (German industry
      norm no. 277 edition 2).
    </blockquote>
    <blockquote class="example">
      EXAMPLE&nbsp; The same instance of <strong>IfcSpace</strong> may have a different area measure assigned in the German region
      according to a housing regulation, the name would be 'Wohnfl&auml;che' and the method of measurement would be '2.BV'. 
      It would be attached to the <strong>IfcSpace</strong> by a separate <strong>IfcRelDefinesByProperties</strong> relationship.&lt;
    </blockquote>
    <p>
      The <span class="self-ref">IfcElementQuantity</span> can have the following subtypes of <strong>IfcPhysicalQuantity</strong> within its SET of
      <i>Quantities</i>, which count for the basis measure types used:
    </p>
    <ul>
      <li>count measure</li>
      <li>weight measure</li>
      <li>length measure</li>
      <li>area measure</li>
      <li>volume measure</li>
      <li>time measure</li>
    </ul>
    
    
    <p class="use-head">Quantity Use Defintion</p>
    <p>
      Base quantities are quantity definitions that are independent of a particular method of measurement and therefore
      internationally applicable. Base quantities are defined as gross and net values and provided by measurement of the
      correct geometric shape representation of the element. This specification includes a set of base quantity definition.
      See each subtype of <strong>IfcElement</strong> for applicable base quantities.
    </p>
    <p>
      The following general agreements apply for each base quantity
      set
    </p>
    <ul>
      <li>
        <i>IfcElementQuantity.Name</i> = &lt;name of the qto definition template&gt;
      </li>
      <li>
        <i>IfcElementQuantity.MethodOfMeasurement</i> = 'BaseQuantities'
      </li>
      <li>
        <i>IfcElementQuantity.Quantities</i> = SET of subtypes of <strong>IfcPhysicalSimpleQuantity</strong> with values for the
        <i>Name</i> attribute as published as part of this specifciation.
      </li>
    </ul>
<h1>IfcElementType</h1>
                                
                                <p>
      <span class="self-ref">IfcElementType</span>
      defines a list of commonly shared property set definitions
      of an element and an optional set of product
      representations. It is used to define an element
      specification (i.e. the specific product information, that
      is common to all occurrences of that product type).
    </p>
    <blockquote class="note">
        NOTE&nbsp; The product representations are defined as
        representation maps (at the level of the supertype
        <strong>IfcTypeProduct</strong>, which gets assigned by an element
        instance through the
        <i>IfcShapeRepresentation.Item[1]</i> being an
        <strong>IfcMappedItem</strong>.
    </blockquote>
    <p>
      An element type is used to define the common properties of
      a certain type or style of an element that may be applied
      to instances of that element type to assign a specific
      style. Element types (the instantiable subtypes) may be
      exchanged without being already assigned to occurrences.
    </p>
    
<h1>IfcExternalSpatialElement</h1>
                                
                                <p>The external spatial element
defines external regions at the building site. Those regions can
be defined:</p>
<ul>
<li>logically - for example, an instance of
<span class="self-ref">IfcExternalSpatialElement</span> could represent the air space
around the building without having an own shape representation,
or</li>
<li>physically - for example, an instance of
<span class="self-ref">IfcExternalSpatialElement</span> could represent the sloping
ground around the building to identify the part of the external
building envelop that is below ground.</li>
</ul>



<h1>IfcExternalSpatialElementTypeEnum</h1>
                                
                                <h1>IfcExternalSpatialStructureElement</h1>
                                
                                <p>The external spatial structure
element is an abstract entity provided for different kind of
external spaces, regions, and volumes.</p>



<h1>IfcFeatureElement</h1>
                                
                                <p>A feature element is a generalization of all existence
dependent elements which modify the shape and appearance of the
associated master element. The <span class="self-ref">IfcFeatureElement</span> offers
the ability to handle shape modifiers as semantic objects within
the IFC object model.</p>
<blockquote class="note">
NOTE&nbsp; The term "feature" has a predefined meaning in a
context of "feature-based modeling" and within steel construction
work. It is introduced here in a broader sense to cover all
existence dependent, but semantically described, modifiers of an
element's shape and appearance. It is envisioned that future
releases enhance the feature-based capabilities of the IFC
model.
</blockquote>

<p>In contrary to the aggregation, as used in
<strong>IfcElementAssembly</strong>, that defines the aggregate as a
container element, that has equally treated parts, the feature
concept introduced by <span class="self-ref">IfcFeatureElement</span> defines the master
element with subordinate parts as additions, or with voids or
cut-outs as subtractions.</p>




<h1>IfcFeatureElementAddition</h1>
                                
                                <p>
      A feature element addition is a specialization of the general
      feature element, that represents an existence dependent
      element which modifies the shape and appearance of the
      associated master element. The
      <span class="self-ref">IfcFeatureElementAddition</span> offers the ability to
      handle shape modifiers as semantic objects within the IFC
      object model that add to the shape of the master element.
    </p>
    

    <p>
      The <span class="self-ref">IfcFeatureElementAddition</span> is associated to its
      master element by virtue of the objectified relationship
      <strong>IfcRelProjectsElement</strong>. This relationship implies a
      Boolean 'union' operation between the shape of the master
      element and the shape of the addition feature.
    </p>
    <p class="use-head">Geometry Use Definitions</p>
    <p>
      The geometric representation of
      <span class="self-ref">IfcFeatureElementAddition</span> is given by the
      <strong>IfcProductDefinitionShape</strong>, allowing multiple
      geometric representations.
    </p>
    <p>
      <b>Local Placement</b>
    </p>
    <p>
      The local placement for <span class="self-ref">IfcFeatureElementAddition</span> is
      defined in its supertype <strong>IfcProduct</strong>. It is defined
      by the <strong>IfcLocalPlacement</strong>, which defines the local
      coordinate system that is referenced by all geometric
      representations. The local placement is always defined in
      relation to the local placement of the element to which the
      feature element is added:
    </p>
    <ul>
      <li>The <i>PlacementRelTo</i> relationship of
      <strong>IfcLocalPlacement</strong> shall point to the local placement
      of the same <strong>IfcElement</strong>, which is used in the
      <i>HasAdditionFeature.RelatingElement</i> inverse
      attribute.
      </li>
    </ul>
    <p>
      <b>Shape Representation</b>
    </p>
    <p>
      The geometry use definitions for the shape representation
      of the <span class="self-ref">IfcFeatureElementAddition</span> is given at the
      level of its subtypes.
    </p>
<h1>IfcFeatureElementSubtraction</h1>
                                
                                <p>The <span class="self-ref">IfcFeatureElementSubtraction</span> is specialization of
the general feature element, that represents an existence dependent
elements which modifies the shape and appearance of the associated
master element. The <span class="self-ref">IfcFeatureElementSubtraction</span> offers the
ability to handle shape modifiers as semantic objects within the
IFC object model that subtract from the shape of the master
element.</p>

<blockquote class="note">
NOTE&nbsp; A single subtraction feature
such as the subtype <strong>IfcOpeningElement</strong> is assigned by a
single subtraction relationship <strong>IfcRelVoidsElement</strong> to one
occurrences of <strong>IfcElement</strong>. It establishes a 1:1
relationship between the opening and the element. An element may
have several <strong>IfcRelVoidsElement</strong> relationships, enabling
several voids.
</blockquote>

<p>The voiding relationship between a master element and a
subtraction feature is geometrically resolved by a Boolean
difference operation.</p>




<p class="use-head">Geometry Use Definitions</p>
<p>The geometric representation of
<span class="self-ref">IfcFeatureElementSubtraction</span> is given by the
<strong>IfcProductDefinitionShape</strong>, allowing multiple geometric
representations.</p>
<p><b>Local Placement</b></p>
<p>The local placement for <span class="self-ref">IfcFeatureElementSubtraction</span> is
defined in its supertype <strong>IfcProduct</strong>. It is defined by the
<strong>IfcLocalPlacement</strong>, which defines the local coordinate system
that is referenced by all geometric representations. The local
placement is always defined in relation to the local placement of
the building element from which the feature element substration is
substracted:</p>
<ul>
<li>The <i>PlacementRelTo</i> relationship of
<strong>IfcLocalPlacement</strong> shall point (if given) to the local
placement of the same <strong>IfcElement</strong>, which is used in the
<i>VoidsElements.RelatingElement</i> inverse attribute.</li>
</ul>
<p><b>Shape Representation</b></p>
<p>The geometry use definitions for the shape representation of the
<span class="self-ref">IfcFeatureElementSubtraction</span> is given at the level of its
subtypes.</p>

<h1>IfcFurnishingElement</h1>
                                
                                <p>A furnishing element is a generalization of all furniture
related objects. Furnishing objects are characterized as
being</p>
<ul>
<li>pre-manufactured and assembled on-site, or</li>
<li>manufactured on-site (built-in)</li>
</ul>
<p>Thus furnishing elements can either be movable, or not (as the
built-ins).</p>






<h1>IfcFurnishingElementType</h1>
                                
                                <p><span class="self-ref">IfcFurnishingElementType</span> defines a list of commonly shared
property set definitions of an element and an optional set of
product representations. It is used to define an element
specification (the specific product information, that is
common to all occurrences of that product type).</p>

<blockquote class="note">
NOTE&nbsp; The product representations are defined
as representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.
</blockquote>

<p>A furnishing element type is used to define the common
properties of a certain type of a furnishing element that may be
applied to many instances of that feature type to assign a
specific style. Furnishing element types (or the instantiable
subtypes) may be exchanged without being already assigned to
occurrences.</p>
<p>The occurrences of the <span class="self-ref">IfcFurnishingElementType</span> are
represented by instances of <strong>IfcFurnishingElement</strong> (or its
subtypes).</p>







<h1>IfcGeographicElement</h1>
                                
                                <p>
      An <span class="self-ref">IfcGeographicElement</span> is a generalization of all
      elements within a geographical landscape. It includes
      occurrences of typical geographical element, often referred
      to as features, such as roads, zones, trees, etc. Common type
      information behind several occurrences of
      <span class="self-ref">IfcGeographicElement</span> is provided by the
      <strong>IfcGeographicElementType</strong>.
    </p>
    
<h1>IfcGeographicElementType</h1>
                                
                                <p>
      An <span class="self-ref">IfcGeographicElementType</span> is used to define an
      element specification of a geographic element (i.e. the
      specific product information, that is common to all
      occurrences of that product type). Geographic element types
      include for different types of element that may be used to
      represent information within a geographical landscape
      external to a building. Within the world of geographic
      information they are referred to generally as 'features'.
      <span class="self-ref">IfcGeographicElementType</span>'s include:
    </p>
    <ul>
      <li>linear elements such as sections of a roadway (including
      carriageway/pavement, verge, median, marker line, kerb etc.),
      or a path, river, stream;
      </li>
      <li>connections and junctions including traffic roundabouts,
      T junctions, 4 way junctions;
      </li>
      <li>point features such as street lighting, seating, bus
      shelters, signage, trees;
      </li>
      <li>linear features such as layby's;
      </li>
      <li>area features such as ponds, lakes, woods and forests;
      </li>
      <li>drainage such as catchment, reserver or outfall.</li>
    </ul>
    <p>
      The specification of the specific types are given by the
      inherited attribute <i>IfcElementType.ElementType</i> given
      as an <strong>IfcLabel</strong>.
    </p>
    <blockquote class="note">
      NOTE&nbsp; This is due to the range of choices of element type
      thyat are available and their expression in different
      languages. It is not considered possible to create a
      reasonably full list of types within an enumeration. It is
      suggested that selection of the relevant type be drawn from
      an available 'feature catalog'.
    </blockquote>
    
		
<p class="use-head">Feature Catalog Use Definition</p>
    <p>
      Geographic element types are frequently identified in feature
      catalogs that are produced for particular purposes. The
      <span class="self-ref">IfcGeographicElementType</span> entity enables the continued
      use of existing feature catalogs through capture of their
      identity and attributes.
    </p>
    <p>
      Information from feature catalogs might be captured in
      various ways:
    </p>
    <ol>
      <li>via property sets, some of which will be specifically
      defined within the IFC property set catalog whilst others
      will be created for local use; this is the form of capture
      that is expected to be most widely used
      </li>
      <li>through use of the IFC classification model whereby
      features might be identified through an
      <strong>IfcClassificationReference</strong> with additional
      description; in which case, any further attributes required
      would still need to be captured in property sets.
      </li>
    </ol>
<h1>IfcGeographicElementTypeEnum</h1>
                                
                                <h1>IfcGrid</h1>
                                
                                <p>
      <span class="self-ref">IfcGrid</span> ia a planar design grid defined in 3D space
      used as an aid in locating structural and design elements.
      The position of the grid (<i>ObjectPlacement</i>) is defined
      by a 3D coordinate system (and thereby the design grid can be
      used in plan, section or in any position relative to the
      world coordinate system). The position can be relative to the
      object placement of other products or grids. The XY plane of
      the 3D coordinate system is used to place the grid axes,
      which are 2D curves (for example, line, circle, arc,
      polyline).
    </p>
    <p>
      The inherited attributes <i>Name</i> and <i>Description</i>
      can be used to define a descriptive name of the grid and to
      indicate the grid's purpose. A grid is defined by (normally)
      two, or (in case of a triangular grid) three lists of grid
      axes. The following figures shows some examples.
    </p>
    <p>
      A grid may support a rectangular layout as shown in 
      layout as shown in 
    </p>
    <blockquote class="note">
      NOTE&nbsp; The <i>PredefinedType</i> denotes the type of
      grid that is represented by <span class="self-ref">IfcGrid</span>. The
      instantiation of <strong>IfcGridAxis</strong>'s has to agree to the
      <i>PredefinedType</i>, if provided.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; The grid axes, defined within the design grid, are
      those elements to which project objects will be placed
      relatively using the <strong>IfcGridPlacement</strong>.
    </blockquote>
    <table cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td width="320">
            <img src="../../../figures/IfcDesignGrid-Type1.gif" alt="1"
            border="0" height="211" width="306">
          </td>
          <td width="320">
            <img src="../../../figures/IfcDesignGrid-Type2.gif" alt="2"
            border="0" height="211" width="306">
          </td>
          <td width="320">
            <img src="../../../figures/IfcDesignGrid-Type3.gif" alt="3"
            border="0" height="211" width="306">
          </td>
        </tr>
        <tr>
          <td width="320">
            <p class="figure">
          </td>
          <td width="320">
            <p class="figure">
          </td>
          <td width="320">
            <p class="figure">
          </td>
        </tr>
      </tbody>
    </table>
    
    
    <p>
      &nbsp;
    </p>
    <p class="spec-head">Informal Propositions:</p>
    <table summary="IP">
      <tr>
        <td width="640">
          <ol>
            <li>Grid axes, which are referenced in different lists
            of axes (UAxes, VAxes, WAxes) shall not be parallel.
            </li>
            <li>Grid axes should be defined such as there are no
            two grid axes which intersect twice (see 
            </li>
          </ol>
          <blockquote class="note">
            NOTE&nbsp; Left side: ambiguous intersections A1 and
            A2, a grid containing such grid axes is not a valid
            design grid;&nbsp; Right side: the conflict can be
            resolved by splitting one grid axis in a way, such as
            no ambiguous intersections exist.
          </blockquote>
        </td>
        <td align="right" valign="top" width="320">
          <img src="../../../figures/IfcDesignGrid-IP2.gif" alt="IP2"
          border="0" height="97" width="306">
          <p class="figure">
        </td>
      </tr>
    </table>
<h1>IfcGridTypeEnum</h1>
                                
                                <h1>IfcInternalOrExternalEnum</h1>
                                
                                <h1>IfcOpeningElement</h1>
                                
                                <p>The opening element stands for
opening, recess or chase, all reflecting voids. It represents a
void within any element that has physical manifestation. Openings
can be inserted into walls, slabs, beams, columns, or other
elements.</p>
<p>The IFC specification provides two entities for opening
elements:</p>
<ul>
<li><strong>IfcOpeningStandardCase</strong> is used for all openings that
have a constant profile along a linear extrusion. They are placed
relative to the voided elements and the extrusion direction is
perpendicular to the plane of the element (horizontally for
walls, vertically for slabs). Only a single extrusion body is
allowed. It cuts through the whole thickness of the voided
element, i.e. it reflects a true opening.</li>
<li><span class="self-ref">IfcOpeningElement</span> is used for all other occurrences of
openings and in particular also for niches or recesses.</li>
</ul>
<blockquote class="note">
NOTE&nbsp; View definitions or implementer
agreements may restrict the types of elements which can be voided
by an <span class="self-ref">IfcOpeningElement</span> or
<strong>IfcOpeningStandardCase</strong></blockquote>

<p>There are two different types of opening elements:</p>
<ul>
<li>an opening, where the thickness of the opening is greater or
equal to the thickness of the element;</li>
<li>a recess or niche, where the thickness of the recess is
smaller than the thickness of the element.</li>
</ul>
<p>The attribute <i>PredefinedType</i> should be used to capture
the differences,</p>
<ul>
<li>the attribute is set to OPENING for an opening or</li>
<li>the attribute is set to RECESS for a recess or niche.</li>
<li>If the value for <i>PredefinedType</i> is omitted, or the
value is set to NOTDEFINED, no specific information of whether it
is an opening or recess shall be assumed.</li>
</ul>

<p>An <span class="self-ref">IfcOpeningElement</span> has to be inserted into an
<strong>IfcElement</strong> by using the <strong>IfcRelVoidsElement</strong>
relationship. The relationship implies a Boolean subtraction
operation between the volume of the voided element and the volume
of the opening. It may be filled by an <strong>IfcDoor</strong>,
<i>IfcWind</i>ow, or another filling element by using the
relationship <i>IfcRelFillsElements</i>.</p>







<p class="use-head">Containment Use Definition</p>
<p>The <span class="self-ref">IfcOpeningElement</span> shall not participate in the
containment relationship, i.e. it is not linked directly to the
spatial structure of the project. It has a mandatory
<i>VoidsElements</i> inverse relationship pointing to the
<strong>IfcElement</strong> that is contained in the spatial structure.</p>
<ul>
<li>The inverse relationship <i>ContainedInStructure</i> shall be
NIL.</li>
</ul>

<blockquote class="note">NOTE&nbsp; See <strong>IfcRelVoidsElement</strong> for a
diagram on how to apply spatial containment and the voiding
relationship.</blockquote>

<h1>IfcOpeningElementTypeEnum</h1>
                                
                                <h1>IfcOpeningStandardCase</h1>
                                
                                <p>The standard opening,
<span class="self-ref">IfcOpeningStandardCase</span>, defines an opening with certain
constraints for the dimension parameters, position within the
voided element, and with certain constraints for the geometric
representation. The <span class="self-ref">IfcOpeningStandardCase</span> handles all
cases of openings, that:</p>
<ul>
<li>are true openings by cutting through the body of the voided
element, that is, where the opening depth is greather than or equal to the thickness
of the element,</li>
<li>are extruded perpendicular to the wall plane in case of
openings in a wall</li>
<li>are extruded perpendicular to the slab plane in case of
openings in a slab</li>
<li>have a local placement relative to the local placement of the
voided element</li>
<li>have a 'Body' shape representation with 'SweptSolid'
representation type</li>
<li>have only a single extrusion body within the 'Body' shape
representation</li>
</ul>




<h1>IfcPhysicalOrVirtualEnum</h1>
                                
                                <h1>IfcPort</h1>
                                
                                <p>
      An <span class="self-ref">IfcPort</span> provides the
      means for an element to connect to other elements.
    </p>
    <p>
      An <span class="self-ref">IfcPort</span> is associated with an <strong>IfcElement</strong>,
      it belongs to through the objectified relationship <strong>IfcRelNests</strong> if such port is fixed, or 
      <strong>IfcRelConnectsPortToElement</strong> if such port is dynamically attached. Exactly two ports,
      belonging to two different elements, are connected with
      each other through the objectified relationship
      <strong>IfcRelConnectsPorts</strong>.
    </p>
    <p>
      An instance of <strong>IfcElement</strong> may have one or more
      points at which it connects to other instances of
      <strong>IfcElement</strong>. An instance of <span class="self-ref">IfcPort</span> is located
      at a point where a connection can occur. The location of
      the port is determined in the context of the local
      coordinate system of the element to which it belongs.
    </p>
    
    <p class="use-head">Containment Use Definitions</p>
    <p>
      As a subordinate part being fully dependent on the master element the <span class="self-ref">IfcPort</span> shall have no
      independent containment relationship to the spatial structure.
    </p>
    <p class="use-head">Geometry Use Definition</p>
    <p>
      The geometric representation of <span class="self-ref">IfcPort</span> is
      given by the <strong>IfcProductDefinitionShape</strong>, allowing
      multiple geometric representation.
    </p>
    <p>
      <b>Local Placement</b>
    </p>
    <p>
      The local placement for <span class="self-ref">IfcPort</span> is defined
      in its supertype <strong>IfcProduct</strong>. It is defined by the
      <strong>IfcLocalPlacement</strong>, which defines the local
      coordinate system that is referenced by all geometric
      representations.
    </p>
    <ul>
      <li>The <i>PlacementRelTo</i> relationship of
      <strong>IfcLocalPlacement</strong> shall point to the
      local placement of the master <strong>IfcElement</strong> or <strong>IfcElementType</strong> (relevant subtypes), which is related to the
      <span class="self-ref">IfcPort</span> by the relationship object <strong>IfcRelNests</strong> for fixed ports, or 
      <strong>IfcRelConnectsPortToElement</strong> for dynamic ports.
      </li>
    </ul>
    <p>
      <b>Shape Representation</b>
    </p>
    <p>
      The geometry use definitions for the shape representation
      of the <span class="self-ref">IfcPort</span> is given at the level of
      its subtypes.
    </p>
<h1>IfcProjectionElement</h1>
                                
                                <p>The projection element is a
specialization of the general feature element to represent
projections applied to building elements. It represents a solid
attached to any element that has physical manifestation.</p>

<blockquote class="example">
EXAMPLE&nbsp; A wall projection such as a pilaster strip is handled by
<span class="self-ref">IfcProjectionElement</span>
</blockquote>

<blockquote class="note">
NOTE&nbsp; View definitions or implementer agreements
may restrict the types of elements to which
<span class="self-ref">IfcProjectionElement</span> can be applied.
</blockquote>

<p>An <span class="self-ref">IfcProjectionElement</span> has to be linked to a element
(all subtypes of <strong>IfcElement</strong>) by using the
<strong>IfcRelProjectsElement</strong> relationship. Its existence depends on
the existence of the master element. The relationship implies a
Boolean union operation between the volume of the projection
element and the volume of the element.</p>





<p class="use-head">Containment Use Definition</p>
<p>The <span class="self-ref">IfcProjectionElement</span> shall not participate in the
containment relationship, i.e. it is not linked directly to the
spatial structure of the project. It has a mandatory
<i>ProjectsElements</i> inverse relationship pointing to the
<strong>IfcElement</strong> that is contained in the spatial structure.</p>
<ul>
<li>The inverse relationship <i>ContainedInStructure</i> shall be
NIL.</li>
</ul>

<h1>IfcProjectionElementTypeEnum</h1>
                                
                                <h1>IfcRelAssociatesMaterial</h1>
                                
                                <p><span class="self-ref">IfcRelAssociatesMaterial</span> is an objectified relationship between a
material definition and elements or element types to which this
material definition applies.</p>

<p>The material definition can be:</p>
<ul>
<li>assigned to an element occurrence as a specific usage of a
layer set or profile set</li>
<li>assigned to an element occurrence or element type as a layer
set, profile set, constituent set or a single material</li>
</ul>
<p>Materials can be arranged by layers and applied to layered
elements. Typical elements are walls and slabs.</p>
<ul>
<li>An <strong>IfcMaterialLayerSet</strong>, for layered elements with an
indication of the layering direction and individual layer
thicknesses</li>
<li>An <strong>IfcMaterialLayerSetUsage</strong>, i.e. a material layer set
with positioning information along the reference axis or surface
of the element.

<blockquote class="note">
NOTE&nbsp; As a material layer set usage is an
occurrence based information, that applies to each individual
element, it cannot be assigned to an element
type.
</blockquote>

</li>
</ul>
<p>Material can be applied to profiles. Typical elements using
profile material are beam, column, member</p>
<ul>
<li>An <strong>IfcMaterialProfileSet</strong>, i.e. a set of material
assigned to a set of profiles, with a single material assigned to
a single profile as the default.</li>
<li>An <strong>IfcMaterialProfileSetUsage</strong>, i.e. a material profile
set with positioning information relative to the element axis,
also refered to as cardinal point.
<blockquote class="note">
NOTE&nbsp; As a material profile set usage is an
occurrence based information, that applies to each individual
element, it cannot be assigned to an element
type.
</blockquote>

</li>
</ul>
<p>Materials can be arranged by identified parts of a component
based element. Typical elements are dorrs/windows (with
components such as lining, framing and glazing), or distribution
elements.</p>
<ul>
<li>An <strong>IfcMaterialConstituentSet</strong>, for component based
elements with an indication of the component by keyword to which
the material consituent applies.
<blockquote class="note">
NOTE&nbsp; See the material use definitions at each
applicable subtype of <strong>IfcElement</strong> or <strong>IfcElementType</strong>
for a provision of these keywords.
</blockquote>
</li>
</ul>

<p>As a fallback, or in cases where only a single material
information is needed, material information can be directly
associated</p>
<ul>
<li>A single <strong>IfcMaterial</strong> for any element where the
material use definition does not prohibits its direct
association</li>
<li>An <strong>IfcMaterialList</strong>, e.g. for composite elements,
without an information, how the different materials are arranged.

<blockquote class="deprecated">
DEPRECATED&nbsp; The use of <strong>IfcMaterialList</strong> is deprecated in IFC4 onwards. Use
<strong>IfcMaterialConstituentSet</strong> instead.
</blockquote>

</li>
</ul>
<p>The <span class="self-ref">IfcRelAssociatesMaterial</span> relationship is a special
type of the <strong>IfcRelAssociates</strong> relationship. It can be
applied to subtypes of <strong>IfcElement</strong> and subtypes of
<strong>IfcElementType</strong>.</p>
<ul>
<li>The <strong>IfcElement</strong> has an inverse relation to its material
definition by the <i>HasAssociations</i> attribute, inherited
from <strong>IfcObject</strong>.</li>
<li>The <strong>IfcElementType</strong> has an inverse relation to its
material definition by the <i>HasAssociations</i> attribute,
inherited from <strong>IfcPropertyDefinition</strong>.</li>
</ul>
<p>If both, the element occurrence (by an instance of
<strong>IfcElement</strong>) and the element type (by an instance of
<strong>IfcElementType</strong>, connected through
<strong>IfcRelDefinesByType</strong>) have an associated material, then the
material associated to the element occurrence overrides the
material associated to the element type.</p>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>An <strong>IfcMaterialLayerSetUsage</strong> shall not be associated
with a subtype of <strong>IfcElementType</strong>, it should only be
associated with individual occurrences</li>
<li>An <strong>IfcMaterialProfileSetUsage</strong> shall not be associated
with a subtype of <strong>IfcElementType</strong>, it should only be
associated with individual occurrences</li>
</ol>

<h1>IfcRelConnectsElements</h1>
                                
                                <p>      
      The <span class="self-ref">IfcRelConnectsElements</span> objectified relationship
      provides the generalization of the connectivity between
      elements. It is a 1 to 1 relationship. The concept of two
      elements being physically or logically connected is
      described independently from the connecting elements. The
      connectivity may be related to the shape representation of
      the connected entities by providing a connection geometry.
    </p>
    <ul>
      <li>In this case the geometrical constraints of the
      connection are provided by the optional relationship to the
      <strong>IfcConnectionGeometry</strong>. The connection geometry is
      provided as a point, curve or surface within the local
      placement coordinate systems of the connecting elements.
      </li>
      <li>If the connection geometry is omitted then the
      connection is provided as a logical connection. Under this
      circumstance, the connection point, curve or surface has to
      be recalculated by the receiving application.
      </li>
    </ul>
    
<h1>IfcRelConnectsPorts</h1>
                                
                                <p>
      An <span class="self-ref">IfcRelConnectsPorts</span> relationship defines the
      relationship that is made between two ports at their point of
      connection. It may include the connection geometry between
      two ports.
    </p>
    <p>
      The objectified relationship <span class="self-ref">IfcRelConnectsPorts</span> is
      required for defining how two instances of <strong>IfcPort</strong>
      connect together. Each of the ports is logically contained
      within the <strong>IfcDistributionElement</strong> by using the ordered
      collection <strong>IfcRelNests</strong>.
    </p>
    
    
<h1>IfcRelConnectsPortToElement</h1>
                                
                                <p>
      <span class="self-ref">IfcRelConnectsPortToElement</span> is a relationship between a distribution element and dynamically connected 
      ports where connections are realised to other distribution elements.
    </p>
    <p>
      Ports contained in different elements are connected to each
      other using the <strong>IfcRelConnectsPorts</strong> relationship.
    </p>
    <blockquote class="note">
      NOTE&nbsp; See <strong>IfcRelNests</strong> for its usages to
      represent an ordered collection of ports that are contained
      by an element and relevant subtypes of
      <strong>IfcDistributionElement</strong> for examples and port use
      definition sections.
    </blockquote>
    
    
<h1>IfcRelConnectsWithRealizingElements</h1>
                                
                                <p>
      <span class="self-ref">IfcRelConnectsWithRealizingElements</span> defines a
      generic relationship that is made between two elements that
      require the realization of that relationship by means of
      further realizing elements.
    </p>
    <p>
      An <span class="self-ref">IfcRelConnectsWithRealizingElements</span> is a
      specialization of <i>IfcRelConnectsElement</i> where the
      connecting operation has the additional attribute of (one
      or many) realizing elements that may be used to realize or
      further qualify the relationship. It is defined as a
      ternary relationship.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; It may be used to describe the
        attachment of one element to another where the attachment
        is realized by a 'fixing' element such as a bracket. It
        may also be used to describe the mounting of one element
        onto another such as the requirement for the mounting
        major plant items onto builders work bases and/or
        anti-vibration isolators.
    </blockquote>
    
<h1>IfcRelContainedInSpatialStructure</h1>
                                
                                <p>
      This objectified relationship,
      <span class="self-ref">IfcRelContainedInSpatialStructure</span>, is used to assign
      elements to a certain level of the spatial project
      structure. Any element can only be assigned once to a
      certain level of the spatial structure. The question, which
      level is relevant for which type of element, can only be
      answered within the context of a particular project and
      might vary within the various regions.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; A multi-storey space is contained (or
        belongs to) the building storey at which its ground level
        is, but it is referenced by all the other building
        storeys, in which it spans. A lift shaft might be
        contained by the basement, but referenced by all storeys,
        through which it spans.
    </blockquote>
    <p>
      The containment relationship of an element within a
      spatial structure has to be a hierarchical relationship; an
      element can only be contained within a single spatial
      structure element. The reference relationship between an
      element and the spatial structure need not be hierarchical; 
      that is, an element can reference many spatial structure
      elements.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The reference relationship is expressed by <strong>IfcRelReferencedInSpatialStructure</strong>.
    </blockquote>
    <p>
      Predefined spatial structure elements to which elements can
      be assigned are
    </p>
    <ul>
      <li>site as <strong>IfcSite</strong>
      </li>
      <li>building as <strong>IfcBuilding</strong>
      </li>
      <li>storey as <strong>IfcBuildingStorey</strong>
      </li>
      <li>space as <strong>IfcSpace</strong>
      </li>
    </ul>
    <p>
      Occurrences of the same element type can be assigned to
      different spatial structure elements depending on the
      context of the occurrence.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; A wall might be normally assigned
        to a storey, however the curtain wall might be assigned
        to the building and the retaining wall in the terrain
        might be assigned to the site.
    </blockquote>
    
    

    <p class="use-head">Containment Use Definition</p>
    <p>
    <table cellpadding="2" cellspacing="2">
      <tr valign="top">
        <td valign="top" align="left">
          <img src=
          "../../../figures/IfcRelContainedInSpatialStructure-Fig1.png"
          alt="fig1" width="556" height="556" border="0">Â 
        </td>
      </tr>
      <tr><td><p class="figure">
    </table>
<h1>IfcRelFillsElement</h1>
                                
                                <p><span class="self-ref">IfcRelFillsElement</span> is an objectified relationship between an opening element and an element that fills (or partially fills) the opening element. It is an one-to-one relationship.</p>

<blockquote class="note">
NOTE&nbsp; View definitions or implementer agreements may restrict an opening to be filled by one filling element only.
</blockquote>



<p>As shown in 

<table border="0" cellpadding="0" cellspacing="0" width="502" summary="example for filling">
<tr><td><img src="../../../figures/IfcRelFillsElements-Fig1.png" alt="relationships for filling" width="501" height="401" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcRelInterferesElements</h1>
                                
                                <p>The <span class="self-ref">IfcRelInterferesElements</span> objectified relationship
indicates that two elements interfere. Interference is a spatial
overlap between the two elements. It is a 1 to 1 relationship.
The concept of two elements interfering physically or logically
is described independently from the elements. The interference
may be related to the shape representation of the entities by
providing an interference geometry.</p>
<ul>
<li>When the interference geometry is available it can be passed
by the optional attribute <i>InterferenceGeometry</i> pointing to
<strong>IfcConnectionGeometry</strong>. The connection geometry is provided
as a point, curve, surface, or volume within the local placement
coordinate systems of the connecting elements. The
<strong>IfcConnectionVolumeGeometry</strong> is the default type to be used
for interference in 3D space, as indicated in e.g. clash
detections.</li>
<li>If the interference geometry is omitted then the interference
is provided as a logical relationship. Under this circumstance,
the connection point, curve, surface, or solid has to be
recalculated by the receiving application.</li>
</ul>
<p>The <i>RelatingElement</i> and <i>RelatedElement</i> define
the two elements in the relationship, that may have different
roles. This is controlled by the attribute
<i>ImpliedOrder</i>.</p>
<ul>
<li><i>ImpliedOrder</i>=TRUEÂ  The <i>RelatingElement</i>
constitutes the primary element of the interference relationship.
If the interference is to be resolved by subtracting the
overlapping part, it should be subtracted from the
<i>RelatingElement</i>. The net result would be the
<i>RelatingElement</i> subtracted by the
<i>InterferenceGeometry</i>. This would be the case in
interference relationships where the <i>RelatedElement</i>
creates a void in the <i>RelatingElement</i> dynamically.</li>
<li><i>ImpliedOrder</i>=FALSEÂ  The <i>RelatingElement</i> and
<i>RelatedElement</i> have no priority among each other. If the
interference is to be resolved then no information about whether
the <i>InterferenceGeometry</i> should be subtracted from the
<i>RelatingElement</i> or thed <i>RelatedElement</i> can be
traced. This would be the case for clash detection results.</li>
<li><i>ImpliedOrder</i>=UNKNOWN  No information about the
priorities is provided.</li>
</ul>



<h1>IfcRelProjectsElement</h1>
                                
                                <p>The <span class="self-ref">IfcRelProjectsElement</span> is an objectified relationship
between an element and one projection element that creates a
modifier to the shape of the element. The relationship is defined
to be a 1:1 relationship, if an element has more than one
projection, several relationship objects have to be used, each
pointing to a different projection element. The
<span class="self-ref">IfcRelProjectsElement</span> establishes an aggregation
relationship between the main element and a sub ordinary addition
feature.</p>
<blockquote class="note">
NOTE&nbsp; In contrary the
<strong>IfcRelAggregates</strong> relationship established an aggregation
of equal parts to a whole.
</blockquote>
<p>The <span class="self-ref">IfcRelProjectsElement</span> implies a Boolean operation of
addition for the geometric bodies of the element and the feature
element. As with all decomposition relationships it determines:</p>
<ul>
<li>existence dependency - the <i>RelatedFeatureElement</i>
cannot exist without the <i>RelatingElement</i></li>
<li>hierarchical and non-cyclical relationship - the
<span class="self-ref">IfcRelProjectsElement</span> can only alter a single
<strong>IfcElement</strong></li>
<li>no spatial containment - the <strong>IfcFeatureElementAddition</strong>
as related element never participates in the hiearchical spatial
containment relationship
<strong>IfcRelContainedInSpatialStructure</strong></li>
</ul>



<h1>IfcRelReferencedInSpatialStructure</h1>
                                
                                <p>
      The objectified relationship,
      <span class="self-ref">IfcRelReferencedInSpatialStructure</span> is used to
      assign elements in addition to those levels of the project
      spatialÂ structure, in which they are referenced, but not
      primarily contained.Â 
    </p>
    <blockquote class="note">
      NOTE&nbsp;Â The primary containment relationship between
        an element and the spatial structure is handled
        byÂ <i>IfcRelContainsInSpatialStructure</i>.
    </blockquote>
    <p>
      Any element can be referencedÂ to zero, one or several
      levels of the spatial structure. Whereas the
      <i>IfcRelContainsInSpatialStructure</i> relationship is
      required to be hierarchical (an element can only be
      contained in exactly one spatial structure element), the
      <span class="self-ref">IfcRelReferencedInSpatialStructure</span> is not restricted
      to be hierarchical.
    </p>
    <blockquote class="example">
      <p>
        EXAMPLE&nbsp; A wall might be normally contained within
        a storey, and since it does not span through several
        stories, it is not referenced in any additional storey.
        However a curtain wall might span through several
        stories, in this case it can be contained within the
        ground floor, but it would be referenced by all
        additional stories, it spans.
      </p>
    </blockquote>
    <p>
      Predefined spatial structure elements to which elements can
      be assigned are
    </p>
    <ul>
      <li>site as <strong>IfcSite</strong>
      </li>
      <li>building as <strong>IfcBuilding</strong>
      </li>
      <li>storey as <strong>IfcBuildingStorey</strong>
      </li>
      <li>space as <strong>IfcSpace</strong>
      </li>
    </ul>
<p>Elements can also be references in a spatial zone that is provided as <strong>IfcSpatialZone</strong>.</p>
    <p>
      The same element can be assigned to different spatial
      structure elements depending on the context.
    </p>
    

    <p class="use-head">Use Definition</p>
<p>

    <table cellpadding="2" cellspacing="2" width="80%">
      <tbody>
        <tr valign="top">
          <td align="left" valign="top"><img src="../../../figures/IfcRelReferencedInSpatialStructure-Fig1.png" alt="reference and containment" height="601" width="601"><br>
          </td>
        </tr>
        <tr>
          <td><p class="figure">
        </tr>
      </tbody>
    </table>

<h1>IfcRelServicesBuildings</h1>
                                
                                <p>
      The <span class="self-ref">IfcRelServicesBuildings</span> is an objectified relationship that defines the relationship between a system
      and the sites, buildings, storeys, spaces, or spatial zones, it serves. Examples of systems are:
    </p>
    <ul>
      <li>building service systems (heating, cooling, waste water system) represented by instances of
      <strong>IfcDistributionSystem</strong>;
      </li>
      <li>building systems (fenestration, shading) represented by instances of <strong>IfcBuildingSystem</strong>;
      </li>
      <li>zones as collection of logically grouped spaces represented by instances of <strong>IfcZone</strong>
      </li>
      <li>idealized structural analysis systems represented by instances of <strong>IfcStructuralAnalysisModel</strong>.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; The name <span class="self-ref">IfcRelServicesBuildings</span> is a known
      anomaly, as the relationship is not restricted to buildings
      anymore.
    </blockquote>
    
    
<h1>IfcRelSpaceBoundary</h1>
                                
                                <p>The space boundary defines the
physical or virtual delimiter of a space by the relationship
<span class="self-ref">IfcRelSpaceBoundary</span> to the surrounding elements.</p>
<ul>
<li>In the case of a physical space boundary, the placement and
shape of the boundary may be given, and the building element,
providing the boundary, is referenced,</li>
<li>In the case of a virtual space boundary, the placement and
shape of the boundary may be given, and a virtual element is
referenced.</li>
</ul>
<p>The <span class="self-ref">IfcRelSpaceBoundary</span> is defined as an objectified
relationship that handles the element to space relationship by
objectifying the relationship between an element and the space it
bounds. It is given as a one-to-one relationship, but allows each
element (including virutal elements and openings) to define many
such relationship and each space to be defined by many such
relationships.</p>
<p>Space boundaries are always defined as seen from the space. In
general two basic types of space boundaries are
distinguished:</p>
<ul>
<li>1<sup><small>st</small></sup> level space boundary: defined
as boundaries of the space, not taking into account any change in
building element or spaces on the other side.</li>
<li>2<sup><small>nd</small></sup> level space boundary: defined
as boundary taking any change in building element or spaces on
the other side into account. It can be further distinguished into
<ul>
<li>2<sup><small>nd</small></sup> level type A: There is a space
on the other side.</li>
<li>2<sup><small>nd</small></sup> level type B: There is a
building element on the other side.</li>
</ul>
</li>
</ul>
<blockquote><small>The exact definition of how space boundaries
are broken down depends on the view definition, more detailed
conventions on how space boundaries are decomposed can only be
given at the domain or application type level.</small>
<ul>
<li><small>In an architectural or FM related view, a space
boundary is defined totally from inside the space. This is a
1<sup><small>st</small></sup> level space boundary.</small></li>
<li><small>In a thermal view, the decomposition of the space
boundary depends on the material of the providing building
element and the adjacent spaces behind. This is a
2<sup><small>nd</small></sup> level space boundary.</small></li>
</ul>
</blockquote>
<table summary="space boundary types" border="0">
<tr>
<td><img src="../../../figures/IfcRelSpaceBoundary_1stLevel.png" alt=
"1st level"></td>
<td><img src="../../../figures/IfcRelSpaceBoundary_2ndLevel.png" alt=
"2nd level"></td>
</tr>
<tr>
<td><p class="figure">
<td><p class="figure">
</tr>
<tr>
<td><img src="../../../figures/IfcRelSpaceBoundary_2ndLevel_TypeA.png"
alt="2nd level type a"></td>
<td><img src="../../../figures/IfcRelSpaceBoundary_2ndLevel_TypeB.png"
alt="2nd level type b"></td>
</tr>
<tr>
<td><p class="figure">
<td><p class="figure">
</tr>
</table>




<p class="use-head">Attribute Use Definitions</p>
<p>The differences between the 1<sup><small>st</small></sup> and
2<sup><small>nd</small></sup> level space boundaries is
identified by:</p>
<ul>
<li><b>1<sup><small>st</small></sup> level:</b><br>
SELF\IfcRoot.Name = "1stLevel"<br>
SELF\IfcRootDescription = NIL</li>
<li><b>2<sup><small>nd</small></sup> level:</b><br>
SELF\IfcRoot.Name = "2ndLevel"<br>
SELF\IfcRootDescription = "2a", or "2b"</li>
</ul>
<p>Differentiation between physical and virtual space boundary is illustrated in 

<p>As shown in 
<blockquote class="note">NOTE&nbsp; The connection geometry, either by a 2D curve or a 3D surface, is used to describe the portion of the "virtual wall" that separates the two spaces. All instances of <span class="self-ref">IfcRelSpaceBoundary</span> given at the adjacent spaces share the same instance of <strong>IfcVirtualElement</strong>. Each instance of <span class="self-ref">IfcRelSpaceBoundary</span> provides in addition the <i>ConnectionGeometry</i> given within the local placement of each space.</blockquote>

<table summary="virtual">
<tr><td><img alt="IfcRelSpaceBoundary_virtual (35K)" src="../../../figures/IfcRelSpaceBoundary_virtual.png" height="500" width="600"></td></tr>
<tr><td><p class="figure">
</table>

<p>As shown in 

<table summary="physical">
<tr><td><img alt="IfcRelSpaceBoundary_physical (35K)" src="../../../figures/IfcRelSpaceBoundary_physical.png" height="500" width="600"></td></tr>
<tr><td><p class="figure">
</table>

<p class="use-head">Geometry Use Definitions</p>
<p>The <span class="self-ref">IfcRelSpaceBoundary</span> may have geometry attached. If
geometry is not attached, the relationship between space and
building element is handled only on a logical level. If geometry
is attached, it is given within the local coordinate systems of
the space.</p>
<blockquote class="note">NOTE&nbsp; The attributes <i>CurveOnRelatingElement</i> at <strong>IfcConnectionCurveGeometry</strong> or
<i>SurfaceOnRelatingElement</i> at <strong>IfcConnectionSurfaceGeometry</strong> provide the geometry within
the local coordinate system of the <strong>IfcSpace</strong>, whereas the attributes <i>CurveOnRelatedElement</i> at
<strong>IfcConnectionCurveGeometry</strong> or <i>SurfaceOnRelatedElement</i> at <strong>IfcConnectionSurfaceGeometry</strong> provide the geometry within
the local coordinate system of the subtype of <strong>IfcElement</strong></blockquote>
<blockquote class="note">NOTE&nbsp; In most view definitions the connection geometry for
the related <strong>IfcElement</strong> is not provided.</blockquote>
<p>The geometric representation (through the
<i>ConnectionGeometry</i> attribute) is defined using either 2D
curve geometry or 3D surface geometry for space boundaries. In
most view definitions the 3D connection surface geometry is
required.</p>
<ul>
<li>1<sup><small>st</small></sup> level space boundary:
<ul>
<li>only connection geometry for related space shall be
provided</li>
<li>only surface connection geometry shall be provided</li>
<li>only the following surface representations are supported:
<ul>
<li><strong>IfcSurfaceOfLinearExtrusion</strong></li>
<li><strong>IfcCurveBoundedPlane</strong></li>
<li><strong>IfcCurveBoundedSurface</strong></li>
<li><strong>IfcFaceBasedSurfaceModel</strong></li>
</ul>
</li>
</ul>
</li>
<li>2<sup><small>nd</small></sup> level space boundary:
<ul>
<li>only connection geometry for related space shall be
provided</li>
<li>only surface connection geometry shall be provided</li>
<li>only the following surface representations are supported:
<ul>
<li><strong>IfcCurveBoundedPlane</strong> with restrictions to have
polygonal boundaries only</li>
<li><strong>IfcFaceBasedSurfaceModel</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>Surface connection geometry</b></p>
<p>The following constraints apply to the surface connection
geometry representation:</p>
<ul>
<li>planar boundaries:
<ul>
<li><strong>IfcSurfaceOfLinearExtrusion</strong> defined by a
<i>SweptCurve</i> being an <strong>IfcArbitraryOpenProfileDef</strong> with
straight segements, or</li>
<li><strong>IfcCurveBoundedPlane</strong></li>
</ul>
</li>
<li>curved boundaries
<ul>
<li><strong>IfcSurfaceOfLinearExtrusion</strong> defined by a
<i>SweptCurve</i> being an <strong>IfcArbitraryOpenProfileDef</strong> with
curves segements, or</li>
<li><strong>IfcCurveBoundedSurface</strong> with a <i>BasisSurface</i>
being a non planar surface, such as <strong>IfcCylindricalSurface</strong>,
or</li>
<li><strong>IfcFaceBasedSurfaceModel</strong> if already faceted.</li>
</ul>
</li>
</ul>
<p><b>Curve connection geometry</b></p>
<p>The following constraints apply to the 2D curve
representation:</p>
<ul>
<li>Curve: <strong>IfcPolyline</strong>, <strong>IfcTrimmedCurve</strong> or
<strong>IfcCompositeCurve</strong></li>
</ul>
<h1>IfcRelSpaceBoundary1stLevel</h1>
                                
                                <p>The 1st level space boundary
defines the physical or virtual delimiter of a space by the
relationship <span class="self-ref">IfcRelSpaceBoundary1stLevel</span> to the
surrounding elements. 1st level space boundaries are
characterizeda by:</p>
<ul>
<li>1st level space boundaries are the boundaries of a space
defined by the surfaces of building elements bounding this space
(physical space boundaries) or by virtual surfaces provided by an
adjacent space with no dividing wall.</li>
<li>1st level space boundaries do not consider any change of
material in the bounding building elements, or different
spaces/zones behind a wall or slab (floor or ceiling).</li>
<li>1st level space boundaries are differentiated in two ways:
virtual or physical and internal,external, or undefined (internal
and external) e.g. for a wall that is partially inside and
outside.</li>
<li>1st level space boundaries form a closed shell around the
space (so long as the space is completely enclosed) and include
overlapping boundaries representing openings (filled or not) in
the building elements (see implementers agreement below).</li>
</ul>
<p>1st level space boundaries define a space by its boundary
surfaces without taking anything on the other side of the
bounding elements into account.</p>
<blockquote class="note">NOTE&nbsp; 1st level space boundaries are used e.g.
in quantity take-off and facility management as they describe the
surfaces for finishes. They cannot be directly used for thermal
analysis. However 1st level space boundaries can provide the
input to preprocessors to thermal analysis software that take 1st
level space boundaries and perform the necessary transformation
into 2nd level space boundaries that are required for energy
analysis.</blockquote>



<p class="use-head">Relationship Use Definitions</p>

<p>As shown in 
<blockquote class="note">NOTE&nbsp; The space boundary of the parent is not cut by the inner boundary - both overlap.</blockquote>

<table border="0" cellpadding="2" cellspacing="2" summary=
"parent/inner boundaries">
<tr><td><img alt="IfcRelSpaceBoundary1stLevel" src=
"../../../figures/IfcRelSpaceBoundary1stLevel-fig1.png" height="550"
width="600"></td></tr>
<tr><td><p class="figure">
</table>

<p class="use-head">Geometry Use Definitions</p>
<p>See the definition at the supertype IfcRelSpaceBoundary for
guidance on using the connection geometry for first level space
boundaries.</p>

<h1>IfcRelSpaceBoundary2ndLevel</h1>
                                
                                <p>The 2nd level space boundary defines the physical or virtual delimiter of a space by the relationship <span class="self-ref">IfcRelSpaceBoundary2ndLevel</span> to the surrounding elements. 2nd level space boundaries are characterized by:</p>
<ul>
<li>2nd level space boundaries still represent building elements that bound the space, but are more granular in that they are subdivided in any of the following cases:
<ul>
<li>Differences in materials and/or material assemblies (for example, a wainscot or paneling on the lower portion of a wall).</li>
<li>Differences in spaces or zones on the other side of the building element (or virtual boundary) represented by the space boundary (for example, two different spaces on the other side of a wall)</li>
</ul>
</li>
<li>2nd level space boundaries are differentiated in two ways: virtual or physical and internal or external, whereby any space boundary that is both internal and external has to be split into segments being either or.</li>
<li>2nd level space boundaries represent both sides of a heat transfer surface separated by the thickness of the building element. They can be further differentiated in:
<ul>
<li>Type 2a that occurs when there is a space on the opposite side of the building element providing the space boundary</li>
<li>Type 2b occurs if there is a building element on the opposite side of the building element providing the space boundary.</li>
</ul>
</li>
<li>The connection geometry of 2nd level space boundaries is restricted to planar surfaces only. This means that curved surfaces must be segmented.</li>
</ul>
<p>2nd level space boundaries define the heat transfer surfaces on both sides of building elements that separate spaces. The generation of 2nd level space boundaries has to take building elements and spaces on the other side into account.</p>
<blockquote class="note">NOTE&nbsp; 2nd level space boundaries are used by many analysis packages that require a surface view of the building that can be transformed into the various simple topological models. Examples of such analysis packages include: (1) energy analysis, (2) lighting analysis, (3) fluid dynamics</blockquote>



<p class="use-head">Relationship Use Definitions</p>
<p>As shown in 
<blockquote class="note">NOTE&nbsp; The space boundary of the parent is not cut by the inner boundary - both overlap.</blockquote>
<p>The attribute <i>CorrespondingBoundary</i> with inverse <i>Corresponds</i> is provided to link the pair of space boundaries on the opposite sides of the building element.</p>
<blockquote class="note">NOTE&nbsp; Only 2nd level space boundaries of type A have corresponding boundaries.</blockquote>

<table border="0" cellpadding="2" cellspacing="2" summary="parent/inner boundaries">
<tr><td><img src="../../../figures/IfcRelSpaceBoundary2ndLevel-fig1.png" alt="IfcRelSpaceBoundary2ndLevel" height="650" width="600"></td></tr>
<tr><td><p class="figure">
</table>

<p class="use-head">Geometry Use Definitions</p>
<p>See the definition at the supertype <strong>IfcRelSpaceBoundary</strong>
for guidance on using the connection geometry for second level
space boundaries.</p>

<h1>IfcRelVoidsElement</h1>
                                
                                <p><span class="self-ref">IfcRelVoidsElement</span> is an objectified relationship between a building element and one opening element that creates a void in the element. It is a one-to-one relationship. This relationship implies a Boolean operation of subtraction between the geometric bodies of the element and the opening.</p>

<p>As shown in 

<table border="0" cellpadding="0" cellspacing="0" width="502" summary="example for voiding">
<tr><td><img src="../../../figures/IfcRelVoidsElements-Fig1.png" alt="relationships for voiding" width="501" height="271" border="0"></td></tr>
<tr><td><p class="figure">
</table>



<h1>IfcSite</h1>
                                
                                <p>A site is a defined area of land, possibly covered with water, on which the
project construction is to be completed. A site may be used to erect, retrofit
or turn down building(s), or for other construction related developments.</p>
<blockquote class="note">NOTE&nbsp; Term according to ISO6707-1 vocabulary
"area of land or water where construction work or other development is
undertaken".</blockquote>
<p>A site may include a definition of the single geographic reference point for
this site (global position using WGS84 with <i>Longitude</i>,
<i>Latitude</i> and <i>Elevation</i>). The precision is provided up to
millionth of a second and it provides an absolute placement in relation to the
real world as used in exchange with geospational information systems. If
asserted, the <i>Longitude</i>, <i>Latitude</i> and <i>Elevation</i>
establish the point in WGS84 where the point 0.,0.,0. of the
<i>LocalPlacement</i> of <span class="self-ref">IfcSite</span> is situated.</p>
<p>The geometrical placement of the site, defined by the
<strong>IfcLocalPlacement</strong>, shall be always relative to the spatial structure
element, in which this site is included, or absolute, i.e. to the world
coordinate system, as established by the geometric representation context of
the project. The world coordinate system, established at the
<i>IfcProject.RepresentationContexts</i>, may include a definition of the
true north within the XY plane of the world coordinate system, if provided, it
can be obtained at <i>IfcGeometricRepresentationContext.TrueNorth</i>.</p>
<p>A project may span over several connected or disconnected sites. Therefore
site complex provides for a collection of sites included in a project. A site
can also be decomposed in parts, where each part defines a site section. This
is defined by the composition type attribute of the supertype
<i>IfcSpatialStructureElements</i> which is interpreted as follow:</p>
<ul>
<li>COMPLEX = site complex</li>
<li>ELEMENT = site</li>
<li>PARTIAL = site section</li>
</ul>
<p>The <span class="self-ref">IfcSite</span> is used to build the spatial structure of a
building (that serves as the primary project breakdown and is 
required to be hierarchical). </p>


<p>

<blockquote class="note">NOTE&nbsp; Detailed requirements on mandatory element containment and placement structure relationships are given in view definitions and implementer agreements.</blockquote>


<table summary="Spatial and placement structure">
 
<tr>
  <td valign="top"><img src="../../../figures/IfcSite-SpatialStructure.png" 
   alt="IfcSite as part of a spatial structure" width="800" height="420" border="0">
  </td>
  </tr>
 
<tr>
  <td><p class="figure">
  </td>
 </tr>

</table>



<p class="use-head">Attribute Use Definition</p>
<p>
is used to provide the geographic longitude, latitude, and height above sea
level for the origin of the site. The origin of the site is the local
placement.</p>
<p>The provision of longitude, latitude, height at the <span class="self-ref">IfcSite</span> for
georeferencing is provided for upward compatibility reasons. It requires a
single instance of <span class="self-ref">IfcSite</span> and WGS84 as coordinate reference
system.</p>
<p>For exact georeferencing (or referencing to any other geographic coordinate
system other than WSG84) the entities <strong>IfcCoordinateReferenceSystem</strong> and
<strong>IfcMapConversion</strong> have to be used to define an exact mapping of the
project engineering coordinate system to the geographic (or map) coordinate
system.</p>
<ul>
<li><small>reference height of site is provided by:
<i>IfcSite.RefElevation</i>, it is given according to the height datum used
at this location.</small></li>
<li><small>the reference height of each building situated at the site is given
againt the same height datum used at this location.</small></li>
<li><small>the elevations of each storey belonging to each building are given
as local height relative to the reference height of the building.</small></li>
</ul>
<table border="0" cellpadding="2" cellspacing="2" summary="attribute use">
<tbody>
<tr valign="top">
<td align="left" valign="top"><img src="../../../figures/IfcSite_Heights.png" alt=
"building heights" border="0" height="400" width="500">&nbsp;</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</tbody>
</table>
<h1>IfcSpace</h1>
                                
                                <p>A space represents an area or volume bounded actually or theoretically. Spaces are areas or volumes that provide for certain functions within a building.</p>
<p>A space is associated to a building storey (or in case of exterior spaces to a site). A space may span over several connected spaces. Therefore a space group provides for a collection of spaces included in a storey. A space can also be decomposed in parts, where each part defines a partial space. This is defined by the
<i>CompositionType</i> attribute of the supertype <strong>IfcSpatialStructureElement</strong> which is interpreted as
follow:</p>
<ul>
<li>COMPLEX = space group</li>
<li>ELEMENT = space</li>
<li>PARTIAL = partial space</li>
</ul>
<blockquote class="note">
NOTE&nbsp; View definitions and implementation agreements may restrict spaces with <i>CompositionType</i>=ELEMENT to be non-overlapping.</blockquote>
<p>The <span class="self-ref">IfcSpace</span> is used to build the spatial structure of a
building (that serves as the primary project breakdown and is
required to be hierarchical). The spatial structure elements are
linked together by using the objectified relationship
<strong>IfcRelAggregates</strong>.</p>
<p>

<blockquote class="note">NOTE&nbsp; Detailed requirements on mandatory element containment and placement structure relationships are given in view definitions and implementer agreements.</blockquote>


<table summary="spatial structure" cellpadding="2" cellspacing="2">

<tr><td align="left" valign="top"><img src="../../../figures/IfcSpace-SpatialStructure.png" alt="spatial structure" border="0" height="350" width="800"></td></tr>

<tr><td><p class="figure">

</table>



<p>The following guidelines should apply for using the <i>Name</i>, <i>Description</i>, <i>LongName</i> and <i>ObjectType</i> attributes.</p>
<ul>
<li><i>Name</i> holds the unique name (or space number) from the plan.</li>
<li><i>Description</i> holds any additional information field the
user may have specified, there are no further recommendations.</li>
<li><i>LongName</i> holds the full name of the space, it is often
used in addition to the <i>Name</i>, if a number is assigned to the
room, then the descriptive name is exchanged as
<i>LongName</i>.</li>
<li><i>ObjectType</i> holds the space type, i.e. usually the
functional category of the space .</li>
</ul>
<blockquote class="note">NOTE&nbsp; In cases of inconsistency between the
geometric representation of the <span class="self-ref">IfcSpace</span> and the combined
geometric representations of the surrounding
<strong>IfcRelSpaceBoundary</strong>, the geometric representation of the
space should take priority over the geometric representation of the
surrounding space boundaries.</blockquote>



<p class="use-head">Attribute Use Definition</p>

<p>
<ul>
<li>elevation of the space (top of construction slab) equals elevation of storey: provided by <i>IfcBuildingStorey.Elevation</i> relative to <i>IfcBuilding.ElevationOfRefHeight</i></li>
<li>elevation of the space flooring (top of flooring on top of slab): provided by <i>IfcSpace.ElevationWithFlooring</i> relative to <i>IfcBuilding.ElevationOfRefHeight</i></li>
<li>height of space (top of slab below to bottom of slab above): provided by BaseQuantity with Name="Height"</li>
<li>floor height of space (top of slab below to top of flooring): provided by BaseQuantity with Name="FinishFloorHeight"</li>
<li>net height of space (top of flooring to bottom of suspended ceiling): provided by BaseQuantity with Name="FinishCeilingHeight"</li>
</ul>

<table summary="attributes" cellpadding="2" cellspacing="2">
<tr><td align="left" valign="top"><img src="../../../figures/IfcSpace_Heights.png" alt="space heights" border="0"
height="400" width="450"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSpaceBoundarySelect</h1>
                                
                                <h1>IfcSpaceType</h1>
                                
                                <p>
      A space represents an area or volume bounded actually or
      theoretically. Spaces are areas or volumes that provide for
      certain functions within a building.
    </p>
    <p>
      The <span class="self-ref">IfcSpaceType</span> defines a list of commonly shared
      defines commonly shared information for occurrences of
      spaces. The set of shared information may include:
    </p>
    <ul>
      <li>common properties within shared property sets
      </li>
      <li>common shape representations
      </li>
    </ul>
    <p>
      It is used to define an space specification (i.e. the
      specific space information, that is common to all occurrences
      of that space type. Space types may be exchanged without
      being already assigned to occurrences.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The space types are often used to represent
      space catalogues, less so for sharing a common representation
      map. Space types in a space catalogue share same space
      classification and a common set of space requirement
      properties.
    </blockquote>
    <p>
      The occurrences of <span class="self-ref">IfcSpaceType</span> are represented by
      instances of <strong>IfcSpace</strong>.
    </p>
    
    

    <p class="use-head">Geometry Use Definition</p>
    <p>
      The <span class="self-ref">IfcSpaceType</span> may define the shared geometric
      representation for all space occurrences. The
      <i>RepresentationMaps</i> attribute refers to a list of
      <strong>IfcRepresentationMap</strong>'s, that allow for multiple
      geometric representations (e.g. with
      <i>IfcShaperepresentation</i>'s having an
      RepresentationIdentifier 'Box', 'FootPrint', or 'Body').
    </p>
    <blockquote class="note">
      NOTE&nbsp; The product representations are defined as
      representation maps (at the level of the supertype
      <strong>IfcTypeProduct</strong>, which gets assigned by an element
      occurrence instance through the
      <i>IfcShapeRepresentation.Item[1]</i> being an
      <strong>IfcMappedItem</strong>. However view definitions and
      implementer agreements may prevent the usage of shared
      geometry for spaces.
    </blockquote>
<h1>IfcSpaceTypeEnum</h1>
                                
                                <h1>IfcSpatialElement</h1>
                                
                                <p>A spatial element is the
      generalization of all spatial elements that might be used
      to define a spatial structure or to define spatial zones.
    </p>
    <ul>
      <li>a hierarchical spatial structure element as
      <strong>IfcSpatialStructureElement</strong>
        <ul>
          <li>a spatial structure is a hiearchical decomposition
          of the project. That spatial structure is often used to
          provide a project structure to organize a building
          project.
          </li>
          <li>A spatial project structure might define as many
          levels of decomposition as necessary for the building
          project. Elements within the spatial project structure
          are site, building, storey, and space
          </li>
        </ul>
      </li>
      <li>a spatial zone as <strong>IfcSpatialZone</strong>
        <ul>
          <li>a spatial zone is a non-hierarchical and
          potentially overlapping decomposition of the project
          under some functional consideration.
          </li>
          <li>a spatial zone might be used to represent a thermal
          zone, a lighting zone, a usable area zone.
          </li>
          <li>a spatial zone might have its independent placement
          and shape representation.
          </li>
        </ul>
      </li>
    </ul>
    
<h1>IfcSpatialElementType</h1>
                                
                                <p><span class="self-ref">IfcSpatialElementType</span>
defines a list of commonly shared property set definitions of a
spatial structure element and an optional set of product
representations. It is used to define a spatial element
specification (the specific element information, that is
common to all occurrences of that element type).</p>
<blockquote class="note">
NOTE&nbsp;Â The product representations are defined as
representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.
</blockquote>

<p>A spatial element type is used to define the common properties
of a certain type of a spatial structure element that may be
applied to many instances of thatÂ type to assign a specific
style. Spatial element types (i.e. the instantiable subtypes) may
be exchanged without being already assigned to occurrences.</p>

<blockquote class="note">
NOTE&nbsp;Â The spatial element types are often used to
represent catalogues of predefined spatial types for shared
attributes, less so for sharing a common representation
map.
</blockquote>

<p>The occurrences of subtypes of the abstract
<span class="self-ref">IfcSpatialElementType</span> are represented by instances of
subtypes of the abstract <strong>IfcSpatialElement</strong>.</p>


<h1>IfcSpatialStructureElement</h1>
                                
                                <p>A spatial structure element
(<span class="self-ref">IfcSpatialStructureElement</span>) is the generalization of all
spatial elements that might be used to define a spatial
structure. That spatial structure is often used to provide a
project structure to organize a building project.</p>
<p>A spatial project structure might define as many levels of
decomposition as necessary for the building project. Elements
within the spatial project structure are:</p>
<ul>
<li>site as <strong>IfcSite</strong></li>
<li>building as <strong>IfcBuilding</strong></li>
<li>storey as <strong>IfcBuildingStorey</strong></li>
<li>space as <strong>IfcSpace</strong></li>
</ul>
<p>or aggregations or parts thereof. The composition type
declares an element to be either an element itself, or an
aggregation (complex) or a decomposition (part). The
interpretation of these types is given at each subtype of
<span class="self-ref">IfcSpatialStructureElement</span>.</p>
<p>The <strong>IfcRelAggregates</strong> is defined as an 1-to-many
relationship and used to establish the relationship between
exactly two levels within the spatial project structure. Finally
the highest level of the spatial structure is assigned to
<strong>IfcProject</strong> using the <strong>IfcRelAggregates</strong>.</p>
<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The spatial project structure, established by the
<strong>IfcRelAggregates</strong>, shall be acyclic.</li>
<li>A site should not be (directly or indirectly) associated to a
building, storey or space.</li>
<li>A building should not be (directly or indirectly) associated
to a storey or space.</li>
<li>A storey should not be (directly or indirectly) associated to
a space.</li>
</ol>


<p class="use-head">Relationship Use Definition</p>
<p>The subtypes of <span class="self-ref">IfcSpatialStructureElement</span> relate to
other elements and systems by establishing the following
relationships:</p>
<ul>
<li><b>Containment of elements</b> :
<strong>IfcRelContainedInSpatialStructure</strong> by inverse attribute
<i>ContainsElements</i>, used to assign any element, like
building elements, MEP elements, etc. to the spatial structure
element in which they are primarily contained.
<ul>
<li style="list-style-type=none"><small>NOTE&nbsp; This relationship is
mandatory for elements in several view definitions and
implementer agreements.</small></li>
</ul>
</li>
<li><b>Reference of elements</b> :
<strong>IfcRelReferencedInSpatialStructure</strong> by inverse attribute
<i>ReferencesElements</i>, used to reference any element, like
building elements, MEP elements, etc. in spatial structure
elements, other then the one, where it is contained.</li>
<li><b>Reference of systems</b> : <strong>IfcRelServicesBuildings</strong>
by inverse attribute <i>ServicedBySystems</i>, used to reference
a sytem, like a building service or electrical distribution
system, a zonal system, or a structural analysis system, that is
assigned to this spatial structure element.
<ul>
<li style="list-style-type=none"><small>NOTE&nbsp; Elements within the
referenced system may be directly contained (or referenced) by
other spatial structure elements.</small></li>
</ul>
</li>
</ul>
<p>The subtypes of <span class="self-ref">IfcSpatialStructureElement</span> relate to
each other by using the <strong>IfcRelAggregates</strong> relationship to
build the project spatial structure.</p>

<p>

<table cellpadding="2" cellspacing="2" summary="spatial structure">
<tr valign="top"><td align="left" valign="top"><img src=
"../../../figures/IfcSpatialStructureElement-SpatialStructure.png" alt="fig1" border="0" height="701" width="551"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSpatialStructureElementType</h1>
                                
                                <p>
      The element type
      (<span class="self-ref">IfcSpatialStructureElementType</span>) defines a list of
      commonly shared property set definitions of a spatial
      structure element and an optional set of product
      representations. It is used to define an element
      specification (i.e. the specific element information, that
      is common to all occurrences of that element type).
    </p>
    <blockquote class="note">
      <p>NOTE&nbsp;Â The product representations are defined as
        representation maps (at the level of the supertype
        <strong>IfcTypeProduct</strong>, which gets assigned by an element
        occurrence instance through the
        <i>IfcShapeRepresentation.Item[1]</i> being an
        <strong>IfcMappedItem</strong>.
    </blockquote>
    <p>
      A spatial structure element type is used to define the
      common properties of a certain type of a spatial structure
      element that may be applied to many instances of thatÂ type
      to assign a specific style. Spatial structure element types
      (the instantiable subtypes) may be exchanged without
      being already assigned to occurrences.
    </p>
    <blockquote class="note">
        NOTE&nbsp;Â The spatial structure element types are
        often used to represent catalogues of predefined spatial
        types for shared attributes, less so for sharing a common
        representation map.
      </p>
    </blockquote>
    <p>
      The occurrences of subtypes of the
      abstractÂ <span class="self-ref">IfcSpatialStructureElementType</span> are
      represented by instances of subtypes of
      <strong>IfcSpatialStructureElement</strong>.
    </p>
    
<h1>IfcSpatialZone</h1>
                                
                                <p>A spatial zone is a non-hierarchical and potentially
overlapping decomposition of the project under some functional
consideration.
A spatial zone might be used to represent a thermal zone, a
construction zone, a lighting zone, a usable area zone. 
A spatial zone might have its independent placement and shape
representation.
</p>

<blockquote class="note">
NOTE&nbsp; The <span class="self-ref">IfcSpatialZone</span> is different to
the <strong>IfcZone</strong> entity by allowing an own placement and shape
representation, whereas <strong>IfcZone</strong> is only a grouping of
<strong>IfcSpace</strong>'s.
</blockquote>



<p class="use-head">Attribute Use Definition</p>
<p>The <span class="self-ref">IfcSpatialZone</span> inherits and declares these attributes that shall have the following meaning:</p>
<ul>
<li><i>Name</i>: A number or designator provided by the user or
system for the spatial element, e.g. a space number "1-003",
could also be a running number provided by default by the
application</li>
<li><i>LongName</i>: Name of the spatial element provided by the
user, e.g. a space name "Office".</li>
<li><i>Description</i>: Any additional description provided by
the user, e.g. a space description "Corner office with habour
view".</li>
<li><i>ObjectType</i>: reserved for typing of spatial elements in
case of <i>PredefinedType</i> = .USERDEFINED., restrictions on
applicable values might be published in view definitions or
implementer agreements.</li>
</ul>

<h1>IfcSpatialZoneType</h1>
                                
                                <p>
      The <span class="self-ref">IfcSpatialZoneType</span>
      defines a list of commonly shared property set definitions of
      a space and an optional set of product representations. It is
      used to define a space specification (i.e. the specific space
      information, that is common to all occurrences of that space
      type).
    </p>
    <blockquote class="note">
      NOTE&nbsp; The product representations are defined
        as representation maps (at the level of the supertype
        <strong>IfcTypeProduct</strong>, which gets assigned by an element
        occurrence instance through the
        <i>IfcShapeRepresentation.Item[1]</i> being an
        <strong>IfcMappedItem</strong>.
    </blockquote>
    <p>
      A spatial zone type is used to define the common properties
      of a certain type of space that may be applied to many
      instances of that type to assign a specific style. Space
      types may be exchanged without being already assigned to
      occurrences.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The spatial zone types are often used to
        represent space catalogues, less so for sharing a common
        representation map. Spatial zone types in a space catalogue
        share same space classification and a common set of space
        requirement properties.
    </blockquote>
    <p>
      The occurrences of <span class="self-ref">IfcSpatialZoneType</span> are represented
      by instances of <strong>IfcSpatialZone</strong>.
    </p>
    
<h1>IfcSpatialZoneTypeEnum</h1>
                                
                                <h1>IfcSystem</h1>
                                
                                <p>
      A system is an organized combination of
      related parts within an AEC product, composed for a common
      purpose or function or to provide a service. A system is
      essentially a functionally related aggregation of products.
      The grouping relationship to one or several instances of
      <strong>IfcProduct</strong> (the system members) is handled by
      <strong>IfcRelAssignsToGroup</strong>.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The use of <span class="self-ref">IfcSystem</span> often
      applies to the representation of building services related
      systems, such as the piping system, cold water system, etc.
      Members within such a system may or may not be connected
      using the connectivity related entities (through <strong>IfcDistributionPort</strong>).
    </blockquote>
    
<h1>IfcTransportElement</h1>
                                
                                <p>
      A transport element is a generalization of all transport related objects that move
      people, animals or goods within a building or building
      complex. The <span class="self-ref">IfcTransportElement</span> defines the
      occurrence of a transport element, that (if given), is
      expressed by the <strong>IfcTransportElementType</strong>.
    </p>
    <blockquote class="example">
      EXAMPLE&nbsp; Transportation elements include elevator
      (lift), escalator, moving walkway, etc.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; More detailed equipment that may be a part of a
      transportation device, like a lifting hook, is defined as
      <strong>IfcDiscreteAccessory</strong>. It maybe included as a part of
      the <span class="self-ref">IfcTransportElement</span> by virtue of the objectified
      relationship <strong>IfcRelAggregates</strong>.
    </blockquote>
    <p>
      Depending on local classification systems transport elements
      and transportation systems in buildings are either considered
      as part of a building system, or as part of a building
      service system. Within IFC they are considered as part of a
      building system and may have to be mapped appropriately.
    </p>
    
    
    
<h1>IfcTransportElementType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcTransportElementType</span> defines commonly shared
information for occurrences of transport elements. The set of
shared information may include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common shape representations</li>
</ul>
<p>It is used to define a transport element specification (i.e.
the specific product information that is common to all
occurrences of that beam type). Transport element types (or the
instantiable subtypes) may be exchanged without being already
assigned to occurrences.</p>
<p>The occurrences of the <span class="self-ref">IfcTransportElementType</span> are
represented by instances of <strong>IfcTransportElement</strong> (or its
subtypes).</p>


<p class="use-head">Geometry Use Definition</p>
<p>The <span class="self-ref">IfcTransportElementType</span> may define the shared
geometric representation for all transport element occurrences.
The <i>RepresentationMaps</i> attribute refers to a list of
<strong>IfcRepresentationMap</strong>'s, that allow for multiple geometric
representations (e.g. with <i>IfcShaperepresentation</i>'s having
an <i>RepresentationIdentifier</i> 'Box', 'FootPrint', or
'Body').</p>
<blockquote class="note">NOTE&nbsp; The product shape representations are
defined as <i>RepresentationMaps</i> (attribute of the supertype
<strong>IfcTypeProduct</strong>), which get assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[n]</i> being an
<strong>IfcMappedItem</strong>. See <strong>IfcTypeProduct</strong> for further
information.</blockquote>
<blockquote class="note">NOTE&nbsp; The values of attributes
<i>RepresentationIdentifier</i> and <i>RepresentationType</i> of
<strong>IfcShapeRepresentation</strong> are restricted in the same way as
those for <span class="self-ref">IfcTransportElementType</span>.</blockquote>
<h1>IfcTransportElementTypeEnum</h1>
                                
                                <h1>IfcUniqueQuantityNames</h1>
                                
                                <h1>IfcVirtualElement</h1>
                                
                                <p>A virtual element is a special element used to provide imaginary boundaries, such as between two adjacent, but not separated, spaces. Virtual elements are usually not displayed and does not have quantities and other measures. Therefore <span class="self-ref">IfcVirtualElement</span> does not have material information and quantities attached.</p>

<blockquote class="note">NOTE&nbsp; The main purpose of <span class="self-ref">IfcVirtualElement</span> is the provision of a virtual space boundary. The <span class="self-ref">IfcVirtualElement</span> may provide the 2D curve or 3D surface representation of the virtual space connection and is referenced by two instances of <strong>IfcRelSpaceBoundary</strong>, each pointing to one of the two adjacent <i>IfcSpaces</i>.</blockquote>





<p class="use-head">Space Boundary Use Definition</p>
<p>The <span class="self-ref">IfcVirtualElement</span> is mainly used to define a virtual boundary between two spaces. 

<table>
<tr><td><img src="../../../figures/IfcVirtualElement_SpaceBoundaries.png" alt=
"space boundary" width="800" height="300"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcZone</h1>
                                
                                <p>A zone isÂ a group of spaces,
partial spaces or other zones. Zone structures may not be
hierarchical (in contrary to the spatial structure of a project -
see <strong>IfcSpatialStructureElement</strong>), i.e. one individual
<strong>IfcSpace</strong> may be associated with zero, one, or several
<span class="self-ref">IfcZone</span>'s. <strong>IfcSpace</strong>'s are grouped into an
<span class="self-ref">IfcZone</span> by using the objectified relationship
<strong>IfcRelAssignsToGroup</strong> as specified at the supertype
<strong>IfcGroup</strong>.</p>

<blockquote class="note">
NOTE&nbsp;Â Certain use cases may restrict the
freedom of non hierarchical relationships. In some building
service use cases the zone denotes aÂ view based delimited volume
for the purpose of analysis and calculation. This type of zone
cannot overlap with respect to that analysis, but may overlap
otherwise.
</blockquote>






<h1>IfcArbitraryClosedProfileDef</h1>
                                
                                <p>The closed profile <span class="self-ref">IfcArbitraryClosedProfileDef</span> defines an arbitrary two-dimensional profile for the use within the swept surface geometry, the swept area solid or a sectioned spine. It is given by an outer boundary from which the surface or solid can be constructed. </p>



<p class="spec-head">Informal Propositions:</p>
<ol>
  <li>The <i>OuterCurve</i> has to be a closed curve.</li>
  <li>The <i>OuterCurve</i> shall not intersect.</li>
</ol>

<p>
      <ul>
        <li style="font-style: italic;">IfcSweptSurface.Position</li>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
<p>or in case of sectioned spines the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>. The <i>OuterCurve</i>
attribute defines a two dimensional closed bounded curve.</p>

<table>
<tr><td><img src="../../../figures/IfcArbitraryProfileDef-Layout1.gif" alt="arbitrary profile without boundaries" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>
<h1>IfcArbitraryOpenProfileDef</h1>
                                
                                <p>The open profile <span class="self-ref">IfcArbitraryOpenProfileDef</span> defines an arbitrary two-dimensional open profile for the use within the swept surface geometry. It is given by an open boundary from which the surface can be constructed. </p>



<p class="spec-head">Informal Propositions:</p>
<ol>
  <li>The <i>Curve</i> has to be an open curve.</li>
</ol>

<p>
      <ul>
        <li><i>IfcSweptSurface.Position</i></li>
      </ul>
<p>The <i>Curve</i> attribute defines a two dimensional open bounded curve.</p>

<table>
<tr><td><img src="../../../figures/IfcArbitraryProfileDef-Layout3.gif" alt="arbitrary profile without boundaries" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcArbitraryProfileDefWithVoids</h1>
                                
                                <p>The <span class="self-ref">IfcArbitraryProfileDefWithVoids</span> defines an arbitrary closed two-dimensional profile with holes. It is given by an outer boundary and inner boundaries. A common usage of <span class="self-ref">IfcArbitraryProfileDefWithVoids</span> is as the cross section for the creation of swept surfaces or swept solids.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
  <li>The outer curve and all inner curves shall be closed curves.</li>
  <li>The outer curve shall enclose all inner curves.</li>
  <li>No inner curve shall intersect with the outer curve or any other inner curve. That is, no two curves of the profile definition shall have a point or segment in common, taken into account the geometric precision factor of the geometric representation context. In other words, curves must neither cross nor touch each other.</li>
  <li>No inner curve may enclose another inner curve.</li>
</ol>

<p>
and the inner curves are defined in the same underlying coordinate system. The common underlying coordinate system is defined by the swept area solid that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
      <p>or in case of sectioned spines the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>.  The <i>OuterCurve</i> attribute defines a two dimensional closed bounded curve, the <i>InnerCurves</i> define a set of two dimensional closed bounded curves.</p>

<table>
<tr><td align="left" valign="top" width="420"><img src="../../../figures/IfcArbitraryProfileDef-Layout2.gif" alt="arbitrary profile with inner boundaries" border="0" height="300" 
width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcAsymmetricIShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcAsymmetricIShapeProfileDef</span>
defines a section profile that provides the defining parameters of a
singly symmetric I-shaped section. Its parameters and orientation relative to the
position coordinate system are according to the following illustration.
The centre of the position coordinate system is in the profile's centre
of the bounding box.</p>

<p>The overall width of the profile is implicitly given by the maximum of
the bottom flange width and the top flange width.</p>

<p><span class="self-ref">IfcAsymmetricIShapeProfileDef</span> can also be used to model rail profiles
if the application scenario does not require a full explicit shape model of the
rail profile. Alternatively, <strong>IfcArbitraryClosedProfileDef</strong> can be
used to provide the exact shape of rail profiles. Either way, a reference
to an external document or library should be provided to further define the
profile as described at <strong>IfcProfileDef</strong>.</p>







<p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>By using offsets of the position location, the parameterized profile can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile. The parameterized profile is defined by a set of parameter attributes.  In the illustrated example, the 'CentreOfGravityInY' property in <i>IfcExtendedProfileProperties</i>, if provided, is negative.</p>

<table>
<tr><td><img style="border: 0px solid ; width: 400px; height: 300px;" alt="asymmetric I shape profile" src="../../../figures/IfcAsymmetricIShapeProfileDef.gif"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcCenterLineProfileDef</h1>
                                
                                <p>The profile <span class="self-ref">IfcCenterLineProfileDef</span> defines an arbitrary two-dimensional open, not self intersecting profile for the use within the swept solid geometry. It is given by an area defined by applying a constant thickness to a centerline, generating an area from which the solid can be constructed.</p>

<p>Among else, <span class="self-ref">IfcCenterLineProfileDef</span> is used to model cold-formed
steel or aluminium sections (Sigma, Zeta, Omega, and similar sections
which are not covered by subtypes of <strong>IfcParameterizedProfileDef</strong>).
However, since <span class="self-ref">IfcCenterLineProfileDef</span> does not provide shape parameters
except for the thickness, there is generally a need to further specify the
profile definition by means of</p>
<ul>
  <li>the name,
  <li>external reference to a document or library,</li>
  <li>profile properties,</li>
</ul>
<p>or a combination of them.  See <strong>IfcProfileDef</strong> for guidance on external references for profiles.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
  <li>The <i>Curve</i> has to be an open curve.</li>
  <li>The <i>Curve</i> has to be a non-intersecting curve.</li>
</ol>

<p>
      <ul>
        <li><i>IfcSweptSurface.Position</i></li>
      </ul>
<p>The <i>Curve</i> attribute defines a two dimensional open bounded curve. The <i>Thickness</i> attribute defines a constant thickness along the curve.</p>

<table>
<tr><td><img alt="center line" src="../../../figures/IfcArbitraryProfileDef-Layout4.gif" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcCircleHollowProfileDef</h1>
                                
                                <p><span class="self-ref">IfcCircleHollowProfileDef</span>
defines a section profile that provides the defining parameters of a
circular hollow section (tube) to be used by the swept area solid. Its
parameters and orientation relative to the
position coordinate system are according to the following
illustration.The centre of the position coordinate system is in the
profile's centre of the bounding box (for symmetric profiles identical
with the centre of gravity).</p>



<p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>By using offsets of the position location, the parameterized profile can be positioned centric (using x,y offsets = 0.), or at any position relative to the profile. Explicit coordinate offsets are used to define cardinal points (for example, upper-left bound). The parameterized profile is defined by a set of parameter attributes.</p>

<table>
<tr><td><img src="../../../figures/IfcCircleHollowProfileDef.gif" alt="CHS-shape profile" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcCircleProfileDef</h1>
                                
                                <p><span class="self-ref">IfcCircleProfileDef</span> defines a circle as the profile definition used by the swept surface geometry or by the swept area solid. It is given by its <i>Radius</i> attribute and placed within the 2D position coordinate system, established by the <i>Position</i> attribute. </p>



<p>
      <ul>
        <li><i>IfcSweptSurface.Position</i></li>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>Or in case of sectioned spines, it is the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>. By using offsets of the position location, the parameterized profile can be positioned centric (using x,y offsets = 0.), or at any position relative to the profile. Explicit coordinate offsets are used to define cardinal points (e.g. upper-left bound). The <i>Position</i> attribute defines the 2D position coordinate system of the circle.<br> The <i>Radius</i> attribute defines the radius of the circle.</p>

<table>
<tr><td><img src="../../../figures/IfcCircleProfileDef-Layout1.gif" alt="circle profile" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>
<h1>IfcCompositeProfileDef</h1>
                                
                                <p>The <span class="self-ref">IfcCompositeProfileDef</span>
defines the profile by composition of other profiles. The composition
is given by a set of at least two other profile definitions. Any
profile definition (except for another composite profile) can be used
to construct the composite. </p>



<p>
      <ul>
        <li><i>IfcSweptSurface.Position</i></li>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>Or in case of sectioned spines it is the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>. The <span class="self-ref">IfcCompositeProfileDef</span> is defined using other profile definitions. Those other profile definitions are directly inserted into the underlying coordinate system.</p>
      <ul>
        <li>In case of parameterized profile definitions, the <i>Position</i> attribute of those standard profiles is used to place the profiles relatively to each other.</li>
        <li>In case of arbitrary profile definitions, each Cartesian coordinate is given directly within the underlying coordinate system.</li>
      </ul>

<blockquote class="note">
NOTE&nbsp; The black coordinate axes show the underlying coordinate system of the swept surface or swept area solid.
</blockquote>

<table>
<tr><td style="vertical-align: top; text-align: left; width: 400px;"><img src="../../../figures/IfcCompositeProfileDef-Layout1.gif" alt="composite" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<p class="use-head">Twin profiles special case</p>

<p>If twin profiles are modeled by profile composition, the base profile should
only be specified once. It is then included into the composite profile directly
and additionally indirectly via <strong>IfcMirroredProfileDef</strong>. For example, a
double angle made of two L100x10 with 10mm air gap between them, i.e. a
_|&nbsp;|_ shape, can be modeled as</p>

<blockquote><code>
single_L : IfcLShapeProfileDef := IfcLShapeProfileDef(AREA, 'L100X100X10',<br>
&nbsp;&nbsp;&nbsp;&nbsp;IfcAxis2Placement2D(IfcCartesianPoint(((.100+.010)/2., .0)), ?),<br>
&nbsp;&nbsp;&nbsp;&nbsp;.100, .100, .010, .012, ?, 0., ?, ?);<br>
&nbsp;<br>
double_L : IfcCompositeProfileDef := IfcCompositeProfileDef(AREA, 'double angle',<br>
&nbsp;&nbsp;&nbsp;&nbsp;(single_L, IfcMirroredProfileDef(AREA, ?, single_L, ?)), 'twin profile');
</code></blockquote>

<h1>IfcCShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcCShapeProfileDef</span> defines
a section profile that provides the defining parameters of a C-shaped
section to be used by the swept area solid. This section is typically
produced by cold forming steel. Its parameters and orientation relative
to the position coordinate system are according to the following
illustration. The centre of the position coordinate system is in the
profile's centre of the bounding box.</p>







<p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>By using offsets of the position location, the parameterized profile can be positioned centric (using x,y offsets = 0.), or at any position relative to the profile. The parameterized profile is defined by a set of parameter attributes. In the illustrated example, the 'CentreOfGravityInX' property in <i>IfcExtendedProfileProperties</i>, if provided, is negative.</p>

<table>
<tr><td><img src="../../../figures/IfcCShapeProfileDef.gif" alt="C-shape profile" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcDerivedProfileDef</h1>
                                
                                <p><span class="self-ref">IfcDerivedProfileDef</span> defines the profile by transformation from the parent profile. The transformation is given by a two dimensional transformation operator. Transformation includes translation, rotation, mirror and scaling. The latter can be uniform or non uniform. The derived profiles may be used to define swept surfaces, swept area solids or sectioned spines.</p>

<p>The transformation effects the position, rotation, mirroring or scale of the profile at the underlying coordinate system, i.e. the coordinate system defined by the swept surface or swept area solid that uses the profile definition. It is the xy plane of either: </p>

<ul>
  <li><i>IfcSweptSurface.Position</i></li>
  <li><i>IfcSweptAreaSolid.Position</i></li>
</ul>

<p>or in case of sectioned spines the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>. The position and potential rotation of the <i>ParentProfile</i> within the underlying coordinate system is taken into consideration before applying the Cartesian transformation operator.</p>

<p>Note, if only mirroring is required, <strong>IfcMirroredProfileDef</strong> should be used instead.</p>



<p>

<table>
<tr><td>
<table border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td align="left" valign="top" width="405">

<img
 src="../../../figures/IfcDerivedProfileDef-Layout1.gif" alt="uniform"
 border="0" height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Parameter</u><br>
The <span class="self-ref">IfcDerivedProfileDef</span>
is defined using the <strong>IfcCartesianTransformationOperator2D</strong>
(CTO), which is applied to the parent profile definition. <br>
</p>

<p><u>Example</u><br>
The example shows an uniform scaling and a transformation
of an <strong>IfcRectangleProfileDef</strong>
to match the lower-left cardinal point. The attributes of the CTO are:<br>
</p>

      <blockquote><tt>Axis1 = NIL (defaults to 1.,0.)<br>
      Axis2 = NIL (defaults to 0.,1.)<br>
      LocalOrigin = IfcCartesianPoint(&lt;1/2 XDim&gt;,&lt;1/2 YDim&gt;)<br>
      Scale = 2.<br>
      </tt></blockquote>

<font size="-1">Note: The <i>ParentProfile</i> has a <i>Position</i>
= <strong>IfcCartesianPoint</strong>(&lt;1/2 XDim&gt;,&lt;1/2 YDim&gt;) already.</font><br>

      </td>
    </tr>
    <tr>
      <td align="left" valign="top" width="405">

<img
 src="../../../figures/IfcDerivedProfileDef-Layout2.gif" alt="non uniform"
 border="0" height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Parameter</u><br>
The <span class="self-ref">IfcDerivedProfileDef</span> is defined using
non uniform transformationsby applying the <strong>IfcCartesianTransformationOperator2DnonUniform</strong>
as a subtype of the 2D CTO.</p>

<p><u>Example</u><br>
The example shows a non-uniform scaling and a translation of an <strong>IfcRectangleProfileDef</strong>
to match the lower-left cardinal point. The attributes of the CTO are:</p>

      <blockquote><tt>Axis1 = NIL (defaults to 1.,0.)<br>
      Axis2 = NIL (defaults to 0.,1.)<br>
      LocalOrigin = IfcCartesianPoint(0.,&lt;1/2 YDim)<br>
      Scale&nbsp; = 1.<br>
      Scale2 = 2.<br>
      </tt></blockquote>

<font size="-1">Note: The <i>ParentProfile</i> has a <i>Position</i>
= <strong>IfcCartesianPoint</strong>(&lt;1/2 XDim&gt;,&lt;1/2 YDim&gt;) already.</font>

      </td>
    </tr>
    <tr>
      <td align="left" valign="top">

<img
 alt="mirroring" src="../../../figures/IfcDerivedProfileDef-Layout3.gif"
 border="0" height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Parameter</u><br>
The <span class="self-ref">IfcDerivedProfileDef</span>
is defined using mirroring by applying the <strong>IfcCartesianTransformationOperator2D</strong>
(CTO) to the parent profile.</p>

<p><u>Example</u><br>
The example shows a mirroring of an <strong>IfcLShapeProfileDef</strong>
to match the centre cardinal point. The attributes of the CTO are:</p>

      <blockquote><tt>Axis1 = (-1.,0.)<br>
      Axis2 = NIL (defaults to 0.,1.)<br>
      LocalOrigin = IfcCartesianPoint(0.,0.)<br>
      Scale = NIL (defaults to 1.)<br>
      </tt></blockquote>

<font size="-1">Note: The <i>ParentProfile</i> has a <i>Position</i> = <strong>IfcCartesianPoint</strong>(0.,0.).</font>

<p>This example is for illustration only.
If the transformation results only in mirroring like shown in the example, then
<strong>IfcMirroredProfileDef</strong> should be used instead of <span class="self-ref">IfcDerivedProfileDef</span>.</p>

      </td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1" align="left" valign="top" width="405">

<font size="-1">Note: The following color map applies:</font><br>

      <ul>
        <li><font size="-1">black coordinate axes show the
		underlying coordinate system of the swept surface, swept area solid, or
		sectioned spine</font></li>

        <li><font size="-1"><font color="#ff0000">red coordinate axes</font>
		show the position coordinate system of the parent profile</font></li>

        <li><font size="-1"><font color="#993300">brown coordinate axes</font>
		show the position coordinate system of the derived profile</font></li>
      </ul>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcEllipseProfileDef</h1>
                                
                                <p><span class="self-ref">IfcEllipseProfileDef</span> defines an ellipse as the profile definition used by the swept surface geometry
or the swept area solid. It is given by its semi axis attributes and placed within the 2D position coordinate system, established by the <i>Position</i> attribute. </p>



<p>
The underlying coordinate system is defined by the swept surface or swept area solid that uses the profile definition. It is the xy plane of either: </p>
      <ul>
        <li><i>IfcSweptSurface.Position</i></li>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>Or in case of sectioned spines it is the xy plane of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>. By using offsets of the position location, the parameterized profile can be positioned centric (using x,y offsets = 0.), or at any position relative to the profile. Explicit coordinate offsets are used to define cardinal points (for example, upper-left bound). The location of the position coordinate system defines the center of the ellipse. The <i>SemiAxis1</i> attribute defines the first radius of the ellipse in the direction of the X axis, the <i>SemiAxis2</i> attribute defines the second radius of the ellipse in the direction of the Y axis.</p>

<blockquote class="note">
NOTE&nbsp; The semi axes of the ellipse are rectangular to each other by definition.
</blockquote>

<table>
<tr><td><img src="../../../figures/IfcEllipseProfileDef-Layout1.gif" alt="ellipse profile" border="0" height="300" width="400"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcIShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcIShapeProfileDef</span>
defines a section profile that provides the defining parameters of an
'I' or 'H' section. The I-shape profile has values for its overall depth,
width and its web and flange thicknesses. Additionally a fillet radius,
flange edge radius, and flange slope may be given.
This profile definition represents an I-section which is symmetrical about
its major and minor axes; top and bottom flanges are equal and centred on
the web.</p>





<p>

<table>
<tr><td>
<table border="1" cellpadding="2"
 cellspacing="2" frame="border" width="100%">
  <tbody>
    <tr>
      <td width="420"><img
 src="../../../figures/IfcIShapeProfileDef-Layout1.gif"
 alt="I-shape profile" border="0" height="300"
 width="400"></td>
      <td align="left" valign="top"
 width="100%">
      <p><u>Position</u>
      <br>
The parameterized
profile defines its own position coordinate system.
The underlying
coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of: </p>
      <ul>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
by using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile. Explicit coordinate offsets are used to define
cardinal points (e.g. upper-left bound).
      <p><u>Parameter</u>
      <br>
The parameterized profile
is defined by a set of parameter attributes, see attribute definition
below.</p>
      </td>
    </tr>
    <tr>
      <td width="420"><img
 src="../../../figures/IfcIShapeProfileDef-Layout2.gif"
 alt="I shape with fillet" border="0" height="300"
 width="400"><br>
      <font size="-1">Note:
The black coordinate axes show the
underlying coordinate system of the swept surface or swept area solid</font></td>
      <td align="left" valign="top"
 width="100%">
      <p><u>Position</u>
      <br>
The profile is inserted into the underlying
coordinate system of the swept area solid by using the <i>Position</i>
attribute. In this example (cardinal point of lower left corner) the
attribute values of <strong>IfcAxis2Placement2D</strong>
are:</p>
      <blockquote>
        <p> <tt>Location
= IfcCartesianPoint(&lt;1/2
OverallWidth&gt;,&lt;1/2 OverallDepth&gt;)<br>
RefDirection = NIL (defaults to 1.,0.)</tt></p>
      </blockquote>
      <p><u>Parameter</u><br>
If the <i>FilletRadius</i>
is given, it is equally applied to all four corners created by the web
and flanges.</p>
      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcLShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcLShapeProfileDef</span>
defines a section profile that provides the defining parameters of an
L-shaped section (equilateral L profiles are also covered by this
entity) to be used by the swept area
solid. Its parameters and orientation relative to the position
coordinate system are according to the following illustration. The
shorter leg has the same direction as the positive <i>Position.P[1]</i>-axis, the longer
or equal leg the same as the positive <i>Position.P[2]</i>-axis. The centre of the
position coordinate system is in the profiles centre
of the bounding box.</p>







<p>

<table>
<tr><td>
<table border="1" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
    <tr>
      <td align="left" valign="top" width="420">

<img
 alt="non equal sided L-shape"
 src="../../../figures/IfcLShapeProfileDef_Layout1.gif" border="0"
 height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Position</u> <br>
The parameterized profile defines its own position coordinate system.
The underlying coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>by using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile.</p>

<p>In the illustrated example, the 'CentreOfGravityInX' and 'CentreOfGravityInY' properties in <i>IfcExtendedProfileProperties</i>, if provided, are both negative.</p>

      </td>
    </tr>
    <tr>
      <td>

<img
 alt="equal sided L-shape"
 src="../../../figures/IfcLShapeProfileDef_Layout2.gif" border="0"
 height="300" width="400"><br>

<font size="-1">Note:
The black coordinate axes show the
underlying coordinate system of the swept surface or swept area solid</font>

      </td>
      <td align="left" valign="top">

<p><u>Position</u> <br>
The profile is inserted into the underlying
coordinate system of the swept area solid by using the <i>Position</i>
attribute. In this example (cardinal point of gravity) the
attribute values of <strong>IfcAxis2Placement2D</strong>
are:</p>

<blockquote>
<p><tt>Location = IfcCartesianPoint(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+|CentreOfGravityInX|,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+|CentreOfGravityInY|)<br>
RefDirection = NIL (defaults to 1.,0.)</tt></p>
</blockquote>

<p>In the illustrated example, the x and y value of <i>Position.Location</i>, i.e. the <u>measures</u> |CentreOfGravityInX| and |CentreOfGravityInY| are both positive.  On the other hand, the <u>properties</u> named 'CentreOfGravityInX' and 'CentreOfGravityInY' in <i>IfcExtendedProfileProperties</i>, if provided, must both be set to 0 now because the centre of gravity of the resulting profile definition is located in the coordinate origin.</p>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcMirroredProfileDef</h1>
                                
                                <p>The <span class="self-ref">IfcMirroredProfileDef</span> defines the profile by mirroring the parent profile about the y axis of the parent profile coordinate system. That is, left and right of the parent profile are swapped.</p>

<p>Notes:</p>

<p><span class="self-ref">IfcMirroredProfileDef</span> is primarily useful together with
<strong>IfcCShapeProfileDef</strong>, <strong>IfcLShapeProfileDef</strong>,
<strong>IfcUShapeProfileDef</strong>, or <strong>IfcZShapeProfileDef</strong> as
parent profile but can be used with other parent profile types as well.</p>

<p>Mirroring of an <strong>IfcParameterizedProfileDef</strong> is performed after
translation and rotation according to its <i>Position</i> attribute.
For example, if the parent profile's <i>Position</i> offsets it by half
of its width to the right, then the mirrored profile will be offset by
half of its width to the left.</p>

<p>Mirroring about the x axis, i.e. swapping top and bottom, can be
achieved by mirroring about the y axis coupled with 180 degree rotation
about the z axis.
In general, rotation happens in a containing object such as
<strong>IfcSweptAreaSolid</strong>, i.e. after mirroring by <span class="self-ref">IfcMirroredProfileDef</span>
was performed.
If the parent profile is an <strong>IfcParameterizedProfileDef</strong>, rotation
can alternatively happen already in the parent profile by means of its
<i>Position</i> attribute, i.e. before mirroring by <span class="self-ref">IfcMirroredProfileDef</span>
was performed.</p>



<h1>IfcParameterizedProfileDef</h1>
                                
                                <p>The parameterized profile definition
defines a 2D position coordinate system to which the parameters of the
different profiles relate to. All profiles are defined centric to the
origin of the position coordinate system, or more specific, the origin
[0.,0.] shall be in the center of the bounding box of the profile.</p>

<p>The <i>Position</i> attribute of <span class="self-ref">IfcParameterizedProfileDef</span>
is used to position the profile within the XY plane of the underlying
coordinate system of the swept surface geometry, the swept area
solid or the sectioned spine. It can be used to position the profile at
any point which becomes the origin [0.,0.,0.] of the extruded
or rotated surface or solid.</p>

<p>The <i>Position</i> attribute should not be used if the transformation
can be specified in a containing object instead.  In particular, this
applies if the <span class="self-ref">IfcParameterizedProfileDef</span> is referenced as
<i>SweptArea</i> in subtypes of <strong>IfcSweptAreaSolid</strong> or as
<i>CrossSections</i> in <strong>IfcSectionedSpine</strong>.</p>

<p>Several subtypes of <span class="self-ref">IfcParameterizedProfileDef</span> provide
shape parameters which are optional. Sending systems should always
provide values for these parameters if possible. If these parameters
are left unspecified, receiving systems may retrieve values for them
by external reference (if a reference to an external document or library
is given; see guidance at <strong>IfcProfileDef</strong>), or estimate them, or
simply assume zero values.</p>









<h1>IfcProfileDef</h1>
                                
                                <p><span class="self-ref">IfcProfileDef</span>
is the supertype of all definitions of standard and arbitrary profiles
within IFC. It is used to define a standard set of commonly used
section profiles by their parameters or by their explicit curve geometry.</p>

<ul>
  <li>Parameterized profiles are 2D primitives, which are used within the industry to describe cross
  sections by a description of its parameters.</li>
  <li>Arbitrary profiles are cross
  sections defined by an outer boundary as bounded curve, which may also
  include holes, defined by inner boundaries.</li>
  <li>Derived profiles, based on a
  transformation of a parent profile, are also part of the profile
  definitions available.</li>
  <li>In addition composite
  profiles can be defined, which include two or more profile definitions
  to define the resulting profile.</li>
</ul>






<p><b>Use in material association</b></p>

<p>Beams, columns, and similarly shaped building elements and their type objects may
be associated with a section profile definition, combined with material definition,
by means of <strong>IfcRelAssociatesMaterial</strong> together with <strong>IfcMaterialProfileSet</strong>
and <strong>IfcMaterialProfileSetUsage</strong>. This way, building elements and element types
with same section and material can share a common section profile definition and
association.</p>

<p>The profile definition in material association is required to be consistent with
shape representations of the respective building elements.</p>

<p>A higher-level description of spatial aligment of the section profile of a member
(such as centered, bottom-left, in the geometric centroid, and more) can be provided
within <strong>IfcMaterialProfileSetUsage</strong> by means of a cardinal point reference.
This can be used redundant to geometric data in order to convey design intent.</p>


<p><b>Use in shape models</b></p>

<p>Profile definitions are used within the geometry and geometric model
resource to create either swept surfaces, swept area solids, or
sectioned spines.</p>

<p>The purpose of the profile
definition within the swept surfaces or swept area solids is to define
a uniform cross section being swept:</p>

<ul>
  <li>along a line (extrusion) using <strong>IfcSurfaceOfLinearExtrusion</strong> or <strong>IfcExtrudedAreaSolid</strong></li>
  <li>along a circular arc (revolution) using <strong>IfcSurfaceOfRevolution</strong> or <strong>IfcRevolvedAreaSolid</strong></li>
  <li>along a directrix lying on a reference surface using <strong>IfcSurfaceCurveSweptAreaSolid</strong></li>
</ul>

<p>The purpose of the profile
definition within the sectioned spine is to define a varying cross
sections at several positions along a spine curve. The subtype <strong>IfcDerivedProfileDef</strong>
is particularly suited to provide the consecutive profiles to be based
on transformations of the start profile and thus maintaining the
identity of vertices and edges.</p>

<blockquote class="note">
NOTE&nbsp; Subtypes of the <span class="self-ref">IfcProfileDef</span>
contain parameterized profiles (as subtypes of <strong>IfcParameterizedProfileDef</strong>)
which establish their own 2D position coordinate system, profiles given
by explicit curve geometry (either open or closed profiles) and two
special types for composite profiles and derived profiles, based on a
2D Cartesian transformation.
</blockquote>

<p>An <span class="self-ref">IfcProfileDef</span>
is treated as bounded area if it is used within swept area solids. In
this case, the inside of the profile is part of the profile. The
attribute <i>ProfileType</i> is set to AREA. An <span class="self-ref">IfcProfileDef</span>
is treated as a curve if it is used within swept surfaces. In this
case, the inside of the profile (if the curve is closed) is not part of
the profile. The attribute <i>ProfileType</i>
is set to CURVE.</p>


<p>

<table><tr><td>
<table border="1" cellpadding="2" cellspacing="2" frame="border" width="100%">
  <tbody>
    <tr valign="top">
      <td align="left" valign="top" width="420">

<img
 src="../../../figures/IfcProfileDef-Layout1.gif"
 alt="Example of standard profile definition" border="0"
 height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Position</u><br>
The <span class="self-ref">IfcProfileDef</span> is defined within the underlying
coordinate system which is defined by the swept surface or swept area solid
that uses the profile definition. It is the xy plane</p>

      <ul>
        <li>of <i>IfcSweptSurface.Position</i> or</li>
        <li>of <i>IfcSweptAreaSolid.Position</i> or</li>
        <li>of each list member of <i>IfcSectionedSpine.CrossSectionPositions</i>.</li>
      </ul>

<p>In the figure to the left, the z axis of the position coordinate system points outwards of the drawing plane.</p>

<p><font size="-1">Note: The subtype <strong>IfcParameterizedProfileDef</strong> optionally provides an additional 2D position coordinate system relative to the underlying coordinate system of the <span class="self-ref">IfcProfileDef</span>.</font></p>

      </td>
    </tr>
    <tr>
      <td width="420">

<img
 src="../../../figures/IfcProfileDef-Layout5.gif"
 alt="use within swept area solids" border="0"
 height="300" width="400">

      </td>
      <td align="left" valign="top">

<p><u>Sweeping</u></p>

<p>In the later use of the <span class="self-ref">IfcProfileDef</span>
within the swept surface or swept area solid,&nbsp; e.g. the <strong>IfcExtrudedAreaSolid</strong>
(here used as an example), the profile boundaries (here based on the 2D
position coordinate system of <strong>IfcParameterizedProfileDef</strong>)
are placed within the xy plane of the 3D position coordinate system of
the swept surface or swept area solid.</p>

<p>The profile is inserted into the underlying coordinate system either:</p>

      <ul>
        <li>directly in case of using <strong>IfcArbitraryClosedProfileDef</strong>
        and <strong>IfcArbitraryOpenProfileDef</strong>,</li>

        <li>through an intermediate position coordinate system in case of
        using <strong>IfcParameterizedProfileDef</strong>.</li>

        <li>through an 2D Cartesian transformation operator (applied directly
        to the curve position when using arbitrary profile definitions,
        or applied to the position coordinate system when using parameterized
        profile definitions) in case of using <strong>IfcDerivedProfileDef</strong>.</li>

        <li>when using <strong>IfcCompositeProfileDef</strong> the insertion depends on
        the subtype of the included sub-profiles.</li>
      </ul>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<p><b>Profile types</b></p>

<p>Results of the different usage of the <i>ProfileType</i> attribute are demonstrated here. The <i>ProfileType</i> defines whether the inside (the bounded area) is part of the profile definition (Area) or not (Curve). 

<table><tr><td>
<table border="1" cellpadding="2" cellspacing="2" frame="border" width="100%">
  <tbody>
    <tr>
      <td width="420">

<img src="../../../figures/IfcProfileDef-Layout3.gif"
 alt="area without thickness" height="225" width="300"><br>
ProfileType = AREA

      </td>
      <td align="left" valign="top">

<img src="../../../figures/IfcProfileDef-Layout4.gif" alt="closed curve"
 height="225" width="300"><br>
ProfileType = CURVE

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>


<p><b>Profile specification by external reference</b></p>

<p>If the profile is standardized by a norm or a catalogue, a reference
to this norm or catalogue should be provided by means of <i>HasExternalReference</i>.
This inverse relationship is used to associate an <strong>IfcExternalReference</strong> (notably
<strong>IfcClassificationReference</strong> or <strong>IfcLibraryReference</strong>) with the
profile.</p>

<p><strong>IfcClassificationReference</strong> is used to refer to a profile norm (a common standard or
manufacturer's standard).  In this case,</p>
<ul>
<li><i>IfcClassificationReference.ItemReference</i>
contains the formal profile designation from the norm.
(On the other hand, <i>IfcProfileDef.ProfileName</i> contains a displayable name which may
not necessarily be the same as the formal designation.)</li>
<li><i>IfcClassificationReference.Name</i> carries the short name of the profile norm.</li>
<li>Optionally, the norm can be further described by
<i>IfcClassificationReference.ReferencedSource</i>.</li>
</ul>

<p><strong>IfcLibraryReference</strong> is used to refer to a library which contains profile
definitions. In this case,</p>
<ul>
<li><i>IfcLibraryReference.ItemReference</i> contains the identifier of the
profile within the library and is meant to be machine-readable (in contrast to
<i>IfcProfileDef.ProfileName</i> which should be human-readable).</li>
<li><i>IfcLibraryReference.Location</i> and <i>.Name</i> or <i>.ReferencedLibrary</i>
further describe the library.</li>
</ul>

<p>If an external reference is provided, sending systems shall ensure that
the shape of the profile definition object agrees with the definitions in the
referenced classification or library.</p>



<p><b>Direct instances of <span class="self-ref">IfcProfileDef</span></b></p>

<p>Usually, only subtypes of <span class="self-ref">IfcProfileDef</span> should be instantiated.
In some special cases, e.g. if the profile object is used for purposes
other than geometric models (e.g. for structural analysis models), it may be
possible to directly instantiate <span class="self-ref">IfcProfileDef</span> and further specify
the profile only by external reference or by profile properties. The latter
are tracked by the inverse attribute <i>HasProperties</i>.</p>

<h1>IfcProfileProperties</h1>
                                
                                <p>
      This is a collection of properties applicable to section
      profile definitions.
    </p>

    
    

    <p class="use-head">
      Property use definitions
    </p>
    <p>
      The following sets of material property definitions are part
      of this IFC release. They are direct instantiations of
      <i>IfcProperties</i> with the <i>Name</i> attribute
      holding the property set name.
    </p>

<ul>
<li><strong>Pset_ProfileMechanical</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_ProfileArbitraryHollowCore</strong> (<strong>occurrence driven</strong>)</li>
<li><strong>Pset_ProfileArbitraryDoubleT</strong> (<strong>occurrence driven</strong>)</li>
</ul>

<p>
<table>
<tr><td><image src="../../../figures/ifcprofileproperties_mechanical.png" alt="Mechanical profile properties"/></td></tr>
<tr><td><p class="figure">
</table>

<p>
<table>
<tr><td><image src="../../../figures/ifcprofileproperties_double_t.png" alt="Double T profile properties"/></td></tr>
<tr><td><p class="figure">
</table>

<p>
<table>
<tr><td><image src="../../../figures/ifcprofileproperties_hollow_core.png" alt="Hollow core profile properties"/></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcProfileTypeEnum</h1>
                                
                                <h1>IfcRectangleHollowProfileDef</h1>
                                
                                <p><span class="self-ref">IfcRectangleHollowProfileDef</span> defines a section profile that provides the defining parameters of a rectangular (or square) hollow section to be used by the swept surface geometry or the swept area solid. Its parameters and orientation relative to the position coordinate system are according to the following illustration. A square hollow section can be defined by equal values for h and b. The centre of the position coordinate system is in the profiles centre of the bounding box (for symmetric profiles identical with the centre of gravity). Normally, the longer sides are parallel to the y-axis, the shorter sides parallel to the x-axis.</p>





<p>

<table><tr><td>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top; text-align: left; width: 420px;">

<img
 src="../../../figures/IfcRectangleHollowProfileDef.gif"
 alt="hollow rectange shape profile" border="0"
 height="300" width="400">

      </td>
      <td style="vertical-align: top; text-align: left;">

<p><u>Position</u><br>
The parameterized profile defines its own position coordinate system.
The underlying coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
<p>by using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile.</p>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcRectangleProfileDef</h1>
                                
                                <p><span class="self-ref">IfcRectangleProfileDef</span> defines a rectangle as the profile definition used by the swept surface geometry or the swept area solid. It is given by its X extent and its Y extent, and placed within the 2D position coordinate system, established by the <i>Position</i> attribute. It is placed centric within the position coordinate system. </p>



<p>

<table><tr><td>
<table frame="border" width="100%">
  <tbody>
    <tr>
      <td width="420"><img
 src="../../../figures/IfcRectangleProfileDef-Layout1.gif"
 alt="rectangle profile" border="0" height="300"
 width="400"></td>
      <td align="left" valign="top"
 width="100%">
      <p><u>Position</u>
      <br>
The parameterized profile defines its own position coordinate system.
The underlying
coordinate system is defined by the swept surface or swept area solid
that uses the profile definition. It is the xy plane of either: </p>
      <ul>
        <li style="font-style: italic;">IfcSweptSurface.Position</li>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
or in case of sectioned spines the xy plane of each list member of <span
 style="font-style: italic;">IfcSectionedSpine.CrossSectionPositions.</span>
      <br>
      <br>
By using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile. Explicit coordinate offsets are used to define
cardinal points (for example, upper-left bound).
      <p><u>Parameter</u>
      <br>
The <span class="self-ref">IfcRectangleProfileDef</span>
is defined within the position
coordinate system, where the <i>XDim</i>
defines the length measure
for the length of the rectangle (half along the positive x-axis) and
the <i>YDim</i>
defines the length measure for the width of the
rectangle (half along the positive y-axis).</p>
      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcReinforcementBarProperties</h1>
                                
                                <p><i>IfcReinforcementProperties</i> defines the set of properties for a specific combination of reinforcement bar steel grade, bar type and effective depth.</p> 

 

<p>The total cross section area for the specific steel grade is always provided. Additionally also general reinforcing bar configurations as a count of bars may be provided as defined in attribute <i>BarCount</i>. In this case the nominal bar diameter should be identical for all given bars as defined in attribute <i>NominalBarDiameter</i>.</p> 

<h1>IfcReinforcingBarRoleEnum</h1>
                                
                                <h1>IfcReinforcingBarSurfaceEnum</h1>
                                
                                <h1>IfcRoundedRectangleProfileDef</h1>
                                
                                <p><span class="self-ref">IfcRoundedRectangleProfileDef</span> defines a rectangle with equally rounded corners as the profile definition used by the swept surface geometry or the swept area solid. It is given by the X extent, the Y extent, and the radius for the rounded corners, and placed within the 2D position coordinate system, established by the <i>Position</i> attribute. It is placed centric within the position coordinate system, that is, in the center of the bounding box.
</p>





<p>

<table><tr><td>
<table frame="border" width="100%">
  <tbody>
    <tr>
      <td width="420"><img
 src="../../../figures/IfcRoundedRectangleProfileDef-Layout1.gif"
 alt="rounded rectangle profile" border="0" height="300"
 width="400"></td>
      <td align="left" valign="top"
 width="100%">
      <p><u>Position</u>
      <br>
The parameterized profile defines its own position coordinate system.
The underlying
coordinate system is defined by the swept surface or swept area solid
that uses the profile definition. It is the xy plane of either: </p>
      <ul>
        <li style="font-style: italic;">IfcSweptSurface.Position</li>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
or in case of sectioned spines the xy plane of each list member of <span
 style="font-style: italic;">IfcSectionedSpine.CrossSectionPositions.</span>
      <br>
      <br>
By using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile. Explicit coordinate offsets are used to define
cardinal points (e.g. upper-left bound).
      <p><u>Parameter</u>
      <br>
The <span class="self-ref">IfcRoundedRectangleProfileDef</span>
is defined within the
position coordinate system, where the <i>XDim</i>
defines the measure
for the length of the rectangle (half along the positive x-axis), the <i>YDim</i>
defines the length measure for the width of the rectangle (half along
the positive y-axis) and the <i>RoundingRadius</i>
defines the radius
of curvature in all four corners of the rectangle.</p>
      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSectionProperties</h1>
                                
                                <p><span class="self-ref">IfcSectionProperties</span> defines the cross section properties for a single longitudinal piece of a cross section.  It is a special-purpose helper class for <strong>IfcSectionReinforcementProperties</strong>.</p>

 

<p>The section piece may be either uniform or tapered. In the latter case an end profile should also be provided. The start and end profiles are assumed to be of the same profile type. Generally only rectangular or circular cross section profiles are assumed to be used.</p>

<h1>IfcSectionReinforcementProperties</h1>
                                
                                <p><span class="self-ref">IfcSectionReinforcementProperties</span> defines the cross section properties of reinforcement for a single longitudinal piece of a cross section with a specific reinforcement usage type. </p> 

 

<p>Several sets of cross section reinforcement properties represented by instances of <i>IfcReinforcementProperties</i> may be attached to the section reinforcement properties
(<strong>IfcReinforcementDefinitionProperties</strong> of <i>IfcStructuralElementsDomain</i> schema),
one for each combination of steel grades and reinforcement bar types and sizes.</p>

<h1>IfcSectionTypeEnum</h1>
                                
                                <h1>IfcTrapeziumProfileDef</h1>
                                
                                <p><span class="self-ref">IfcTrapeziumProfileDef</span> defines a trapezium as the profile definition used by the swept surface geometry or the swept area solid. It is given by its Top X and Bottom X extent and its Y extent as well as by the offset of the Top X extend, and placed within the 2D position coordinate system, established by the <i>Position</i> attribute. It is placed centric within the position coordinate system, that is, in the center of the bounding box. </p>



<p>

<table><tr><td>
<table frame="border" width="100%">
  <tbody>
    <tr>
      <td width="420"><img
 src="../../../figures/IfcTrapeziumProfileDef-Layout1.gif"
 alt="trapezium profile" border="0" height="300"
 width="400"></td>
      <td align="left" valign="top"
 width="100%"><u>Position</u>
      <br>
The parameterized profile defines its own position coordinate system.
The underlying
coordinate system is defined by the swept surface or swept area solid
that uses the profile definition. It is the xy plane of either:
      <ul>
        <li style="font-style: italic;">IfcSweptSurface.Position</li>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
or in case of sectioned spines the xy plane of each list member of <span
 style="font-style: italic;">IfcSectionedSpine.CrossSectionPositions.</span>
      <br>
      <br>
By using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile. Explicit coordinate offsets are used to define
cardinal points (e.g. upper-left bound).
      <p><u>Parameter</u>
      <br>
The <span class="self-ref">IfcTrapeziumProfileDef</span>
is defined within the position
coordinate system, where the <i>BottomDim</i>
defines the length
measure for the bottom line (half along the positive x-axis) and the <i>YDim</i>
defines the length measure for the parallel distance of bottom and top
line (half along the positive y-axis). The top line starts with a
distance of <i>TopXOffset</i>
from [-BottomLine/2,YDim] (which can be
negative, zero, or positive) and has a length of <i>TopXDim</i>
along
the positive x-axis.</p>
      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcTShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcTShapeProfileDef</span> defines
a section profile that provides the defining parameters of a T-shaped
section to be used by the swept area solid. Its parameters and
orientation relative to the position coordinate system are according to
the following illustration. The centre of the position coordinate
system is in the profile's centre of the bounding box.</p>







<p>

<table><tr><td>
<table border="1" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
    <tr>
      <td width="420">
<img
 src="../../../figures/IfcTShapeProfileDef.gif" alt="T-shape profile"
 border="0" height="300" width="400">

      </td>
      <td valign="top">

<p><u>Position</u> <br>
The parameterized profile defines its own position coordinate system.
The underlying
coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li><small>IfcSweptAreaSolid.Position</small></li>
      </ul>
<p>by using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile.</p>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcUShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcUShapeProfileDef</span> defines
a section profile that provides the defining parameters of a U-shape
(channel) section to be used by the swept area solid. Its parameters
and orientation relative to the position coordinate system are
according to the following illustration. The centre of the position
coordinate system is in the profile's centre of the bounding box.</p>







<p>

<table><tr><td>
<table border="1" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
    <tr>
      <td valign="top" width="420">

<img
 src="../../../figures/IfcUShapeProfileDef.gif" alt="U-shape profile"
 border="0" height="300" width="400">

      </td>
      <td valign="top">

<p><u>Position</u> <br>
The parameterized profile defines its own position coordinate system.
The underlying coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li><i>IfcSweptAreaSolid.Position</i></li>
      </ul>
<p>By using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile.</p>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcZShapeProfileDef</h1>
                                
                                <p><span class="self-ref">IfcZShapeProfileDef</span> defines
a section profile that provides the defining parameters of a Z-shape
section to be used by the swept area solid. Its parameters and
orientation relative to the position coordinate system are according to
the following illustration. The centre of the position coordinate
system is in the profile's centre of the bounding box.</p>





<p>

<table><tr><td>
<table border="1" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
    <tr>
      <td width="420">
<img
 src="../../../figures/IfcZShapeProfileDef.gif" alt="Z-shape profile"
 border="0" height="300" width="400">

      </td>
      <td valign="top">

<p><u>Position</u><br>
The parameterized profile defines its own position coordinate system.
The underlying coordinate system is defined by the swept area solid
that uses the profile definition. It is the xy plane of:</p>
      <ul>
        <li style="font-style: italic;">IfcSweptAreaSolid.Position</li>
      </ul>
<p>By using offsets of the position location, the parameterized profile
can be positioned centric (using x,y offsets = 0.), or at any position
relative to the profile.</p>

      </td>
    </tr>
  </tbody>
</table>
</td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcComplexProperty</h1>
                                
                                <p><span class="self-ref">IfcComplexProperty</span> is used to define complex properties to be handled completely within a property set. The included set of properties may be a mixed or consistent collection of <strong>IfcProperty</strong> subtypes. This enables the definition of a set of properties to be included as a single 'property' entry in an <strong>IfcPropertySet</strong>. The definition of such an <span class="self-ref">IfcComplexProperty</span> can be reused in many different <strong>IfcPropertySet</strong>'s.</p>

<blockquote class="note">
NOTE&nbsp; Since an <span class="self-ref">IfcComplexProperty</span> may contain other complex properties, sets of properties can be nested. This nesting may be restricted by view definitions and implementer agreements.
</blockquote>



<h1>IfcCurveInterpolationEnum</h1>
                                
                                <h1>IfcExtendedProperties</h1>
                                
                                <p>
      The <span class="self-ref">IfcExtendedProperties</span> is an abstract supertype
      of all extensible property collections that are applicable to
      certain characterized entities. Instantiable subtypes of
      <span class="self-ref">IfcExtendedProperties</span> assign the property
      collection to a particular characterized entity.
    </p>
    <blockquote class="note">
      NOTE&nbsp; Extensible property collections are provided for
      materials and profiles.
    </blockquote>
    <p>
      Instantiable subtypes have a set of <i>Properties</i>, each
      providing property name, value and unit and other instance
      information, depending on the subtype of IfcProperty
      referenced.
    </p>
    
<h1>IfcObjectReferenceSelect</h1>
                                
                                <h1>IfcPreDefinedProperties</h1>
                                
                                <p>
      The <span class="self-ref">IfcPreDefinedProperties</span> is an abstract supertype
      of all predefined property collections that have explicit
      attributes, each representing a property. Instantiable
      subtypes are assigned to specific characterised entities.
    </p>
    

<h1>IfcProperty</h1>
                                
                                <p><span class="self-ref">IfcProperty</span> is an abstract generalization for all types of properties that can be associated with IFC objects through the property set mechanism.</p> 

 

<h1>IfcPropertyAbstraction</h1>
                                
                                <p>
      The <span class="self-ref">IfcPropertyAbstraction</span> is an abstract supertype
      of all property related entities defined as dependent
      resource entities within the specification. It may have an
      external reference to a dictionary or library that provides
      additional information about its definition. Instantiable
      subtypes have property name, value and other instance
      information.
    </p>
    
<h1>IfcPropertyBoundedValue</h1>
                                
                                <p>
      A property with a bounded value, <span class="self-ref">IfcPropertyBoundedValue</span>, defines a property
      object which has a maximum of two (numeric or descriptive) values assigned, the first value specifying the upper bound
      and the second value specifying the lower bound. It defines a property - value bound (min-max) combination for which
      the property <i>Name</i>, an optional <i>Description</i>,Â the optional <i>UpperBoundValue</i>
      with measure type, the optional <i>LowerBoundValue</i> with measure type, and the optional <i>Unit</i> is given.
      A set point value can be provided in addition to the upper and lower bound values for operational value setting.
    </p>
    <p>
      The unit is handled by the <i>Unit</i> attribute, see Table 687 for an example of a bounded property:
    </p>
    <ul>
      <li>If the <i>Unit</i> attribute is not given, then the unit is already implied by the type of
      <strong>IfcMeasureValue</strong> or <strong>IfcDerivedMeasureValue</strong>. The associated unit can be found at the
      <strong>IfcUnitAssignment</strong> globally defined at the project level (<i>IfcProject.UnitsInContext</i>).
      </li>
      <li>If the <i>Unit</i> attribute is given, then the unit assigned by the <i>Unit</i> attribute overrides the
      globally assigned unit.
      </li>
    </ul>
    <p>
      The <span class="self-ref">IfcPropertyBoundedValue</span> allows for the specification of an interval for the value component of the
      property description. If either the <i>LowerBoundValue</i> or the <i>UpperBoundValue</i> is not
      given, then it indicates an open bound (either a minimum value or a maximum value). The interval is by definition
      inclusive, that is, the value given for the <i>LowerBoundValue</i> or the <i>UpperBoundValue</i> is
      included in the interval.
    </p>
    <blockquote class="note">
      NOTE&nbsp; An <span class="self-ref">IfcPropertyBoundedValue</span> may be exchanged with no values assigned yet. In this case the
      <i>LowerBoundValue</i> and the <i>UpperBoundValue</i> are set to NIL.
    </blockquote>
<blockquote>
<p>&nbsp;</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr valign="top">
     <th width="15%">Name</th>
     <th width="15%">UpperBoundValue</th>
     <th width="15%">LowerBoundValue</th>
     <th width="15%">SetPointValue</th>
     <th width="45%">Type<br></b> <span style="font-size:smaller">(through <strong>IfcValue</strong>)</span></th>
     <th width="10%">Unit<br></th>
    </tr>
    <tr valign="top">
     <td>OverallHeight</td>
     <td>1930</td>
     <td>2300</td>
     <td>&lt;nil&gt;</td>
     <td><strong>IfcPositiveLengthMeasure</strong></td>
     <td>-</td>
    </tr>
    <tr valign="top">
     <td>OverallWidth</td>
     <td>0.9</td>
     <td>1.25</td>
     <td>&lt;nil&gt;</td>
     <td><strong>IfcPositiveLengthMeasure</strong></td>
     <td>m</td>
    </tr>
    <tr valign="top">
     <td>MaxHeight</td>
     <td>20.0</td>
     <td>&lt;nil&gt;</td>
     <td>&lt;nil&gt;</td>
     <td><strong>IfcPositiveLengthMeasure</strong></td>
     <td>-</td>
    </tr>
    <tr valign="top">
     <td>MinWeight</td>
     <td>&lt;nil&gt;</td>
     <td>20</td>
     <td>&lt;nil&gt;</td>
     <td><strong>IfcMassMeasure</strong></td>
     <td>kg</td>
    </tr>
    <tr>
     <td colspan="6" align="right">* Where rules ensures same measure type for all values</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 687 &mdash; Bounded property with values, measure types and units</td>
 </tr>
</table>
</blockquote>








    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>If the measure type for the upper and lover bound value
      is a numeric measure, then the following shall be true: <i>
        UpperBoundValue</i> &gt; <i>LowerBoundValue</i>.
      </li>
    </ol>

<h1>IfcPropertyDependencyRelationship</h1>
                                
                                <p>An <span class="self-ref">IfcPropertyDependencyRelationship</span> describes an identified dependency between the value of one property and that of another.</p>





<p class="use-head">Use Definition</p>
<p>Whilst the <span class="self-ref">IfcPropertyDependencyRelationship</span> may be used to describe the dependency, and it may do so in terms of the expression of how the dependency operates, it is not possible through the current IFC model for the value of the related property to be actually derived from the value of the relating property. The determination of value according to the dependency is required to be performed by an application that can then use the Expression attribute to flag the form of the dependency.</p>

<h1>IfcPropertyEnumeratedValue</h1>
                                
                                <p>A property with an enumerated value, <span class="self-ref">IfcPropertyEnumeratedValue</span>, defines a property
object which has a value assigned that is chosen from an enumeration. It defines a property - value combination for which
theÂ property <i>Name</i>, an optional <i>Description</i>,Â the optional <i>EnumerationValues</i>
with measure type and optionally an <i>Unit</i> is given.</p>

<blockquote class="note">
NOTE&nbsp; Multiple choices from the property enumeration are supported.
</blockquote>

<p>The unit is handled by the <i>Unit</i> attribute, see Table 688 for an example of a enumerated property:</p>
<ul>
<li>If the <i>Unit</i> attribute is not given, then the unit is already implied by the type of <strong>IfcMeasureValue</strong> or
<strong>IfcDerivedMeasureValue</strong>. The associated unit can be found at the <strong>IfcUnitAssignment</strong> globally defined at the project
level (<i>IfcProject.UnitsInContext</i>).</li>
<li>If the <i>Unit</i> attribute is given, then the unit assigned by the unit attribute overrides the globally assigned unit.</li>
</ul>
<p>More precisely: The <span class="self-ref">IfcPropertyEnumeratedValue</span> defines a property, which value is selected from a defined list of
enumerators. The enumerators are stored in a dynamic enumeration of values including the type information from <strong>IfcValue</strong>
(see <strong>IfcPropertyEnumeration</strong>). This enables applications to use an enumeration value as a property within a property set
(<strong>IfcPropertySet</strong>) including the allowed list of values.Â </p>

<blockquote class="note">
NOTE&nbsp; An <span class="self-ref">IfcPropertyEnumeratedValue</span> may be exchanged with no values assigned yet. In this case the <i>EnumerationValues</i> are set to NIL.
</blockquote>

<p>&nbsp;</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr valign="top">
     <th width="15%">Name</th>
     <th width="30%">Value<br> <span style="font-size:smaller">(EnumerationValue)</span></th>
     <th width="25%">Type<br> <span style="font-size:smaller">(through&nbsp;IfcValue)</span></th>
     <th width="30%">IfcPropertyEnumeration<br> <span style="font-size:smaller">(Name)</span></th>
    </tr>
    <tr>
     <td>BladeAction</td>
     <td>Opposed</td>
     <td><i>IfcString</i></td>
     <td>DamperBladeActionEnum</td>
    </tr>
    <tr>
     <td>BladeAction</td>
     <td>Parallel</td>
     <td><i>IfcString</i></td>
     <td>DamperBladeActionEnum</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 688 &mdash; Enumerated property with values, measure types and units</td>
 </tr>
</table>
<p>&nbsp;</p>

<p>The <span class="self-ref">IfcPropertyEnumeratedValue</span> refers to an <strong>IfcPropertyEnumeration</strong>, see Table 689 for an example:</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr valign="top">
     <th width="30%"><b>Name</b></th>
     <th width="30%"><b>EnumerationValues</b></th>
     <th width="25%"><b>Type<br></b> <span style="font-size:smaller">(through IfcValue)</span></th>
     <th width="15%"><b>Unit</b></th>
    </tr>
    <tr valign="top">
     <td>DamperBladeActionEnum</td>
     <td>(Parallel, Opposed, Other, Unset)</td>
     <td><i>IfcString</i></td>
     <td>-</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 689 &mdash; Property enumeration with enumerators</td>
 </tr>
</table>
</blockquote>

<p>It is not mandatory to use an instance of <strong>IfcPropertyEnumeration</strong> to hold the applicable values for
<span class="self-ref">IfcPropertyEnumeratedValue</span>, however this is the preferred way. A single instance of <strong>IfcPropertyEnumeration</strong> can be
referenced by multiple instances of <span class="self-ref">IfcPropertyEnumeratedValue</span>.</p>





<h1>IfcPropertyEnumeration</h1>
                                
                                <p><span class="self-ref">IfcPropertyEnumeration</span> is a collection of simple or measure values that define a prescribed set of alternatives from
which 'enumeration values' are selected. This enables inclusion of enumeration values in property sets. <span class="self-ref">IfcPropertyEnumeration</span>
provides a name for the enumeration as well as a list of unique (numeric or descriptive) values (that may have a measure type
assigned). The entity defines the list of potential enumerators to be exchanged together (or separately) with properties of type 
<strong>IfcPropertyEnumeratedValue</strong> that selects their actual property values from this enumeration. </p>

<p>The unit is handled by the <i>Unit</i> attribute, see Table 690 for an example of a unitless property enumeration:</p>
<ul>
  <li>If the <i>Unit</i> attribute is not given, than the unit is already implied by the type of <strong>IfcMeasureValue</strong>
or <strong>IfcDerivedMeasureValue</strong>. The associated unit can be found at the <strong>IfcUnitAssignment</strong> globally defined
at the project level (<i>IfcProject.UnitsInContext</i>).</li>
  <li> If the <i>Unit</i> attribute is given, the unit assigned by the unit attribute overrides the globally assigned unit.</li>
</ul>
<p>&nbsp;</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr>
      <th width="30%"><b>Name</b></th>
      <th width="30%"><b>EnumerationValues</b></th>
      <th width="25%"><b>Type</b> <span style="font-size:smaller">(through <strong>IfcValue</strong>)</span></th>
      <th width="15%"><b>Unit</b></th>
    </tr>
    <tr>
      <td>PEnum_DamperBladeAction</td>
      <td>Parallel</td>
      <td><strong>IfcLabel</strong></td>
      <td>-</td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>Opposed</td>
      <td><strong>IfcLabel</strong></td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>Other</td>
      <td><strong>IfcLabel</strong></td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>Unset</td>
      <td><strong>IfcLabel</strong></td>
      <td>&nbsp;</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 690 &mdash; Property enumeration with values, measure types and units</td>
 </tr>
</table>


<h1>IfcPropertyListValue</h1>
                                
                                <p>
      An <span class="self-ref">IfcPropertyListValue</span> defines a property that has several (numeric or
      descriptive) values assigned, these values are given by an ordered list.Â It defines a property - list value
      combination for which the property <i>Name</i>, an optional <i>Description</i>,Â the optional <i>ListValues</i> with measure
      type and optionally an <i>Unit</i> is given.
      An <span class="self-ref">IfcPropertyListValue</span> is a list of values. The order in which values appear is significant. 
      All list members shall be of the same type.
    </p>
    <p>
      The unit is handled by the <i>Unit</i> attribute, see Table 691 for an example of a list property:
    </p>
    <ul>
      <li>If the <i>Unit</i> attribute is not given, then the unit is already implied by the type of
      <strong>IfcMeasureValue</strong> or <strong>IfcDerivedMeasureValue</strong>. The associated unit can be found at the
      <strong>IfcUnitAssignment</strong> globally defined at the project level (<i>IfcProject.UnitsInContext</i>).
      </li>
      <li>If the <i>Unit</i> attribute is given, then the unit assigned by the <i>Unit</i> attribute overrides the
      globally assigned unit.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; An <span class="self-ref">IfcPropertyListValue</span> may be exchanged with no values assigned yet. In this case the
      <i>ListValues</i> are set to NIL.
    </blockquote>
<p>&nbsp;</p>
<blockquote>    
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr valign="top">
     <th width="15%">Name</td>
     <th width="30%">ListValues</td>
     <th width="25%">Type<br><span style="font-size:smaller">(through <strong>IfcValue</strong>)</span></td>
     <th width="30%">Unit</td>
    </tr>
    <tr>
     <td width="15%">ApplicableSizes</td>
     <td width="30%">1200</td>
     <td width="25%"><strong>IfcPositiveLengthMeasure</strong></td>
     <td width="30%">-</td>
    </tr>
    <tr>
     <td width="15%">-</td>
     <td width="30%">1600</td>
     <td width="25%"><strong>IfcPositiveLengthMeasure</strong></td>
     <td width="30%">-</td>
    </tr>
    <tr>
     <td width="15%">-</td>
     <td width="30%">2400</td>
     <td width="25%"><strong>IfcPositiveLengthMeasure</strong></td>
     <td width="30%">-</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 691 &mdash; List property with values, measure types and units</td>
 </tr>
</table>
</blockquote>





<h1>IfcPropertyReferenceValue</h1>
                                
                                <p>
      The
      <span class="self-ref">IfcPropertyReferenceValue</span> allows a property value to
      be of type of an resource level entity. The applicable
      entities that can be used as value references are given by the
      <strong>IfcObjectReferenceSelect</strong>.
    </p>
    
    
<h1>IfcPropertySingleValue</h1>
                                
                                <p>The property with a single value <span class="self-ref">IfcPropertySingleValue</span> defines a property object which has
a single (numeric or descriptive) value assigned. It defines a property - single value combination for which the property
<i>Name</i>, an optional <i>Description</i>,Â and an optional <i>NominalValue</i> with measure type is provided. In addition,
the default unit as specified within the project unit context can be overriden by assigning an <i>Unit</i>.</p>

<p>The unit is handled by the <i>Unit</i> attribute, see Table 692 for an example of various single value properties:</p>
<ul>
 <li>If the <i>Unit</i> attribute is not given, then the unit is already implied by the type of <strong>IfcMeasureValue</strong> or
<strong>IfcDerivedMeasureValue</strong>. The associated unit can be found at the <strong>IfcUnitAssignment</strong> globally defined at the project
level (<i>IfcProject.UnitsInContext</i>).</li>
 <li>If the <i>Unit</i> attribute is given, then the unit assigned by the <i>Unit</i> attribute overrides the globally assigned unit.</li>
</ul>
<p>&nbsp;</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr>
      <th width="30%"><b>Name</b></th>
      <th width="30%"><b>NominalValue</b></th>
      <th width="25%"><b>Type</b> <span style="font-size:smaller">(through <strong>IfcValue</strong>)</span></th>
      <th width="15%"><b>Unit</b></th>
    </tr>
    <tr>
      <td>Description</td>
      <td>Manufacturer "A" door</td>
      <td><strong>IfcLabel</strong></td>
      <td>-</td>
    </tr>
    <tr>
      <td>PanelThickness</td>
      <td>0.12</td>
      <td><strong>IfcPositiveLengthMeasure</strong></td>
      <td>-</td>
    </tr>
    <tr>
      <td>ThermalTransmittance</td>
      <td>2.6</td>
      <td><strong>IfcThermalTransmittanceMeasure</strong></td>
      <td>W/(m<sup>2</sup>K)</td>
    </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 692 &mdash; Single value properties with values, measure types and units</td>
 </tr>
</table>





<h1>IfcPropertyTableValue</h1>
                                
                                <p>
      <span class="self-ref">IfcPropertyTableValue</span> is a property with a value range
      defined by a property object which has two lists of (numeric
      or descriptive) values assigned. The values specify a table
      with two columns. The defining values provide the first
      column and establish the scope for the defined values (the
      second column). An optional <i>Expression</i> attribute may
      give the equation used for deriving the range value, which is
      for information purposes only.
    </p>
    <p>
      The <span class="self-ref">IfcPropertyTableValue</span> defines a defining/defined
      property value combination for which the property name, the
      table with defining and defined values with measure type (and
      optional the units for defining and defined values) are
      given.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The <span class="self-ref">IfcPropertyTableValue</span> only captures properties
      that can be expressed by a table with two columns. Use
      IfcPropertyReferenceValue with the PropertyReference being an
      IfcTable to express all those properties that require a table
      with tree or more columns.
    </blockquote>
    <p>
      The units are handled by the <i>DefiningUnit</i> and
      <i>DefinedUnit</i> attributes, see Table 693 for an example of a table value property:
    </p>
    <ul>
      <li>If the <i>DefiningUnit</i> or <i>DefinedUnit</i>
      attribute is not given, then the unit is already implied by
      the type of <strong>IfcMeasureValue</strong> or
      <strong>IfcDerivedMeasureValue</strong>. The associated unit can be
      found at the <strong>IfcUnitAssignment</strong> globally defined at the
      project level (<i>IfcProject.UnitsInContext</i>).
      </li>
      <li>If the <i>DefiningUnit</i> or <i>DefinedUnit</i>
      attribute is given, then the unit assigned by the unit
      attribute overrides the globally assigned unit.
      </li>
    </ul>
    <p>
      The <span class="self-ref">IfcPropertyTableValue</span> allows for the specification
      of a table of defining/defined value pairs of the property
      description. The optional attribute <i>CurveInterpolation</i>
      allows to determine the interval between two given values.
    </p>
<p>&nbsp;</p>
<table>
 <tr>
  <td>
   <table class="gridtable">
    <tr valign="top">
     <th align="left" valign="top" width="20%">Name</th>
     <th align="left" valign="top" width="10%">DefiningValues</th>
     <th align="left" valign="top" width="20%">DefiningValue Type<br> <span style="font-size:smaller">(through IfcValue)</span></th>
     <th align="left" valign="top" width="10%">DefinedValues</th>
     <th align="left" valign="top" width="20%">DefinedValue Type<br> <span style="font-size:smaller">(through IfcValue)</span></th>
     <th align="left" valign="top" width="10%">DefingUnit</b></th>
     <th align="left" valign="top" width="10%">DefinedUnit</th>
    </tr>
    <tr valign="top">
     <td>SoundTransmissionLoss</td>
     <td>100</td>
     <td><strong>IfcFrequencyMeasure</strong></td>
     <td>20</td>
     <td><strong>IfcNumericMeasure</strong></td>
     <td>-</td>
     <td>dB</td>
    </tr>
    <tr valign="top">
     <td>&nbsp;
          </td>
     <td>200
          </td>
     <td><strong>IfcFrequencyMeasure</strong>
          </td>
     <td>42
          </td>
     <td><strong>IfcNumericMeasure</strong>
          </td>
     <td>&nbsp;
          </td>
     <td>&nbsp;
          </td>
        </tr>
        <tr valign="top">
     <td>&nbsp;
          </td>
     <td>400
          </td>
     <td><strong>IfcFrequencyMeasure</strong>
          </td>
     <td>46
          </td>
     <td><strong>IfcNumericMeasure</strong>
          </td>
     <td>&nbsp;
          </td>
     <td>&nbsp;
          </td>
        </tr>
        <tr valign="top">
     <td>&nbsp;
          </td>
     <td>800
          </td>
     <td><strong>IfcFrequencyMeasure</strong>
          </td>
     <td>56
          </td>
     <td><strong>IfcNumericMeasure</strong>
          </td>
     <td>&nbsp;
          </td>
     <td>&nbsp;
          </td>
        </tr>
        <tr valign="top">
     <td>&nbsp;
          </td>
     <td>1600
          </td>
     <td><strong>IfcFrequencyMeasure</strong>
          </td>
     <td>60
          </td>
     <td><strong>IfcNumericMeasure</strong>
          </td>
     <td>&nbsp;
          </td>
     <td>&nbsp;
          </td>
        </tr>
        <tr valign="top">
     <td>&nbsp;
          </td>
     <td>3200
          </td>
     <td><strong>IfcFrequencyMeasure</strong>
          </td>
     <td>65
          </td>
     <td><strong>IfcNumericMeasure</strong>
          </td>
     <td>&nbsp;
          </td>
     <td>&nbsp;
          </td>
        </tr>
   </table>
  </td>
 </tr>
 <tr>
  <td><p class="table">Table 693 &mdash; Table value property with values, measure types and units</td>
 </tr>
</table>


    
    
    <p>
      &nbsp;
    </p>
    <p class="spec-head">Informal Propositions:</p>
    <ol>
      <li>The list of <i>DefinedValues</i> and the list of
      <i>DefiningValues</i> are corresponding lists.
      </li>
    </ol>
<h1>IfcSimpleProperty</h1>
                                
                                <p><span class="self-ref">IfcSimpleProperty</span> is a generalization of a single property object. The various subtypes of <span class="self-ref">IfcSimpleProperty</span> establish different ways in which a property value can be set.</p> 



<h1>IfcUniquePropertyName</h1>
                                
                                <h1>IfcPhysicalComplexQuantity</h1>
                                
                                <p>The complex physical quantity, <span class="self-ref">IfcPhysicalComplexQuantity</span>, is an entity that holds a set of single quantity measure value (as defined at the subtypes of <strong>IfcPhysicalSimpleQuantity</strong>), that all apply to a given component or aspect of the element.</p> 

<blockquote class="example">
EXAMPLE: A layered element, like a wall, may have several material layers, each having individual quantities, like footprint area, side area and volume. An instance of <span class="self-ref">IfcPhysicalComplexQuantity</span> would group these individual quantities (given by a subtype of <strong>IfcPhysicalSimpleQuantity</strong>) and name them according to the material layer name by using the <i>Name</i> attribute. The <i>Discrimination</i> attribute would then be 'layer'.
</blockquote>

<p>A section "Quantity Use Definition" at individual entities as subtypes of <strong>IfcBuildingElement</strong> gives guidance to the usage of the <i>Name</i> and <i>Discrimination</i> attribute to characterize the complex quantities.</p>





<h1>IfcPhysicalQuantity</h1>
                                
                                <p>The physical quantity, <span class="self-ref">IfcPhysicalQuantity</span>, is an abstract entity that holds a complex or simple quantity measure together with a semantic definition of the usage for the single or several measure value.</p> 

<p>The <i>Name</i> attribute defines the actual usage or kind of measure. The interpretation of the name label has to be established within the actual exchange context. In addition an informative text may be associated to each quantity by the <i>Description</i> attribute.</p> 



<h1>IfcPhysicalSimpleQuantity</h1>
                                
                                <p>The physical quantity, <span class="self-ref">IfcPhysicalSimpleQuantity</span>, is an entity that holds a single quantity measure value (as defined at the subtypes of <span class="self-ref">IfcPhysicalSimpleQuantity</span>) together with a semantic definition of the usage for the measure value.</p> 

<blockquote class="example">
EXAMPLE&nbsp; An element, like a wall, may have several area measures, like footprint area, left wall face area, right wall face area. These areas would be given by three instances of the area quantity subtype, with different <i>Name</i> string values.
</blockquote>

<p>A section "Quantity Use Definition" at individual entities as subtypes of <strong>IfcBuildingElement</strong> gives guidance to the usage of the <i>Name</i> attribute to characterize the individual quantities. If the <i>Unit</i> attribute is given, the value attribute (introduced at the level of subtypes of <span class="self-ref">IfcPhysicalSimpleQuantity</span>) are given as quantities of this unit, otherwise the global unit definitions (given by <strong>IfcUnitAssignment</strong>) are used.</p>





<h1>IfcQuantityArea</h1>
                                
                                <p><span class="self-ref">IfcQuantityArea</span> is a physical quantity that defines a derived area measure to provide an element's physical property. It is normally derived from the physical properties of the element under the specific measure rules given by a method of measurement.</p> 

<blockquote class="example">
EXAMPLE&nbsp; An opening may have an opening area used to deduct it from the wall surface area. The actual size of the area depends on the method of measurement used.
</blockquote> 


 
<h1>IfcQuantityCount</h1>
                                
                                <p><span class="self-ref">IfcQuantityCount</span> is a physical quantity that defines a derived count measure to provide an element's physical property. It is normally derived from the physical properties of the element under the specific measure rules given by a method of measurement.</p>

<blockquote class="example">
EXAMPLE&nbsp; An radiator may be measured according to its number of coils. The actual counting method depends on the method of measurement used.
</blockquote> 



<h1>IfcQuantityLength</h1>
                                
                                <p><span class="self-ref">IfcQuantityLength</span> is a physical quantity that defines a derived length measure to provide an element's physical property. It is normally derived from the physical properties of the element under the specific measure rules given by a method of measurement.</p>

<blockquote class="example">
EXAMPLE&nbsp; A rafter within a roof construction may be measured according to its length (taking a common cross section into account). The actual size of the length depends on the method of measurement used.
</blockquote> 

 

<h1>IfcQuantityTime</h1>
                                
                                <p><span class="self-ref">IfcQuantityTime</span> is an element quantity that defines a time measure to provide a property of time related to an element. It is normally given by the recipe information of the element under the specific measure rules given by a method of measurement.</p>

<blockquote class="example">
EXAMPLE&nbsp; The amount of time needed to pour concrete for a wall is given as a time quantity for the labor part of the recipe information.
</blockquote> 



<h1>IfcQuantityVolume</h1>
                                
                                <p><span class="self-ref">IfcQuantityVolume</span> is a physical quantity that defines a derived volume measure to provide an element's physical property. It is normally derived from the physical properties of the element under the specific measure rules given by a method of measurement.</p> 

<blockquote class="example">
EXAMPLE&nbsp; A thick brick wall may be measured according to its volume. The actual size of the volume depends on the method of measurement used.
</blockquote> 



<h1>IfcQuantityWeight</h1>
                                
                                <p><span class="self-ref">IfcQuantityWeight</span> is a physical element quantity that defines a derived weight measure to provide an element's physical property. It is normally derived from the physical properties of the element under the specific measure rules given by a method of measurement.</p> 

<blockquote class="example">
EXAMPLE&nbsp; The amount of reinforcement used within a building element may be measured according to its weight. The actual size of the weight depends on the method of measurement used.
</blockquote> 



<h1>IfcUniqueQuantityNames</h1>
                                
                                <h1>IfcConvertDirectionInto2D</h1>
                                
                                <h1>IfcCoordinateOperation</h1>
                                
                                <p>
      The coordinate operation is an
      abstract supertype to handle any operation (transformation
      or conversion) between two coordinate reference systems. It
      is meant to provide expandability for future versions,
      since currently only the conversion of a local engineering
      coordinate system into a map coordinate reference system is
      dealt with by the subtype <strong>IfcMapConversion</strong>.
    </p>
    <p>
      By convention, a coordinate operation is given between the
      <i>SourceCRS</i> being the more local, or child coordinate
      reference system, and the <i>TargetCRS</i> being the more
      remote or parent coordinate reference system, in
      theÂ special case the coordinate operation between the local
      engineering coordinate system of the construction project
      and any map or other coordinate reference system.
    </p>
    <blockquote class="extDef">
		<p style="font-size:inherit;" >
      NOTE&nbsp; Definition from OpenGIS Abstract Specification,
      Topic 2:<br> If the relationship between any two coordinate
      reference systems is known, coordinates can be transformed
      or converted to another coordinate reference system.
      Coordinate operations are divided into two subtypes:
    </p>
    <ul style="font-size:inherit;" >
      <li style="font-size:inherit;" >
        <i>Coordinate conversion</i> &ndash; mathematical
        operation on coordinates that does not include any change
        of datum. The best-known example of a coordinate
        conversion is a map projection. The parameters describing
        coordinate conversions are defined rather than
        empirically derived. Note that some conversions have no
        parameters.
      </li>
      <li style="font-size:inherit;" >
        <i>Coordinate transformation</i> &ndash; mathematical
        operation on coordinates that usually includes a change
        of datum. The parameters of a coordinate transformation
        are empirically derived from data containing the
        coordinates of a series of points in both coordinate
        reference systems. This computational process is usually
        &lsquo;over-determined&rsquo;, allowing derivation of
        error (or accuracy) estimates for the transformation.
        Also, the stochastic nature of the parameters may result
        in multiple (different) versions of the same coordinate
        transformation. Because of this several transformations
        may exist for a given pair of coordinate reference
        systems, differing in their transformation method,
        parameter values and accuracy characteristics.
      </li>
    </ul>
		</blockquote>
    
<h1>IfcCoordinateReferenceSystem</h1>
                                
                                <p>
      The <span class="self-ref">IfcCoordinateReferenceSystem</span> is a definition of a
      coordinate reference system by means of qualified identifiers
      only. The interpretation of the identifier is expected to be
      well-known to the receiving software.
    </p>
    <blockquote class="extDef">NOTE&nbsp; 
      Definition from OpenGIS Abstract Specification, Topic 2:<br>
      A coordinate reference system is a coordinate system which
      is related to the real world by a datum. The coordinate
      system is composed of a set of coordinate axes with specified
      units of measure. The datum specifies the relationship of a
      coordinate system to the earth. The resulting combination of
      coordinate system and datum is a coordinate reference system.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; One widely-used, publicly-available authority is
      the European Petroleum Survey Group (EPSG), and use of this
      authority is currently specified in several OGC
      Implementation Specifications. Software used to transport IFC
      engineering models into GIS applications (and vice versa) is
      expected to have knowledge about the OGC Implementation
      Specifications.
    </blockquote>
    

<h1>IfcCoordinateReferenceSystemSelect</h1>
                                
                                <h1>IfcGeometricProjectionEnum</h1>
                                
                                <h1>IfcGeometricRepresentationContext</h1>
                                
                                <p>
 The <span class="self-ref">IfcGeometricRepresentationContext</span> defines the context that applies to several shape representations of
 products within a project. It defines the type of the context in which the shape representation is defined, and the numeric
 precision applicable to the geometric representation items defined in this context. In addition it can be used to offset
 the project coordinate system from a global point of origin, using the <i>WorldCoordinateSystem</i> attribute. The main
 representation context may also provide the true north direction, see 
</p>
<blockquote class="extDef">
 NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
 A geometric representation context is a representation context in which the geometric representation items are
 geometrically founded.
</blockquote>
<table border="0" summary="true north">
 <tr>
  <td width="505" valign="top">
   <img src="../../../figures/IfcGeometricRepresentationContext_TrueNorth.png" alt="TrueNorth" border="0">
  </td>
  <td valign="top">
   <p class="small">
    The <i>TrueNorth</i> attribute should be provided, if the y axis of the <i>WorldCoordinateSystem</i> does
    not point to the global northing. Direction of the true north, or geographic northing direction, relative to the
    underlying project coordinate system as established by the attribute <i>WorldCoordinateSystem</i>. It is given
    by a 2 dimensional direction within the xy-plane of the project coordinate system. If not resent, it defaults to
    [0.,1.] - i.e. the positive Y axis of the project coordinate system equals the geographic northing
    direction. The direction is provided within project coordinate system and identifies the true north direction.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2"><p class="figure">
  </td>
 </tr>   
</table>
<blockquote class="note">
  NOTE&nbsp; The inherited attribute <i>ContextType</i> shall have one of the following
  recognized values: 'Model', 'Plan'</font>, 'NotDefined'.
</blockquote>
<p>
 The use of one instance of <span class="self-ref">IfcGeometricRepresentationContext</span> to represent the
 model (3D) view is mandatory, the use of a second instance of <span class="self-ref">IfcGeometricRepresentationContext</span> to represent the
 plan (2D) view is optional (but needs to be given, if there are scale dependent plan views), the additional scale or view
 dependent contexts need to be handled by using the subtype <strong>IfcGeometricRepresentationSubContext</strong> pointing to the
 model view (or the plan view) as the <i>ParentContext</i>. See 
 contexts for 3D and 2D with assigned sub contexts.
</p>
<p>&nbsp;</p>
<table summary="figure" border="0">
 <tr>
  <td valign="top">
    <img src="../../../figures/IfcGeometricRepresentationContext.png" alt="representation context" border>
  </td>
  <td valign="top">
   <p class="small">Use of representation contexts defined at <strong>IfcProject</strong> for 3D model and 2D plan context,
   including sub context definitions for different target scales.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2"><p class="figure">
  </td>
 </tr>    
</table>
<blockquote class="note">
      NOTE&nbsp; Entity adapted from 
      <strong>geometric_representation_context</strong> defined in ISO 10303-42.
</blockquote>


<h1>IfcGeometricRepresentationSubContext</h1>
                                
                                <p><span class="self-ref">IfcGeometricRepresentationSubContext</span> defines the context that applies to several shape representations of a product being a sub context, sharing the <i>WorldCoordinateSystem</i>, <i>CoordinateSpaceDimension</i>, <i>Precision</i> and <i>TrueNorth</i> attributes with the parent <strong>IfcGeometricRepresentationContext</strong>.</p>

<p>The <span class="self-ref">IfcGeometricRepresentationSubContext</span> is used to define semantically distinguished representation types for different information content, dependent on the representation view and the target scale. It can be used to control the level of detail of the shape representation that is most applicable to this geometric representation context. In addition the sub context is used to control the later appearance of the <strong>IfcShapeRepresentation</strong> within a plot view.</p>

<blockquote class="note">
NOTE&nbsp; If the <strong>IfcShapeRepresentation</strong> using this sub context has<i> IfcStyledItem</i>'s assigned to the <i>Items</i>, the presentation style information (e.g. <strong>IfcCurveStyle</strong>, <strong>IfcTextStyle</strong>) associated with the <strong>IfcStyledItem</strong> is given in target plot dimensions. For example, a line thickness (<i>IfcCurveStyle.CurveWidth</i>) is given by a thickness measure relating to the thickness for a plot within the (range of) target scale.
</blockquote>

<p>Each <strong>IfcProduct</strong> can then have several instances of subtypes of <strong>IfcRepresentation</strong>, each being assigned to a different <span class="self-ref">IfcGeometricRepresentationSubContext</span>). The applicable values for the inherited <i>ContextIdentifier</i> attribute shall be identical to the <i>RepresentationIdentifier</i> attrubute defined at <strong>IfcShapeRepresentation</strong>.</p>

<blockquote class="note">
NOTE&nbsp; The provision of a model view (<i>IfcGeometricRepresentationContext.ContextType</i> = 'Model') is mandatory. Instances of <span class="self-ref">IfcGeometricRepresentationSubContext</span> relate to it as its <i>ParentContext</i>.
</blockquote>

<blockquote class="example">
EXAMPLE&nbsp; Instances of <span class="self-ref">IfcGeometricRepresentationSubContext</span> can be used to handle the multi-view blocks or macros, which are used in CAD programs to store several scale and/or view dependent geometric representations of the same object. The application can then choose the most appropriate representation for showing the geometric shape of the product, depending on the target view and scale.
</blockquote>



<h1>IfcGlobalOrLocalEnum</h1>
                                
                                <h1>IfcMapConversion</h1>
                                
                                <p>The map conversion deals with transforming the local engineering coordinate system, often called world coordinate system, into the coordinate reference system of the underlying map.</p>

<blockquote class="note">
NOTE&nbsp; The <span class="self-ref">IfcMapConversion</span> does not handle the projection of a map from the geodetic coordinate reference system.
</blockquote>

<p>The map conversion allows to convert the local origin of the local engineering coordinate system to its place within a map (easting, northing, orthogonal height) and to rotate the x-axis of the local engineering coordinate system within the horizontal (easting/westing) plane of the map.</p>

<blockquote class="note">
NOTE&nbsp; The z axis of the local engineering coordinate system is always parallel to the z axis of the map coordinate system.
</blockquote>

<p>The scale factor can be used when the length unit for the 3 axes of the map coordinate system are not identical with the length unit established for this project (seeÂ <i>IfcProject.UnitsInContext</i>), if omitted, the scale factor 1.0 is assumed.</p>



<h1>IfcMaterialDefinitionRepresentation</h1>
                                
                                <p>
 <span class="self-ref">IfcMaterialDefinitionRepresentation</span> defines presentation information relating to <strong>IfcMaterial</strong>. It
 allows for multiple presentations of the same material for different geometric representation contexts.
</p>
<blockquote class="note">
 NOTE&nbsp; The <span class="self-ref">IfcMaterialDefinitionRepresentation</span> is currently only used to define presentation information to
 material used at element occurrences, defined as subtypes of <strong>IfcElement</strong>, or at element types, defined as subtypes
 of <strong>IfcElementType</strong>. The <strong>IfcMaterial</strong> is assigned to the subtype of <strong>IfcElement</strong>, or <strong>IfcElementType</strong>
 using the <strong>IfcRelAssociatesMaterial</strong> relationship (eventually via other material related entities
 <strong>IfcMaterialLayerSetUsage</strong>, <strong>IfcMaterialLayerSet</strong>, <strong>IfcMaterialLayer</strong>, or
 <strong>IfcMaterialProfileSetUsage</strong>, <strong>IfcMaterialProfileSet</strong>, <strong>IfcMaterialProfile</strong>).
</blockquote>
<p>
 The <span class="self-ref">IfcMaterialDefinitionRepresentation</span> can apply
</p>
<ul>
 <li>different presentation styles for different representation contexts, for example, a different style for
  sketch view, model view or plan view, or for different target scales,
 </li>
 <li>for each representation context is can apply curve style, fill area style (hatching), symbol, text and surface style.
 </li>
</ul>



<p>&nbsp;</p>
<p class="use-head">
 Use definition
</p>

    <table border="0" cellpadding="0" cellspacing="0" summary=
    "use diagram">
      <tr>
        <td valign="top">
          <img src=
          "../../../figures/IfcMaterialDefinitionRepresentation_01.png" alt=
          "use diagram" border="0">
        </td>
	<td>As shown in 
      specific to a representation context by adding one and more
      <strong>IfcStyledRepresentation</strong>'s. Each of them includes a
      single <strong>IfcStyledItem</strong> with exactly zero or one style
      for either curve, fill area, surface, text or symbol style
      that is applicable.</td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
	<td>&nbsp;</td>
      </tr>
    </table>
<h1>IfcProductDefinitionShape</h1>
                                
                                <p>The <span class="self-ref">IfcProductDefinitionShape</span> defines all shape relevant information about an <strong>IfcProduct</strong>. It allows for multiple geometric shape representations of the same product. The shape relevant information includes:</p>
<ul>
<li>the shape representation including geometric representation items (for 3D solids, 2D annotations, etc.) and:
<ul>
<li>associated presentation information (line color, line type, surface rendering properties)</li>
<li>assignment to presentation layers (CAD layers for visibility control)</li>
</ul>
</li>
<li>or the topological representation items for connectivity systems (vertex, edge, face representations) that may include geometric representation items (vertex points, edge curves, face surfaces)</li>
</ul>

<blockquote class="note">
NOTE&nbsp; The definition of this entity relates to the ISO 10303 entity product_definition_shape. Please refer to ISO/IS 10303-41:1994 for the final definition of the formal standard.
</blockquote>



<h1>IfcProductRepresentation</h1>
                                
                                <p><span class="self-ref">IfcProductRepresentation</span> defines a representation of a
product, including its (geometric or topological) representation.
A product can have zero, one or many geometric representations,
and a single geometric representation can be shared among various
products using mapped representations.</p>

<blockquote class="note">
NOTE&nbsp; The definition
of this entity relates to the ISO 10303 entity property_definition.
The use of the term &lsquo;property&rsquo; was avoided since it
conflicts with the property, property type, and property set
definitions elsewhere in the IFC model.
</blockquote>







<h1>IfcProductRepresentationSelect</h1>
                                
                                <h1>IfcProjectedCRS</h1>
                                
                                <p><span class="self-ref">IfcProjectedCRS</span> is a coordinate reference system of
      the map to which the map translation of the local
      engineering coordinate system of the construction or
      facility engineering project relates. The
      <i>MapProjection</i> and <i>MapZone</i> attributes uniquely
      identify the projection to the underlying geographic
      coordinate reference system, provided that they are
      well-known in the receiving application.</p>
    <p>The projected coordinate reference system is assumed to be
      a 2D or 3D right-handed Cartesian coordinate system, the
      optional <i>MapUnit</i> attribute can be used determine the
      length unit used by the map.</p>
    <blockquote class="extDef">NOTE&nbsp; Definition from OpenGIS Abstract Specification,
      Topic 2:<br> A 2D (or with vertical coordinate axis 3D)
      coordinate reference system used to approximate the shape
      of the earth on a planar surface, but in such a way that
      the distortion that is inherent to the approximation is
      carefully controlled and known. Distortion correction is
      commonly applied to calculated bearings and distances to
      produce values that are a close match to actual field
      values.</blockquote>

    

<h1>IfcRepresentation</h1>
                                
                                <p>
      The <span class="self-ref">IfcRepresentation</span> defines the general concept of
      representing product properties and in particular the product
      shape.
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition from ISO 10303-43:<br>
      A representation is a collection of one or more representation items that are
      related in a specified representation context. The relationship of representation
			item to representation context is the basis for distinguishing which representation
			item entities are related.<br><br>
			A representation item can be related to a representation context directly, when it 
			occurs as an element is a representation, or indirectly, when it is referenced
			through any number of intervening entities, each of type representation item.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>representation</strong> defined in ISO 10303-42.
    </blockquote>
    
    
    
    <p class="use-head">
      Representation Use Definition
    </p>
    <p>
      Each representation, either <strong>IfcShapeRepresentation</strong>, or
      <strong>IfcTopologyRepresentation</strong> shall have a well defined:
    </p>
    <ul>
      <li>
        <i>ContextOfItems</i>: Reference to an
        <strong>IfcGeometricRepresentationContext</strong> as agreed for this
        representation.
      </li>
      <li>
        <i>RepresentationIdentifier</i>: Name of the
        representation, for example, 'Body' for 3D shape,
        'FootPrint' for 2D ground view, 'Axis' for reference axis.
      </li>
      <li>
        <i>RepresentationType</i>: Name for the geometric, or
        topological representation type, for example, 'SweptSolid'
        for 3D swept solids, 'Brep' for boundary representation.
      </li>
    </ul>
    <blockquote class="note">
      NOTE&nbsp; Guidelines for applying correct values to those
      attributes are provided in the geometry use definition
      section at each subtype of <strong>IfcElement</strong>. These
      guidelines can be further refined in view definitions or
      implementer agreements.
    </blockquote>

<h1>IfcRepresentationContext</h1>
                                
                                <p>
      The <span class="self-ref">IfcRepresentationContext</span> defines the context to
      which the <strong>IfcRepresentation</strong> of a product is related.
    </p>
    <blockquote class="extDef">
      NOTE&nbsp; Definition from ISO 10303-42<br>
      A representation context is a context in which a set of
      representation items are related.
    </blockquote>
    <blockquote class="note">
      NOTE&nbsp; Entity adapted from
      <strong>representation_context</strong> defined in ISO
      10303-42.
    </blockquote>
    
    

<h1>IfcRepresentationContextSameWCS</h1>
                                
                                <h1>IfcSameAxis2Placement</h1>
                                
                                <h1>IfcSameCartesianPoint</h1>
                                
                                <h1>IfcSameDirection</h1>
                                
                                <h1>IfcSameValidPrecision</h1>
                                
                                <h1>IfcSameValue</h1>
                                
                                <h1>IfcShapeAspect</h1>
                                
                                <p><span class="self-ref">IfcShapeAspect</span> allows for grouping of shape representation items
that represent aspects (or components) of the shape of a product. Thereby shape
representations of components of the product shape represent a distinctive part
to a product that can be explicitly addressed.</p>
<p>The <span class="self-ref">IfcShapeAspect</span>'s may have distinct material information or
other distict characteristics that differs from other parts of the product
shape representation.</p>
<blockquote class="note">NOTE&nbsp; The <span class="self-ref">IfcShapeAspect</span> together with
the <strong>IfcMaterialConstituent</strong> can be used to associate distict material
information to parts of the product shape representation.</blockquote>
<p>
aspects.</p>
<table>
<tr>
<td><img src="../../../figures/IfcShapeAspect_fig1.png" alt="shape"></td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; Definition from ISO 10303-41:<br>
A shape aspect is an identifiable element of the shape of an
object.</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from
<strong>shape_aspect</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>If <i>ShapeRepresentations</i> points to shape representations that are
part of an <strong>IfcProductDefinitionShape</strong>,
<i>PartOfProductDefinitionShape</i> must refer to this instance of
<strong>IfcProductDefinitionShape</strong>.</li>
<li>If <i>ShapeRepresentations</i> points to shape representations that are
part of an <strong>IfcRepresentationMap</strong>, <i>PartOfProductDefinitionShape</i>
must refer to this instance of <strong>IfcRepresentationMap</strong>.</li>
</ol>
<h1>IfcShapeModel</h1>
                                
                                <p><span class="self-ref">IfcShapeModel</span> represents
the concept of a particular geometric and/or topological
representation of a product's shape or a product component's shape
within a representation context. This representation context has to
be a geometric representation context (with the exception of
topology representations without associated geometry). The two
subtypes are <strong>IfcShapeRepresentation</strong> to cover geometric
models that represent a shape, and <strong>IfcTopologyRepresentation</strong>
to cover the conectivity of a product or product component. The
topology may or may not have geometry associated.</p>

<p>The <span class="self-ref">IfcShapeModel</span> can be a shape representation
(geometric and/or topologogical) of a product (via
<strong>IfcProductDefinitionShape</strong>), or a shape representation
(geometric and/or topologogical) &nbsp;of a component of a product
shape (via <strong>IfcShapeAspect</strong>).</p>



<h1>IfcShapeRepresentation</h1>
                                
                                <p>The <span class="self-ref">IfcShapeRepresentation</span> represents the concept of a particular
geometric representation of a product or a product component within a specific
geometric representation context. The inherited attribute
<i>RepresentationType</i> is used to define the geometric model used for the
shape representation (e.g. 'SweptSolid', or 'Brep'), the inherited attribute
<i>RepresentationIdentifier</i> is used to denote the kind of the
representation captured by the <span class="self-ref">IfcShapeRepresentation</span> (e.g. 'Axis',
'Body', etc.).<br></p>
<p>Several representation identifiers for shape representation are included as
predefined values for <i>RepresentationIdentifier</i>. Table 694 indicates the
defined list of values for <i>RepresentationIdentifier</i>.</p>

<table>
<tr>
<td>
<table class="gridtable">
<tr>
<th>Identifier</th>
<th>&nbsp;</th>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Box</b></td>
<td align="left" valign="top">Bounding box as simplified 3D box geometry of an
element</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Annotation</b></td>
<td align="left" valign="top">2D annotations not representing elements</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Axis</b></td>
<td align="left" valign="top">2D or 3D Axis, or single line, representation of
an element</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>FootPrint</b></td>
<td align="left" valign="top">2D Foot print, or double line, representation of
an element, projected to ground view</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Profile</b></td>
<td align="left" valign="top">3D line representation of a profile being planar,
e.g. used for door and window outlines</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Surface</b></td>
<td align="left" valign="top">3D Surface representation, e.g. of an analytical
surface, of an elementplane)</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Body</b></td>
<td align="left" valign="top">3D Body representation, e.g. as wireframe,
surface, or solid model, of an element</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Body-FallBack</b></td>
<td align="left" valign="top">3D Body representation, e.g. as tessellation, or
other surface, or boundary representation, added in addition to the solid model
(potentially involving Boolean operations) of an element</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Clearance</b></td>
<td align="left" valign="top">3D clearance volume of the element. Such
clearance region indicates space that should not intersect with the 'Body'
representation of other elements, though may intersect with the 'Clearance'
representation of other elements.</td>
</tr>
<tr>
<td align="left" valign="top" width="210"><b>Lighting</b></td>
<td align="left" valign="top">Representation of emitting light as a light
source within a shape representation</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="table">Table 694 &mdash; Representation identifiers</p>
</td>
</tr>
</table>
<p>Several representation types for shape representation are included as
predefined values for <i>RepresentationType</i>. Table 695 indicates the
defined list of values for <i>RepresentationType</i>.</p>
<table>
<tr>
<td>
<table class="gridtable">
<tr>
<th colspan="2" >Type</th>
<th>&nbsp;</th>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Point</b></td>
<td align="left" valign="top">2 or 3 dimensional point(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>PointCloud</b></td>
<td align="left" valign="top">3 dimensional points prepresented by a point
list</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Curve</b></td>
<td align="left" valign="top">2 or 3 dimensional curve(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Curve2D</b></td>
<td align="left" valign="top">2 dimensional curve(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Curve3D</b></td>
<td align="left" valign="top">3 dimensional curve(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Surface</b></td>
<td align="left" valign="top">2 or 3 dimensional surface(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Surface2D</b></td>
<td align="left" valign="top">2 dimensional surface(s) (a region on ground
view)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Surface3D</b></td>
<td align="left" valign="top">3 dimensional surface(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>FillArea</b></td>
<td align="left" valign="top">2D region(s) represented as a filled area
(hatching)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>Text</b></td>
<td align="left" valign="top">text defined as text literals</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20">
<b>AdvancedSurface</b></td>
<td>3 dimensional b-spline surface(s)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>GeometricSet</b></td>
<td align="left" valign="top">points, curves, surfaces (2 or 3
dimensional)</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>GeometricCurveSet</b></td>
<td align="left" valign="top">points, curves (2 or 3 dimensional)</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>Annotation2D</b></td>
<td>points, curves (2 or 3 dimensional), hatches and text (2 dimensional)</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>SurfaceModel</b></td>
<td align="left" valign="top">face based and shell based surface model(s), or
tessellated surface model(s)</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>Tessellation</b></td>
<td align="left" valign="top">tessellated surface representation(s) only</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><b>SolidModel</b></td>
<td align="left" valign="top">including swept solid, Boolean results and Brep
bodies; more specific types are:</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>SweptSolid</b></td>
<td align="left" valign="top">swept area solids, by extrusion and revolution,
excluding tapered sweeps</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>AdvancedSweptSolid</b></td>
<td align="left" valign="top">swept area solids created by sweeping a profile
along a directrix, and tapered sweeps</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>Brep</b></td>
<td align="left" valign="top">faceted Brep's with and without voids</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>AdvancedBrep</b></td>
<td align="left" valign="top">Brep's based on advanced faces, with b-spline
surface geometry, with and without voids</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>CSG</b></td>
<td align="left" valign="top">Boolean results of operations between solid
models, half spaces and Boolean results</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>Clipping</b></td>
<td align="left" valign="top">Boolean differences between swept area solids,
half spaces and Boolean results</td>
</tr>
<tr>
<td colspan="2" align="left" valign="top" width="20"><i><br>
additional types</i></td>
<td align="left" valign="top"><br>
some additional representation types are provided:</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>BoundingBox</b></td>
<td align="left" valign="top">simplistic 3D representation by a bounding
box</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>SectionedSpine</b></td>
<td align="left" valign="top">cross section based representation of a spine
curve and planar cross sections. It can represent a surface or a solid and the
interpolations of the between the cross sections is not defined</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>LightSource</b></td>
<td align="left" valign="top">light source with (depending on type) position,
orientation, light colour, intensity and attenuation</td>
</tr>
<tr>
<td align="left" valign="top" width="20"></td>
<td align="left" valign="top" width="180"><b>MappedRepresentation</b></td>
<td align="left" valign="top">representation based on mapped item(s), referring
to a representation map. Note: it can be seen as an inserted block reference.
The shape representation of the mapped item has a representation type declaring
the type of its representation items.</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>
<p class="table">Table 695 &mdash; Representation types</p>
</td>
</tr>
</table>
<blockquote class="extDef">NOTE&nbsp; The definition relates to
<strong>shape_representation</strong> defined in ISO 10303-41.</blockquote>


<h1>IfcShapeRepresentationTypes</h1>
                                
                                <h1>IfcStyledRepresentation</h1>
                                
                                <p>The <span class="self-ref">IfcStyledRepresentation</span> represents the concept of a styled presentation being a representation of a product or a product component, like material. within a representation context. This representation context does not need to be (but may be) a geometric representation context.</p>

<blockquote class="note">
NOTE&nbsp; Current usage of <span class="self-ref">IfcStyledRepresentation</span> is restricted to the assignment of presentation information to an material. The <span class="self-ref">IfcStyledRepresentation</span> includes only presentation styles (<strong>IfcCurveStyle</strong>, <i>FillAreaStyle</i>, <strong>IfcSurfaceStyle</strong>) that define how a material should be presented within a particular (eventually view and scale dependent) representation context. All instances of <span class="self-ref">IfcStyledRepresentation</span> are referenced by <strong>IfcMaterialDefinitionRepresentation</strong>, and assigned to <strong>IfcMaterial</strong> by <i>IfcMaterialDefinitionRepresentation.RepresentedMaterial</i>.
</blockquote>

<p>A styled representation has to include one or several styled items with the associated style information (curve, symbol, text, fill area, or surface styles). It shall not contain the geometric representation items that are styled.</p>



<h1>IfcStyleModel</h1>
                                
                                <p><span class="self-ref">IfcStyleModel</span> represents the concept of a particular presentation style defined for a material (or other characteristic) of a product or a product component within a representation context. This representation context may (but has not to be) a geometric representation context.</p>

<p><span class="self-ref">IfcStyleModel</span> can be a style representation (presentation style) of a material (via <strong>IfcMaterialDefinitionRepresentation</strong>), potentially differentiated for different representation contexts (for example, different material hatching depending on the scale of the target representation context).</p>



<h1>IfcTopologyRepresentation</h1>
                                
                                <p><span class="self-ref">IfcTopologyRepresentation</span>
represents the concept of a particular topological representation of a
product or a product component within a representation context. This
representation context does not need to be (but may be) a geometric
representation context. Several representation types for shape
representation are included as predefined types: </p>
<table>
  <tbody>
    <tr>
      <td><b>Vertex</b></td>
      <td>topological vertex
representation (with or without assigned geometry)</td>
    </tr>
    <tr>
      <td><b>Edge</b></td>
      <td>topological edge
representation (with or without assigned geometry)</td>
    </tr>
    <tr>
      <td><b>Path</b></td>
      <td>topological path
representation (with or without assigned geometry)</td>
    </tr>
    <tr>
      <td><b>Face</b></td>
      <td>topological face
representation (with or without assigned geometry)</td>
    </tr>
    <tr>
      <td><b>Shell</b></td>
      <td>topological shell
representation (with or without assigned geometry)</td>
    </tr>
    <tr>
      <td><b>Undefined</b></td>
      <td>no constraints imposed</td>
    </tr>
  </tbody>
</table>
<p>The representation type is
given as a string value at the inherited attribute '<i>RepresentationType</i>'.<br>
</p>



<h1>IfcTopologyRepresentationTypes</h1>
                                
                                <h1>IfcBeam</h1>
                                
                                <p>An <span class="self-ref">IfcBeam</span> is a horizontal, or nearly horizontal, structural member that is capable of withstanding load primarily by resisting bending. It represents such a member from an architectural point of view. It is not required to be load bearing.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
structural member for carrying load(s) between or beyond points of support, usually narrow in relation to its length and horizontal or nearly so.</blockquote>

<blockquote class="note">NOTE&nbsp; The representation of load-bearing beams in a structural analysis model is provided by subtypes of <strong>IfcStructuralMember</strong> (with <strong>IfcStructuralCurveMember</strong> being mostly applicable) as part of an <strong>IfcStructuralAnalysisModel</strong>.</blockquote>

<blockquote class="note">NOTE&nbsp; For any other longitudinal structural member, not constrained to be predominately horizontal nor vertical, or where this semantic information is irrelevant, the entity <strong>IfcMember</strong> should be used.</blockquote>

<p>There are two entities for beam occurrences:</p>
<ul>
<li><strong>IfcBeamStandardCase</strong> used for all occurrences of beams, that have a profile defined that is swept along a directrix. The profile might be changed uniformly by a taper definition along the directrix. The profile parameter and its cardinal point of insertion can be fully described by the <strong>IfcMaterialProfileSetUsage</strong>. These beams are always represented geometricly by an 'Axis' and a 'SweptSolid' or 'AdvancedSweptSolid' shape representation (or by a 'Clipping' geometry based on the swept solid), if a 3D geometric representation is assigned. In addition they have to have a corresponding <strong>IfcMaterialProfileSetUsage</strong> assigned.
<blockquote class="note">NOTE&nbsp; Model view definitions and implementer agreements may further constrain the applicable geometry types, for example, by excluding tapering from an <strong>IfcBeamStandardCase</strong> implementation.</blockquote>
</li>
<li><span class="self-ref">IfcBeam</span> used for all other occurrences of beams, particularly for beams with changing profile sizes along the extrusion, or beams defined by non-linear extrusion, or beams having only 'Brep', or 'SurfaceModel' geometry.
<blockquote class="note">NOTE&nbsp; Model view definitions and implementer agreements may impose the use of <span class="self-ref">IfcBeam</span> in all cases by excluding <strong>IfcBeamStandardCase</strong> from scope of the model view.</blockquote>
</li>


<h1>IfcBeamStandardCase</h1>
                                
                                <p>The standard beam,
<span class="self-ref">IfcBeamStandardCase</span>, defines a beam with certain constraints
for the provision of material usage, parameters and with certain
constraints for the geometric representation. The
<span class="self-ref">IfcBeamStandardCase</span> handles all cases of beams, that:</p>
<ul>
<li>have a reference to the <strong>IfcMaterialProfileSetUsage</strong>
defining the material profile association of the beam with the
cardinal point of its insertion relative to the local
placement.</li>
<li>are consistent in using the correct cardinal point offset of
the profile as compared to the 'Axis' and 'Body' shape
representation</li>
<li>are based on a sweep of a planar profile, or set of profiles,
as defined by the <strong>IfcMaterialProfileSet</strong></li>
<li>have an 'Axis' shape representation with constraints provided
below in the geometry use definition</li>
<li>have a 'Body' shape representation with constraints provided
below in the geometry use definition
<ul>
<li>are extruded perpendicular to the profile definition plane</li>
<li>have a start profile, or set of profiles, that is swept</li>
<li>the sweeping operation can be linear extrusion, circular
rotation, or a sweep along a directrix</li>
<li>the start profile, or set of profiles can be swept unchanged,
or might be changed uniformly by a taper definition</li>
</ul>
</li>
<li style="list-style-type:none">
<blockquote class="note">NOTE&nbsp; View definitions and implementer
agreements may further constrain the applicable geometry types,
e.g. by excluding tapering from an <span class="self-ref">IfcBeamStandardCase</span>
implementation.</blockquote>
</li>
</ul>



<p><b><i>Geometric Representations</i></b></p>
<p>The geometric representation of <span class="self-ref">IfcBeamStandardCase</span> is
defined using the following multiple shape representations for its
definition:</p>
<ul>
<li><u>Axis</u>: A three dimensional open curve (subtype of
<strong>IfcBoundedCurve</strong>) defining the axis for the standard beam.
The cardinal point is determined by the beam axis.</li>
<li><u>Body</u>: A Swept Solid Representation or a CSG clipping
representation defining the 3D shape of the standard beam.</li>
</ul>
<blockquote class="note">NOTE&nbsp; It is invalid to exchange a 'SurfaceModel',
'Brep', or 'MappedRepresentation' representation for the 'Body'
shape representation of an
<span class="self-ref">IfcBeamStandardCase</span>.</blockquote>



<h1>IfcBeamType</h1>
                                
                                <p>The element type <span class="self-ref">IfcBeamType</span> defines commonly shared information for occurrences of beams. The set of shared information may include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common profile definitions</li>
<li>common shape representations</li>
</ul>
<p>It is used to define a beam specification, or beam style (the specific product information that is common to all occurrences of that beam type). Beam types may be exchanged without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcBeamType</span> within building models are represented by instances of <strong>IfcBeamStandardCase</strong> if the <span class="self-ref">IfcBeamType</span> has a single associated <strong>IfcMaterialProfileSet</strong>; otherwise they are represented by instances of <strong>IfcBeam</strong>. Occurrences of the <span class="self-ref">IfcBeamType</span> within structural analysis models are represented by instances of <strong>IfcStructuralCurveMember</strong>, or its applicable subtypes.</p>



<h1>IfcBeamTypeEnum</h1>
                                
                                <h1>IfcBuildingElementProxy</h1>
                                
                                <p>The <span class="self-ref">IfcBuildingElementProxy</span> is a proxy definition that provides the same functionality as subtypes of 
<strong>IfcBuildingElement</strong>, but without having a predefined meaning of the special type of building element, it represents.</p>
<p>Proxies can also be used as spatial place holders or provisions, that maybe later replaced by special types of elements.</p>
<p>One use of the proxy object is a provision for voids, i.e. where a particular volume of space is requested by some engineering
function that might later be accepted or rejected and if accepted potentially transformed into a void within a building element, like
a wall opening, or a slab opening. The provision for voids is exchanged as an <span class="self-ref">IfcBuildingElementProxy</span> with the
<i>PredefinedType</i> = ProvisionForVoid.</p> <p>Other usages of <span class="self-ref">IfcBuildingElementProxy</span> include:</p>
<ul>
<li>The <span class="self-ref">IfcBuildingElementProxy</span> can be used to exchange special types of building elements for which the current specification does not yet provide a semantic definition.</li>
<li>The <span class="self-ref">IfcBuildingElementProxy</span> can also be used to represent building elements for which the participating applications can not provide a semantic definition.</li>
</ul>





<h1>IfcBuildingElementProxyType</h1>
                                
                                <p>
      <span class="self-ref">IfcBuildingElementProxyType</span> defines a list of
      commonly shared property set definitions of a building
      element proxy and an optional set of product
      representations. It is used to define an element
      specification (i.e. the specific product information, that
      is common to all occurrences of that product type).
    </p>
    <blockquote class="note">
      NOTE&nbsp; The product representations are defined as
        representation maps (at the level of the supertype
        <strong>IfcTypeProduct</strong>, which gets assigned by an element
        occurrence instance through the
        <i>IfcShapeRepresentation.Item[1]</i> being an
        <strong>IfcMappedItem</strong>.
    </blockquote>
    <p>
      A building element proxy type is used to define the common
      properties of a certain type of a building element proxy
      that may be applied to many instances of thatÂ type to
      assign a specific style. Building element proxy typesÂ may
      be exchanged without being already assigned to occurrences.
    </p>
<blockquote class="note">
NOTE&nbsp; Although an building element proxy does not have a predefined ontological meaning the provision of a type may be helpful in sharing information among multiple occurrences. Applications that provide type information for element types not yet included in the current IFC specification can use the <span class="self-ref">IfcBuildingElementProxyType</span> to exchange such types.
</blockquote>
    <p>
      The occurrences of the <span class="self-ref">IfcBuildingElementProxyType</span>
      are represented by instances of
      <strong>IfcBuildingElementProxy</strong>.
    </p>


<h1>IfcBuildingElementProxyTypeEnum</h1>
                                
                                <h1>IfcBuildingSystem</h1>
                                
                                <p>A building system is a group by which building elements are grouped according to a common function within the building.</p>



<p>The group <span class="self-ref">IfcBuildingSystem</span> defines the occurrence of a
specialized system for use within the context of a building and
finishing fabric. Important functionalities for the description
of a building system are derived from supertypes:</p>
<ul>
<li>From <strong>IfcSystem</strong> it inherits the ability to couple the
building system via <strong>IfcRelServicesBuildings</strong> to one or more
<strong>IfcSpatialElement</strong> subtypes as necessary.</li>
</ul>
<ul>
<li>From <strong>IfcGroup</strong> it inherits the inverse attribute
<i>IsGroupedBy</i>, pointing to the relationship class
<strong>IfcRelAssignsToGroup</strong>. This allows to group building
elements (instances of <strong>IfcBuildingElement</strong> subtypes,
<strong>IfcFurnishingElement</strong> subtype, <strong>IfcElementAssembly</strong>
and <strong>IfcTransportElement</strong>).</li>
</ul>
<ul>
<li>From <strong>IfcObjectDefinition</strong> it inherits the inverse
attribute <i>IsDecomposedBy</i> pointing to the relationship
class <strong>IfcRelAggregates</strong>. It provides the hierarchy between
the separate (partial) building systems.</li>
</ul>

<h1>IfcBuildingSystemTypeEnum</h1>
                                
                                <h1>IfcChimney</h1>
                                
                                <p>Chimneys are typically vertical, or as near as vertical, parts of the construction of a building and part of the building fabric. Often constructed by pre-cast or insitu concrete, today seldom by bricks.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
construction containing one or more flues.<br> 
Flue: Duct designed to convey the products of combustion to the open air.<br> 
Chimney stack: Part of the chimney that projects above a roof.</blockquote>



<h1>IfcChimneyType</h1>
                                
                                <p>The building element type <b>IfcChimneyType</b> defines commonly shared information for occurrences of chimneys. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a chimney type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcChimneyType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcChimneyType</b> are represented by instances of <strong>IfcChimney</strong>. 
Refer to the documentation at <strong>IfcChimney</strong> for supported property sets, materials, and composition.</p>


<h1>IfcChimneyTypeEnum</h1>
                                
                                <h1>IfcColumn</h1>
                                
                                <p><strong>IfcColumn</span> is a vertical structural member which often is aligned with a structural grid
intersection. It represents a vertical, or nearly vertical, structural member that transmits, through compression, the weight
of the structure above to other structural elements below. It represents such a member from an architectural point of view. It
is not required to be load bearing.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1<br>
structural member of slender form, usually vertical, that transmits to its base the forces, primarily in compression, that are applied to it.</blockquote>

<blockquote class="note">NOTE&nbsp; The representation of a column in a structural analysis model is provided by
<strong>IfcStructuralCurveMember</strong> being part of an <strong>IfcStructuralAnalysisModel</strong>.</blockquote>
<blockquote class="note">NOTE&nbsp; For any longitudial structural member, not constrained to be predominately horizontal nor vertical, or where
this semantic information is irrelevant, the entity <strong>IfcMember</strong> exists.</blockquote>
<p>The IFC specification provides two entities for column occurrences:</p>
<ul>
<li><strong>IfcColumnStandardCase</strong> used for all occurrences of columns, tthat have a profile defined that is swept along a
directrix. The profile might be changed uniformly by a taper definition along the directrix. The profile parameter and its
cardinal point of insertion can be fully described by the <strong>IfcMaterialProfileSetUsage</strong>. These beams are always
represented geometricly by an 'Axis' and a 'SweptSolid' or 'AdvancedSweptSolid' shape representation (or by a 'Clipping'
geometry based on the swept solid), if a 3D geometric representation is assigned. In addition they have to have a
corresponding <strong>IfcMaterialProfileSetUsage</strong> assigned.
<blockquote class="note">NOTE&nbsp; View definitions and implementer agreements may further constrain the applicable geometry types,
for example by excluding tapering from an <strong>IfcColumnStandardCase</strong> implementation.</blockquote>
</li>
<li><span class="self-ref">IfcColumn</span> used for all other occurrences of columns, particularly for columns with changing profile sizes along the
extrusion, or columns defined by non-linear extrusion, or columns having only 'Brep', or 'SurfaceModel' geometry.</li>
</ul>



<h1>IfcColumnStandardCase</h1>
                                
                                <p>The standard column,
<span class="self-ref">IfcColumnStandardCase</span>, defines a column with certain
constraints for the provision of material usage, parameters and
with certain constraints for the geometric representation. The
<span class="self-ref">IfcColumnStandardCase</span> handles all cases of columns,
that:</p>
<ul>
<li>have a reference to the <strong>IfcMaterialProfileSetUsage</strong>
defining the material profile association of the column with the
cardinal point of its insertion relative to the local
placement.</li>
<li>are based on a sweep of a planar profile, or set of profiles,
as defined by the <strong>IfcMaterialProfileSet</strong></li>
<li>have an 'Axis' shape representation with constraints provided
below in the geometry use definition</li>
<li>have a 'Body' shape representation with constraints provided
below in the geometry use definition</li>
<li>have a start profile, or set of profiles, that is swept along
the directrix and might be changed uniformly by a taper
definition</li>
<li>are consistent in using the correct cardinal point offset of
the profile as compared to the 'Axis' and 'Body' shape
representation</li>
<li>are extruded perpendicular to the profile definition
plane</li>
<li style="list-style-type:none">
<blockquote class="note"><small>NOTE&nbsp; View definitions and implementer
agreements may further constrain the applicable geometry types,
e.g. by excluding tapering from an <strong>IfcBeamStandardCase</strong>
implementation.</blockquote>
</li>
</ul>


<p><b><i>Geometric Representations</i></b></p>
<p>The geometric representation of <span class="self-ref">IfcColumnStandardCase</span>
is defined using the following multiple shape representations for
its definition:</p>
<ul>
<li><u>Axis</u>: A three-dimensional open curve (subtype of
<strong>IfcBoundedCurve</strong>) defining the axis for the standard
column. The cardinal point is determined by the column axis.</li>
<li><u>Body</u>: A Swept Solid Representation or a CSG
representation defining the 3D shape of the standard column.</li>
</ul>
<blockquote class="note">NOTE&nbsp; It is invalid to exchange a
'SurfaceModel', 'Brep', or 'MappedRepresentation' representation
for the 'Body' shape representation of an
<span class="self-ref">IfcColumnStandardCase</span>.</blockquote>

<h1>IfcColumnType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcColumnType</span> defines commonly shared information for
occurrences of columns. The set of shared information may
include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common profile definitions</li>
<li>common shape representations</li>
</ul>
<p>It is used to define a column specification, or column style
(i.e. the specific product information that is common to all
occurrences of that column type). Column types may be exchanged
without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcColumnType</span> within building models
are represented by instances of <strong>IfcColumnStandardCase</strong> if
the <span class="self-ref">IfcColumnType</span> has a single associated
<strong>IfcMaterialProfileSet</strong>; otherwise they are represented by
instances of <strong>IfcColumn</strong>. Occurrences of the
<span class="self-ref">IfcColumnType</span> within structural analysis models are
represented by instances of <strong>IfcStructuralCurveMember</strong>, or
its applicable subtypes.</p>



<h1>IfcColumnTypeEnum</h1>
                                
                                <h1>IfcConnectionTypeEnum</h1>
                                
                                <h1>IfcCovering</h1>
                                
                                <p>A covering is an element which covers some part of another element and is fully dependent on that other element. The
<span class="self-ref">IfcCovering</span> defines the occurrence of a covering type, that (if given) is expressed by the <strong>IfcCoveringType</strong>.</p>

<blockquote class="extDef">NOTE&nbsp; Definition according to ISO ISO 6707-1: final coverings and treatments of surfaces and their
intersections.</blockquote>

<p>Coverings are elements with relationships to the covered element and the space on the other side, they may contain openings,
assigned by <strong>IfcRelVoidsElement</strong>, material information, assigned by <strong>IfcRelAssociatesMaterial</strong>, and others.</p>

<blockquote class="example">
EXAMPLE&nbsp; Coverings include wall claddings, floorings, suspended ceilings, moldings and skirting boards.
</blockquote>

<blockquote class="note">
NOTE&nbsp; A more basic information about claddings, floorings, and ceilings of a space can be attached to <strong>IfcSpace</strong>'s using the 
Pset_SpaceCommon properties. Then only a name can be provided and the covering quantities would be interpreted from the space quantities.
</blockquote>

<p>Coverings can be assigned to</p>
<ul>
<li>a space represented by <strong>IfcSpace</strong>
<ul>
<li>using the inverse relationship <i>CoversSpaces</i> pointing to <strong>IfcRelCoversSpaces</strong>. The space is then accessible via
<i>IfcRelCoversSpaces.RelatedSpace</i>. It defines to which space a covering is facing towards.</li>
</ul>
</li>
<li>a space boundary represented by <strong>IfcRelSpaceBoundary</strong>
<ul>
<li>using the inverse relationship <i>ProvidesBoundaries</i> pointing to <i>IfcRelSpaceBoundary.</i> The space is then
accessible via <i>IfcRelSpaceBoundary.RelatingSpace</i>.</li>
</ul>
</li>
<li>a building element represented by <strong>IfcBuildingElement</strong>
<ul>
<li>using the inverse relationship <i>Covers</i> pointing to <strong>IfcRelCoversBldgElements</strong>. The building element is then
accessible via
<i>IfcRelCoversBldgElements.RelatingBuildingElement</i>.</li>
</ul>
</li>
</ul>

<blockquote class="note">NOTE&nbsp; The mere containment relationship between an <span class="self-ref">IfcCovering</span> and an <strong>IfcSpace</strong> is created
by using <strong>IfcRelContainedInSpatialStructure</strong></blockquote>
<p>The following guideline shall apply:</p>
<ul>
<li>(default) if the space has coverings that may not have their own shape representation and no defined relationships to the building
elements they cover, then the <span class="self-ref">IfcCovering</span> shall be assigned to <strong>IfcSpace</strong> using the <strong>IfcRelCoversSpaces</strong>
relationship,</li>
<li>if the space has coverings that have an own shape representation and the space has defined space boundaries, then the
covering, which relates to that space, shall be contained in the space using <strong>IfcRelContainedInSpatialStructure</strong>. It may be
assigned to the space boundaries using the <strong>IfcRelSpaceBoundary</strong>.</li>
<li>if the covering does not relate to a space, then the covering should be assigned to the building element or a distribution
element using the <strong>IfcRelCoversBldgElements</strong> relationship.</li>
</ul>



<h1>IfcCoveringType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcCoveringType</span> defines commonly shared information for
occurrences of coverings. The set of shared information may
include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material (layer set) information</li>
<li>common shape representations</li>
</ul>
<p>It is used to define an covering specification or covering
style (i.e. the specific product information, that is common to
all occurrences of that product type). Covering types may be
exchanged without being already assigned to occurrences.</p>
<p>The occurrences of the <span class="self-ref">IfcCoveringType</span> are represented
by instances of <strong>IfcCovering</strong></p>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The material assignment, if provided using the
<strong>IfcRelAssociatesMaterial</strong> relationship, shall not reference
<strong>IfcMaterialLayerSetUsage</strong> or <strong>IfcMaterialProfileSetUsage</strong>.</li>
</ol>


<h1>IfcCoveringTypeEnum</h1>
                                
                                <h1>IfcCurtainWall</h1>
                                
                                <p>A curtain wall is an exterior wall of a building which is
an assembly of components, hung from the edge of the floor/roof
structure rather than bearing on a floor. Curtain wall is
represented as a building element assembly and implemented as a
subtype of <strong>IfcBuildingElement</strong> that uses an
<strong>IfcRelAggregates</strong> relationship.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
non load bearing wall positioned on the outside of a building and enclosing it.</blockquote>



<p>The geometric representation of <span class="self-ref">IfcCurtainWall</span> is given by the <strong>IfcProductDefinitionShape</strong>, allowing multiple
geometric representations. Independent 'Body' geometric representation, as described below, should only be used when the
<span class="self-ref">IfcCurtainWall</span> is not defined as an aggregate. If defined as an aggregate, the geometric representation is the sum of the
representations of the components within the aggregate.</p>

<p>The geometric representation of <span class="self-ref">IfcCurtainWall</span> is defined using the following multiple shape representations for
its definition:</p>
<ul>
<li>Axis: A two-dimensional open curve (for restrictions see below) defining the axis for the curtain wall.
<ul>
<li>This is an optional representation for curtain walls.</li>
</ul>
</li>
<li>Body: A surface model or boundary representation model representation defining the 3D shape of the curtain wall.
<ul>
<li>If the <span class="self-ref">IfcCurtainWall</span> has components (referenced by <i>SELF\IfcObject.IsDecomposedBy</i>) then no independent shape
representation with <i>RepresentationType</i> = 'Body' shall be defined. The body of <span class="self-ref">IfcCurtainWall</span> is then geometrically
represented by the shape representation of its components. The components are accessed via
<i>SELF\IfcObject.IsDecomposedBy[1].RelatedObjects</i>.</li>
</ul>
<ul>
<li>If the <span class="self-ref">IfcCurtainWall</span> has no components defined (empty set of <i>SELF\IfcObject.IsDecomposedBy</i>) then the
<span class="self-ref">IfcCurtainWall</span> may be represented by an shape representation with the <i>RepresentationIdentifier</i> ='Body'.</li>
</ul>
</li>
</ul>

<h1>IfcCurtainWallType</h1>
                                
                                <p>The building element type <b>IfcCurtainWallType</b> defines commonly shared information for occurrences of curtain walls. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul>
<p>It is used to define a curtain wall type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcCurtainWallType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcCurtainWallType</b> are represented by instances of <strong>IfcCurtainWall</strong>. 
Refer to the documentation at <strong>IfcCurtainWall</strong> for supported property sets, materials, and composition.</p>



<h1>IfcCurtainWallTypeEnum</h1>
                                
                                <h1>IfcDoor</h1>
                                
                                <p>The door is a building element that is predominately used to
provide controlled access for people and goods. It includes
constructions with hinged, pivoted, sliding, and additionally
revolving and folding operations. A door consists of a lining and
one or several panels.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
construction for closing an opening, intended primarily for access
with hinged, pivoted or sliding operation.</blockquote>
<p>The <span class="self-ref">IfcDoor</span> defines a particular occurrence of a door
inserted in the spatial context of a project. A door can:</p>
<ul>
<li>be inserted as a filler in an opening using the
<strong>IfcRelFillsElement</strong> relationship, then the <span class="self-ref">IfcDoor</span> has
an inverse attribute <i>FillsVoids</i> provided;
<blockquote class="note">NOTE&nbsp; View definitions or implementer
agreements may restrict the relationship to only include one door
into one opening</blockquote>
</li>
<li>be part of an element assembly, in general an
<strong>IfcCurtainWall</strong>, using the <strong>IfcRelAggregates</strong>
relationship, then the <span class="self-ref">IfcDoor</span> has an inverse attribute
<i>Decomposes</i> is provided;</li>
<li>be a "free standing" door, then the <span class="self-ref">IfcDoor</span> has no
inverse attributes <i>FillsVoids</i> or <i>Decomposes</i>
provided.</li>
</ul>
<p>The IFC specification provides two entities for door
occurrences:</p>
<ul>
<li><strong>IfcDoorStandardCase</strong> used for all occurrences of doors,
that have a 'Profile' shape representation defined to which a set
of shape parameters for lining and framing properties apply.
Additionally it requires the provision of an <strong>IfcDoorType</strong>
that references one <strong>IfcDoorLiningProperties</strong> and on to many
<strong>IfcDoorPanelProperties</strong>;
<blockquote class="note">
NOTE&nbsp; see <strong>IfcDoorStandardCase</strong>
for all specific constraints imposed by this subtype.</blockquote>
</li>
<li><span class="self-ref">IfcDoor</span> used for all other occurrences of doors,
particularly for doors having only 'Brep', or 'SurfaceModel'
geometry without applying shape parameters.</li>
</ul>
<p>The actual parameters of the door and/or its shape are defined
by the <span class="self-ref">IfcDoor</span> as the occurrence definition (or project
instance), or by the <strong>IfcDoorType</strong> as the specific definition (or
project type). The following parameters are given:</p>
<ul>
<li>at the <span class="self-ref">IfcDoor</span> or <strong>IfcDoorStandardCase</strong> for
occurrence specific parameters. The <span class="self-ref">IfcDoor</span> specifies:</li>
<li style="list-style: none">
<ul>
<li>the door width and height</li>
<li>the door opening direction (by the y-axis of the <i>ObjectPlacement</i>)</li>
</ul></li>
<li>at the <strong>IfcDoorType</strong>, to
which the <span class="self-ref">IfcDoor</span> is related by the inverse relationship
<i>IsTypedBy</i> pointing to <strong>IfcRelDefinesByType</strong>, for type
parameters common to all occurrences of the same type.</li>
<li style="list-style: none">
<ul>
<li>the operation type (single swing, double swing, revolving,
etc.)</li>
<li>the door hinge side (by using two different styles for right
and left opening doors)</li>
<li>the construction material type</li>
<li>the particular attributes for the lining by the
<strong>IfcDoorLiningProperties</strong></li>
<li>the particular attributes for the panels by the
<strong>IfcDoorPanelProperties</strong></li>
</ul>
</li>
</ul>




<p>The geometric representation of <span class="self-ref">IfcDoor</span> is given by the
<strong>IfcProductDefinitionShape</strong>, allowing multiple geometric
representations. The <span class="self-ref">IfcDoor</span> may get its parameter and shape
from the <strong>IfcDoorType</strong>. If an <strong>IfcRepresentationMap</strong> (a
block definition) is defined for the <strong>IfcDoorType</strong>, then the
<span class="self-ref">IfcDoor</span> inserts it through the <strong>IfcMappedItem</strong>.</p>

<p>The&nbsp;geometric representation of <span class="self-ref">IfcDoor</span> is defined
using the following (potentially&nbsp;multiple)
<strong>IfcShapeRepresentation</strong>'s for its
<strong>IfcProductDefinitionShape</strong>:</p>
<ul>
<li><u>Profile</u>: A&nbsp;<font color="#0000FF">'Curve3D'</font>
consisting of a single losed curve defining the outer boundary of
the door (lining). The door parametric representation uses this
profile in order to apply the door lining and panel parameter. If
not provided, the profile of the <strong>IfcOpeningElement</strong> is
taken.</li>
<li><u>FootPrint</u>: A 'GeometricCurveSet', or 'Annotation2D'
representation defining the 2D shape of the door</li>
<li><u>Body</u>: A 'SweptSolid', 'SurfaceModel', or 'Brep'
representation defining the 3D shape of the door.</li>
</ul>
<p>In addition the parametric representation of a (limited) door
shape is available by applying the parameters from
<strong>IfcDoorType</strong> referencing <strong>IfcDoorLiningProperties</strong> and
<strong>IfcDoorPanelProperties</strong>. The purpose of the parameter is
described at those entities and below (door opening operation by
door type).</p>

<p class="use-head">Parameteric Representation using parameters at
<strong>IfcDoorType</strong></p>
<p>The parameters that defines the shape of the <span class="self-ref">IfcDoor</span>, are
given at the <strong>IfcDoorType</strong> and the property sets, which are
included in the <strong>IfcDoorType</strong>. The <span class="self-ref">IfcDoor</span> only defines
the local placement which determines the opening direction of the
door. The overall size of the <span class="self-ref">IfcDoor</span> to be used to apply
the lining or panel parameter provided by the <strong>IfcDoorType</strong> is
determined by the IfcShapeRepresentation with the
RepresentationIdentifier = 'Profile'.</p>
<blockquote class="note">NOTE&nbsp; The <i>OverallWidth</i> and
<i>OverallHeight</i> parameters are for informational purpose
only.</blockquote>
<p>The opening direction is determined by the local placement of
<span class="self-ref">IfcDoor</span> and the <i>OperationType</i> of the door style as
shown in 
<blockquote class="note">NOTE&nbsp; There are different definitions
in various countries on what a left opening or left hung or left
swing door is (same for right). Therefore the IFC definition may
derivate from the local standard and need to be mapped
appropriately.</blockquote>
<table>
<tr>
<td>
<table border="1" cellpadding="2" cellspacing="2" style=
" width:90%;">
<thead>
<tr>
<td align="left" valign="top"><small><b>Opening
directions</b></small></td>
<td align="left" valign="top">
<small><b>Definitions</b></small></td>
<td align="left" valign="top"><small><b>Reference to other
standards</b></small></td>
</tr>
</thead>
<tbody>
<tr valign="top">
<td><small><img alt="fig 1" src="../../../figures/IfcDoor-Fig01.gif" height=
"130" width="150"><br></small></td>
<td align="left"><small>The door panel (for swinging doors) opens
always into the direction of the positive Y axis of the local
placement. The determination of whether the door opens to the left
or to the right is done at the level of the <strong>IfcDoorType</strong>.
Here it is a left side opening door given
by&nbsp;<i>IfcDoorType.OperationType</i> =
SingleSwingLeft</small></td>
<td align="left"><small>refered to as LEFT HAND (LH) in US *<br>
<br>
refered to as DIN-R (right hung) in Germany</small></td>
</tr>
<tr valign="top">
<td><small><img alt="fig 2" src="../../../figures/IfcDoor-Fig02.gif" height=
"130" width="150"><br></small></td>
<td align="left"><small>If the door should open to the other side,
then the local placement has to be changed. It is still a left side
opening door, given by <i>IfcDoorType.OperationType</i> =
SingleSwingLeft</small></td>
<td align="left"><small>refered to as RIGHT HAND REVERSE (RHR) in
US *<br>
<br>
refered to as DIN-R (right hung) in Germany</small></td>
</tr>
<tr valign="top">
<td><img alt="fig 3" src="../../../figures/IfcDoor-Fig03.gif" height="130"
width="150"></td>
<td align="left"><small>If the door panel (for swinging doors)
opens to the right, a separate door style needs to be used (here
<i>IfcDoorTypee.OperationType</i> = SingleSwingRight) and it always
opens into the direction of the positive Y axis of the local
placement.&nbsp;</small></td>
<td align="left"><small>refered to as RIGHT HAND (RH) in US *<br>
<br>
refered to as DIN-L (left hung) in Germany</small></td>
</tr>
<tr valign="top">
<td align="left" valign="top"><small><img alt="fig 4" src=
"../../../figures/IfcDoor-Fig04.gif" height="130" width=
"150"><br></small></td>
<td align="left"><small>If the door panel (for swinging doors)
opens to the right, and into the opposite directions, the local
placement of the door need to change. The door style is given by
<i>IfcDoorType.OperationType</i> = SingleSwingRight.</small></td>
<td align="left"><small>refered to as LEFT HAND REVERSE (LHR) in US
*<br>
<br>
refered to as DIN-L (left hung) in Germany</small></td>
</tr>
</tbody>
<tfoot>
<tr valign="top">
<td align="right" colspan="3"><small>* it assumes that the
'inside/private/primary' space is above (top in the pictures) and
the 'outside/public/secondary' space is below (bottom in the
pictures).</small></td>
</tr>
</tfoot>
</table>
</td>
</tr>
<tr>
<td>
<p class="figure">
</td>
</tr>
</table>



<h1>IfcDoorStandardCase</h1>
                                
                                <p>The standard door, <span class="self-ref">IfcDoorStandardCase</span>, defines a door
with certain constraints for the provision of operation types,
opening directions, frame and lining parameters, and with certain
constraints for the geometric representation. The
<span class="self-ref">IfcDoorStandardCase</span> handles all cases of doors, that:</p>
<ul>
<li>are inserted into an opening, represented by
<strong>IfcOpeningElement</strong>, using the <strong>IfcRelFillsElement</strong>
relationship;</li>
<li>have a local placement relative to this opening, and with the
y-axis of the placement pointing into the opening direction;</li>
<li>have a profile geometry, represented by
<i>IfcShapeRepresentation.RepresentationIdentifier</i>="Profile" as
a closed curve to which the door parameters apply;</li>
<li>have a reference to an <strong>IfcDoorType</strong> to define the opening
direction and the operation type (swinging, sliding, folding, etc.)
of the door. The attribute <i>OperationType</i> shall be provided
and not being UNDEFINED, and the attribute
<i>ParameterTakesPrecedence</i> shall be "TRUE";</li>
<li>have an <strong>IfcDoorLiningProperties</strong> and
<strong>IfcDoorPanelProperties</strong> instances included in the set of
<i>HasPropertySets</i> at <strong>IfcDoorType</strong>.</li>
</ul>


<p><b><i>Geometric Representations</i></b></p>
<p>The geometric representation of <span class="self-ref">IfcDoorStandardCase</span> is
defined using the following multiple shape representations for its
definition:</p>
<ul>
<li><u>Profile</u>: a three-dimensional closed curve within a
particular shape representation. The profile is used to apply the
parameter of the parametric door representation. The profile around
the edges of the opening is used to apply the door lining and door
panel shape parameter.</li>
<li><u>MappedRepresentation</u>: A SweptSolid, SurfaceModel, Brep
or a CSG representation additionally defining the 3D shape of the
standard door in addition to the parametric representation by
applying the <strong>IfcDoorLiningProperties</strong> and an the
<strong>IfcDoorPanelProperties</strong> to the 'Profile' representation.</li>
</ul>

<h1>IfcDoorType</h1>
                                
                                <p>The element type <span class="self-ref">IfcDoorType</span> defines commonly shared information
for occurrences of doors. The set of shared information may
include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common operation type definitions</li>
<li>common shape representations</li>
</ul>
<p>A door type defines the particular parameter of the lining and
one (or several) panels through the
<strong>IfcDoorLiningProperties</strong> and the
<strong>IfcDoorPanelProperties</strong> as predefined property sets
applicable to doors only.</p>
<p>It is used to define a door specification, or door style (i.e.
the specific product information that is common to all
occurrences of that door type). Door types may be exchanged
without being already assigned to occurrences.</p>

<blockquote class="note">
NOTE&nbsp; The product representations are defined as representation maps (at the level of the supertype <strong>IfcTypeProduct</strong>, which gets assigned by an element occurrence instance through the <i>IfcShapeRepresentation.Item[1]</i> being an <strong>IfcMappedItem</strong>.
</blockquote>

<p>Occurrences of the <span class="self-ref">IfcDoorType</span> within building models are represented by instances of <strong>IfcDoor</strong> or <strong>IfcDoorStandardCase</strong>.</p>



<p class="use-head">Operation type use definition</p>
<p>The <strong>IfcDoorTypeOperationEnum</strong> defines the general layout
of the door type and its symbolic presentation. Depending on the
enumerator, the appropriate instances of
<strong>IfcDoorLiningProperties</strong> and <strong>IfcDoorPanelProperties</strong>
are attached in the list of <i>HasPropertySets</i>. The
<strong>IfcDoorTypeOperationEnum</strong> mainly determines the hinge side
(left hung, or right hung), the operation (swinging, sliding,
folding, etc.) and the number of panels.</p>
<blockquote class="note">NOTE&nbsp; There are different definitions in
various countries on what a left opening or left hung or left
swing door is (same for right). Therefore the IFC definition may
derivate from the local standard and may need to be mapped
appropriately.</blockquote>
<p>See geometry use definitions at
<strong>IfcDoorTypeOperationEnum</strong> for the correct usage of opening
symbols for different operation types.</p>
<p class="use-head">Material Use Definition</p>
<p>The material of the <span class="self-ref">IfcDoorType</span> is defined by the
<strong>IfcMaterialConstituentSet</strong> or as fall back by
<strong>IfcMaterial</strong> and attached by the
<strong>IfcRelAssociatesMaterial</strong><i>.RelatingMaterial</i>. It is
accessible by the inverse <i>HasAssociations</i>
relationship.</p>
<p>The following keywords for
<i>IfcMaterialConstituentSet.MaterialConstituents[n].Name</i>
shall be used:</p>
<ul>
<li>'Lining' - to indicate that the material constituent applies
to to the door lining</li>
<li>'Framing' - to indicate that the material constituent applies
to to the door framing, if not provided, the 'Lining' material
information applied to frams as well</li>
<li>'Glazing' - to indicate that the material constituent applies
to to the glazing as well</li>
</ul>
<p>If the fall back single <strong>IfcMaterial</strong> is referenced, it
applies to the lining and framing of the door.</p>

<p class="use-head">Property Set Use Definition</b></u>:</p>
<p>The shared property sets relating to the <span class="self-ref">IfcDoorType</span>
are defined by the <strong>IfcPropertySet</strong> and are attached by the
<i>HasPropertySets</i> attribute. The following property set
definitions specific to the <span class="self-ref">IfcDoorType</span> are part of this
IFC release:</p>
<blockquote class="note">
NOTE&nbsp; There is no differentiation between
properties within the property set that are only assignable to
<span class="self-ref">IfcDoorType</span> and those that are only assignable to
<strong>IfcDoor</strong>. If the same property is assigned to the
<span class="self-ref">IfcDoorType</span> and the <strong>IfcDoor</strong> being an occurrence of
the <span class="self-ref">IfcDoorType</span>, then the occurrence property overrides
the type property.</blockquote>
<ul>
<li><a href="../../ifcsharedbldgelements/pset/pset_doorcommon.htm"
target="info">Pset_DoorCommon</strong>: common property set for all
door types.</li>
<li><a href=
"../../ifcsharedbldgelements/pset/pset_doorwindowglazingtype.htm"
target="info">Pset_DoorWindowGlazingType</strong>: specific property
set for the glazing properties of the door type glazing</li>
<li><a href=
"../../ifcsharedbldgelements/pset/pset_doorwindowshadingtype.htm"
target="info">Pset_DoorWindowShadingType</strong>: specific property
set for the shading properties of the door type shading</li>
</ul>
<p>Two subtypes of <strong>IfcPreDefinedPropertySet</strong> are applicable
to <span class="self-ref">IfcDoorType</span>:</p>
<ul>
<li><strong>IfcDoorLiningProperties</strong> - a single instance to define
the shape parameters of the door lining</li>
<li><strong>IfcDoorPanelProperties</strong> - one or several instances to
define the shape parameters of the door panel(s)</li>
</ul>
<p class="use-head">Geometry Use Definitions</b></u>:</p>
<p>The <span class="self-ref">IfcDoorType</span> may define the common shape of door
occurrences. The common shape can be defined by</p>
<ul>
<li>applying shape parameters defined within the associated
<strong>IfcDoorLiningProperties</strong> and <strong>IfcDoorPanelProperties</strong>
applied to the 'Profile' geometric representation. It is only
applicable if the <span class="self-ref">IfcDoorType</span> has only occurrences of type
<strong>IfcDoorStandardCase</strong> (See geometric use definition of
<strong>IfcDoorStandardCase</strong> for further information).</li>
<li>applying the <i>RepresentationMaps</i> attribute to refer to
a list of <strong>IfcRepresentationMap</strong>'s, that allow for multiple
geometric representations (e.g. with
<strong>IfcShapeRepresentation</strong>'s having an
<i>RepresentationIdentifier</i> 'Box', 'Profile', 'FootPrint', or
'Body')

<blockquote class="note">
NOTE&nbsp; The product shape representations are
defined as <i>RepresentationMaps</i> (attribute of the supertype
<strong>IfcTypeProduct</strong>), which get assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[n]</i> being an
<strong>IfcMappedItem</strong>. See <strong>IfcTypeProduct</strong> for further
information.</small></blockquote>
<blockquote class="note">NOTE&nbsp; The values of attributes
<i>RepresentationIdentifier</i> and <i>RepresentationType</i> of
<strong>IfcShapeRepresentation</strong> are restricted in the same way as
those for <strong>IfcDoor</strong> and
<strong>IfcDoorStandardCase</strong>
</blockquote>

</li>
</ul>
<h1>IfcDoorTypeEnum</h1>
                                
                                <h1>IfcDoorTypeOperationEnum</h1>
                                
                                <h1>IfcMember</h1>
                                
                                <p>An <span class="self-ref">IfcMember</span> is a
structural member designed to carry loads between or beyond
points of support. It is not required to be load bearing. The
orientation of the member (being horizontal, vertical or sloped)
is not relevant to its definition (in contrary to <strong>IfcBeam</strong>
and <strong>IfcColumn</strong>). An <span class="self-ref">IfcMember</span> represents a linear
structural element from an architectural or structural modeling
point of view and shall be used if it cannot be expressed more
specifically as either an <strong>IfcBeam</strong> or an
<strong>IfcColumn</strong>.</p>

<blockquote class="note">
NOTE&nbsp; The representation of a member in a structural analysis model is provided by <strong>IfcStructuralCurveMember</strong> being part of an <strong>IfcStructuralAnalysisModel</strong>.</blockquote>

<p>The IFC specification provides two entities for member
occurrences:</p>
<ul>
<li><strong>IfcMemberStandardCase</strong> used for all occurrences of
members, that have a profile defined that is swept along a
directrix. The profile might be changed uniformly by a taper
definition along the directrix. The profile parameter and its
cardinal point of insertion can be fully described by the
<strong>IfcMaterialProfileSetUsage</strong>. These beams are always
represented geometricly by an 'Axis' and a 'SweptSolid' or
'AdvancedSweptSolid' shape representation (or by a 'Clipping'
geometry based on the swept solid), if a 3D geometric
representation is assigned. In addition they have to have a
corresponding <strong>IfcMaterialProfileSetUsage</strong> assigned.

<blockquote class="note">
NOTE&nbsp; View definitions and implementer agreements may further constrain the applicable geometry types, such as by excluding tapering from an <strong>IfcMemberStandardCase</strong> implementation.
</blockquote>

</li>
<li><span class="self-ref">IfcMember</span> used for all other occurrences of members,
particularly for members with changing profile sizes along the
extrusion, or members defined by non-linear extrusion, or members
having only 'Brep', or 'SurfaceModel' geometry.</li>
</ul>


<h1>IfcMemberStandardCase</h1>
                                
                                <p>The standard member,
<span class="self-ref">IfcMemberStandardCase</span>, defines a member with certain
constraints for the provision of material usage, parameters and
with certain constraints for the geometric representation. The
<span class="self-ref">IfcMemberStandardCase</span> handles all cases of members,
that:</p>
<ul>
<li>have a reference to the <strong>IfcMaterialProfileSetUsage</strong>
defining the material profile association of the member with the
cardinal point of its insertion relative to the local
placement.</li>
<li>are based on a sweep of a planar profile, or set of profiles,
as defined by the <strong>IfcMaterialProfileSet</strong></li>
<li>have an 'Axis' shape representation with constraints provided
below in the geometry use definition</li>
<li>have a 'Body' shape representation with constraints provided
below in the geometry use definition</li>
<li>have a start profile, or set of profiles, that is swept along
the directrix and might be changed uniformly by a taper
definition</li>
<li>are consistent in using the correct cardinal point offset of
the profile as compared to the 'Axis' and 'Body' shape
representation</li>
<li>are extruded perpendicular to the profile definition
plane</li>
</ul>

<blockquote class="note">
NOTE&nbsp; View definitions and implementer agreements may further constrain the applicable geometry types, such as by excluding tapering from an <span class="self-ref">IfcMemberStandardCase</span> implementation.
</blockquote>




<h1>IfcMemberType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcMemberType</span> defines commonly shared information for
occurrences of members. Members are predominately linear building
elements, often forming part of a structural system. The
orientation of the member (being horizontal, vertical or sloped)
is not relevant to its definition (in contrary to beam and
column). The set of shared information may include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common profile definitions</li>
<li>common shape representations</li>
</ul>
<p>It is used to define a member specification, or member style
(the specific product information that is common to all
occurrences of that member type). Member types may be exchanged
without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcMemberType</span> within building models
are represented by instances of <strong>IfcMemberStandardCase</strong> if
the <span class="self-ref">IfcMemberType</span> has a single associated
<strong>IfcMaterialProfileSet</strong>; otherwise they are represented by
instances of <strong>IfcMember</strong>. Occurrences of the
<span class="self-ref">IfcMemberType</span> within structural analysis models are
represented by instances of <strong>IfcStructuralCurveMember</strong>, or
its applicable subtypes.</p>



<h1>IfcMemberTypeEnum</h1>
                                
                                <h1>IfcNoOfLayers</h1>
                                
                                <h1>IfcPlate</h1>
                                
                                <p>An <span class="self-ref">IfcPlate</span> is a planar and often flat part with constant thickness. A plate may carry loads between or beyond points of support, or provide stiffening. The location of the plate (being horizontal, vertical or sloped) is not relevant to its definition (in contrary to <strong>IfcWall</strong> and <strong>IfcSlab</strong> (as floor slab)).Â </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
thin, rigid, flat, metal product, of a thickness greater than that of a sheet.</blockquote>

<p>Plates areÂ normally made of steel, other metallic material, or by glass panels. However the definition of <span class="self-ref">IfcPlate</span> is material independent and specific material information shall be handled by using <i>IfcAssociatesMaterial</i> to assign a material specification to the <span class="self-ref">IfcPlate</span>.
</p>

<blockquote class="note">
NOTE&nbsp;Â Although not necessarily, plates are often add-on parts. This is represented by the <strong>IfcRelAggregates</strong> decomposition mechanism used to aggregate parts, such as <span class="self-ref">IfcPlate</span>, into a container element such as <strong>IfcElementAssembly</strong> or <strong>IfcCurtainWall</strong>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; The representation of a plate in a structural analysis model is provided by <strong>IfcStructuralSurfaceMember</strong> being part of an <strong>IfcStructuralAnalysisModel</strong>.
</blockquote>

<p>An instance <span class="self-ref">IfcPlate</span> should preferably get its
geometric representation and material assignment through the type
definition by <strong>IfcPlateType</strong> assigned using the
<strong>IfcRelDefinesByType</strong> relationship. This allows identical
plates in a construction to be represented by the same instance
of <strong>IfcPlateType</strong>.</p>
<p>A plate may have openings, such as voids or recesses. They are
defined by an <strong>IfcOpeningElement</strong> attached to the plate
using the inverse relationship <i>HasOpenings</i> pointing to
<strong>IfcRelVoidsElement</strong>. The position number of a plate as
often used in steel construction is assigned through the
attribute <i>IfcElement.Tag</i></p>
<p>The IFC specification provides two entities for plate
occurrences:</p>
<ul>
<li><strong>IfcPlateStandardCase</strong> used for all occurrences of
plates, that are prismatic and where the thickness parameter can
be fully described by the <strong>IfcMaterialLayerSetUsage</strong>. These
plates are always represented geometrically by a 'SweptSolid'
geometry (or by a 'Clipping' geometry based on 'SweptSolid'), if
a 3D geometric representation is assigned. In addition they have
to have a corresponding <strong>IfcMaterialLayerSetUsage</strong>
assigned.</li>
<li><span class="self-ref">IfcPlate</span> used for all other occurrences of plates,
particularly for plates with changing thickness, or plates with
non planar surfaces, and plates having only 'SurfaceModel' or
'Brep' geometry.</li>
</ul>


<p><b><i>Geometric Representation</i></b></p>
<p>Currently, the <font color="#0000FF">'Surface'</font>,
<font color="#0000FF">'FootPrint'</font>, 'Body', and 'Box'
representations are supported. The 'Box' representation includes
the representation type 'BoundingBox' and is explained at
<strong>IfcBuildingElement</strong>.</p>


<h1>IfcPlateStandardCase</h1>
                                
                                <p>The standard plate,
<span class="self-ref">IfcPlateStandardCase</span>, defines a plate with certain
constraints for the provision of material usage, parameters and
with certain constraints for the geometric representation. The
<span class="self-ref">IfcPlateStandardCase</span> handles all cases of plates, that:</p>
<ul>
<li>have a reference to the <strong>IfcMaterialLayerSetUsage</strong>
defining the material layers of the plate with thicknesses</li>
<li>are based on an extrusion of a planar surface as defined by the
plate profile</li>
<li>have a constant thickness along the extrusion direction</li>
<li>are consistent in using the correct material layer set offset
to the base planar surface in regard to the shape
representation</li>
<li>are extruded perpendicular to the plane surface</li>
</ul>
<p>The definitions of plate openings and niches are the same as
given at the supertype <strong>IfcPlate</strong>. The same agreements to the
special types of plates, as defined in the <i>PredefinedType</i>
attribute apply as well.</p>


<h1>IfcPlateType</h1>
                                
                                <p>The element type <span class="self-ref">IfcPlateType</span> defines commonly shared
information for occurrences of plates. The set of shared
information may include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common material layer definitions</li>
<li>common shape representations</li>
</ul>

<blockquote class="note">
NOTE&nbsp; It is illegal to share shape representations as representation maps for occurrences of <strong>IfcPlateStandardCase</strong>.
</blockquote>

<p>It is used to define a plate specification (i.e. the specific
product information, that is common to all occurrences of that
product type). Plate types may be exchanged without being already
assigned to occurrences.</p>
<blockquote class="note">NOTE&nbsp; The product representations are defined as
representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element occurrence
instance through the <i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.</blockquote>
<p>The occurrences of the <span class="self-ref">IfcPlateType</span> within building
models are represented by instances of <strong>IfcPlateStandardCase</strong>
if the <span class="self-ref">IfcPlateType</span> has a single associated
<strong>IfcMaterialLayerSet</strong>; otherwise they are represented by
instances of <strong>IfcPlate</strong>.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The material assignment, if provided using the
<strong>IfcRelAssociatesMaterial</strong> relationship, shall not reference
the <strong>IfcMaterialLayerSetUsage</strong>.</li>
</ol>


<h1>IfcPlateTypeEnum</h1>
                                
                                <h1>IfcRailing</h1>
                                
                                <p>The railing is a frame assembly adjacent to human circulation spaces and at some space boundaries
where it is used in lieu of walls or to compliment walls. Designed to aid humans, either as an optional physical support, or to prevent injury by falling.</p>



<h1>IfcRailingType</h1>
                                
                                <p>The building element type <b>IfcRailingType</b> defines commonly shared information for occurrences of railings. The set of shared information may include: 
<ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul>

<p>It is used to define a railing type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcRailingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcRailingType</b> are represented by instances of <strong>IfcRailing</strong>. 
Refer to the documentation at <strong>IfcRailing</strong> for supported property sets, materials, and composition.</p>



<h1>IfcRailingTypeEnum</h1>
                                
                                <h1>IfcRamp</h1>
                                
                                <p>A ramp is a vertical passageway which provides a human circulation link between one floor level and another floor level at a different elevation. It may include a landing as an intermediate floor slab. A ramp normally does not include steps.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
Inclined way or floor joining two surfaces at different levels.</blockquote>

<p> The <span class="self-ref">IfcRamp</span> shall either be represented:</p>
<ul>
<li>as a ramp assembly that aggregates all components (ramp flight, landing, etc.) with own representations, or</li>
<li>as a single ramp without decomposition including all representations directly at the ramp entity.</li>
</ul>

<blockquote class="note">NOTE&nbsp; In case of an <span class="self-ref">IfcRamp</span> being the aggregate of all components
of the ramp the aggregation is handled by the <strong>IfcRelAggregates</strong> relationship, relating an <span class="self-ref">IfcRamp</span>
with the related <strong>IfcRampFlight</strong> and landings, <strong>IfcSlab</strong> with PredefinedType=LANDING. <strong>IfcRailing</strong>'s belonging to the ramp may also be included into the aggregation.</blockquote>

<p>The geometric representation of <span class="self-ref">IfcRamp</span> is given by the
<strong>IfcProductDefinitionShape</strong>, allowing multiple geometric 
representations. Independent 'Body' geometric representations should 
only be used when the <span class="self-ref">IfcRamp</span> is not defined as an
aggregate. If defined as an aggregate, the 'Body' geometric 
representation is the sum of the representation of the components 
within the ramp aggregate.</p>



<h1>IfcRampFlight</h1>
                                
                                <p>A ramp comprises a single inclined segment, or several inclined segments that are connected by a horizontal segment, refered to as a landing. A ramp flight is the single inclined segment and part of the ramp construction. In case of single flight ramps, the ramp flight and the ramp are identical.</p>

<blockquote class="note">NOTE&nbsp; A single flight ramp is represented by an <strong>IfcRamp</strong> instance without using aggregation and by utilizing the product shape representation directly at <strong>IfcRamp</strong>.</blockquote>

<p>An <span class="self-ref">IfcRampFlight</span> is an aggregated part of an <strong>IfcRamp</strong> realized through the <strong>IfcRelAggregates</strong> relationship, the ramp flight is therefore included in the set of <i>IfcRelAggregates.RelatedObjects</i>. </p>

<p>An <span class="self-ref">IfcRampFlight</span> connects the floor slab of zero to two different storeys
(or partial storeys or landings) within a building. The connection relationship between the <span class="self-ref">IfcRampFlight</span> and the <strong>IfcSlab</strong> is expressed using the <strong>IfcRelConnectsElements</strong> relationship.</p>



<h1>IfcRampFlightType</h1>
                                
                                <p>The building element type <b>IfcRampFlightType</b> defines commonly shared information for occurrences of ramp flights. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a ramp flight type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcRampFlightType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcRampFlightType</b> are represented by instances of <strong>IfcRampFlight</strong>. 
Refer to the documentation at <strong>IfcRampFlight</strong> for supported property sets, materials, and composition.</p>
  

<h1>IfcRampFlightTypeEnum</h1>
                                
                                <h1>IfcRampType</h1>
                                
                                <p>The building element type <b>IfcRampType</b> defines commonly shared information for occurrences of ramps. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a ramp type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcRampType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcRampType</b> are represented by instances of <strong>IfcRamp</strong>. 
Refer to the documentation at <strong>IfcRamp</strong> for supported property sets, materials, and composition.</p>

      

<h1>IfcRampTypeEnum</h1>
                                
                                <h1>IfcRelConnectsPathElements</h1>
                                
                                <p>
      The <span class="self-ref">IfcRelConnectsPathElements</span> relationship provides
      the connectivity information between two elements, which have
      path information.
    </p>
    <p>
      The objectified relationship provides the additional
      information required to describe the connection between two
      path based elements that might have single or multiple layers
      of material. The connection type specifies where at the path
      based element a connection is given (at the start, in the
      middle or at the end).
    </p>
    <p>
      The connection is described by a connection geometry, given
      within the object coordinate systems of the
      <i>RelatingElement</i> and of the <i>RelatedElement</i>. In
      case of <strong>IfcWallStandardCase</strong> as the
      <i>RelatingElement</i> and <i>RelatedElement</i> the
      connection geometry is provided by the subtype
      <strong>IfcConnectionCurveGeometry</strong>. Both curves indicate the
      so called "end cap", i.e. the curve that trims the wall outer
      edges (being parallel along the wall axis) at the end.
    </p>
    
    
    <p>
      &nbsp;
    </p>
    <table cellpadding="2" cellspacing="2">
      <tr valign="top">
        <td valign="top" align="left" width="410">
          <img src="../../../figures/IfcRelConnectsPathElements-fig1.png"
          alt="wall connection" width="400" height="300" border=
          "0">
        </td>
				<td>
      <span class="self-ref">IfcRelConnectsPathElements</span> with the
      <i>ConnectionGeometry</i> of type
      <strong>IfcConnectionCurveGeometry</strong>. The example shows the
      connection relationship between two instances of
      <strong>IfcWallStandardCase</strong> using the
      <span class="self-ref">IfcRelConnectsPathElements</span> relationship. The
      <i>ConnectionCurveGeometry</i> defines the
      <i>CurveOnReleatingElement</i> and
      <i>CurveOnRelatedElement</i>, both are of type
      <strong>IfcPolyline</strong>.</td>
      </tr>
      <tr>
        <td>
          <p class="figure">
        </td>
        <td></td>
      </tr>
    </table>
    <table cellpadding="2" cellspacing="2">
      <tr valign="top">
        <td valign="top" align="left" width="410">
          <img src="../../../figures/IfcRelConnectsPathElements-fig3.png"
          alt="wall connection" width="400" height="260" border=
          "0">
        </td>
        <td valign="top" align="left">
          &nbsp;<img src="../../../figures/IfcRelConnectsPathElements-fig2.png" alt=
          "wall connection" width="320" height="200" border="0">
        </td>
      </tr>
      <tr valign="top">
        <td valign="top" align="left" width="410">
          <p class="figure">
        </td>
        <td valign="top" align="left" width="400">
          <p class="figure">
        </td>
      </tr>
    </table>
    <p>
      
      <span class="self-ref">IfcRelConnectsPathElements</span> for a "T" type connection
      between two instances of <strong>IfcWallStandardCase</strong>.
    </p>
    <p>
      
      <span class="self-ref">IfcRelConnectsPathElements</span> for a "L" type connection
      between two instances of <strong>IfcWallStandardCase</strong>.
    </p>
    <blockquote class="note">
      NOTE&nbsp; The two wall axes connect in each case.
    </blockquote>
<h1>IfcRelCoversBldgElements</h1>
                                
                                <p>The <span class="self-ref">IfcRelCoversBldgElements</span> relationship is an
objectified relationship between an element and one to many
coverings, which cover that element.</p>
<blockquote class="note">NOTE&nbsp; The definition of
<i>IfcCoverings</i> include both the coverings of building
elements, such as flooring or cladding. and the covering of
distribution elements, such as wrapping or sleeving.</blockquote>
<p>The IFC specification provides two relationships:</p>
<ul>
<li><span class="self-ref">IfcRelCoversBldgElements</span> to assign coverings to
elements.
<blockquote class="note">NOTE&nbsp; This relationship is now
deprecated and replaced by <strong>IfcRelAggregates</strong>.</blockquote>
</li>
<li><strong>IfcRelCoversSpaces</strong> to assign coverings to spaces<br>
<blockquote class="note">NOTE&nbsp; This relationship is now
deprecated and replaced by
<strong>IfcRelContainedInSpatialStructure</strong>.</blockquote>
</li>
</ul>
<p>Whether the relationship between the covering and the space, or
between the covering and the element, is regarded as primary, has
to be determined within the context of a model view definition.</p>

<blockquote class="deprecated">DEPRECATION&nbsp; The relationship
<span class="self-ref">IfcRelCoversBldgElements</span> shall not be used anymore, use
<strong>IfcRelAggregates</strong> instead.</blockquote>
<h1>IfcRelCoversSpaces</h1>
                                
                                <p>The objectified relationship, <i>IfcRelCoversSpace</i>,
relates a space object to one or many coverings, which faces (or is
assigned to) the space.</p>
<blockquote class="note">NOTE&nbsp; Particularly floorings,
ceilings and wall coverings, such as claddings or tiling are often
considered as space coverings, rather then wall or slab coverings.
In some life cycle phases, such as the operation phase, the
relationship is always made to the space.</blockquote>
<p>The IFC specification provides two relationships:</p>
<ul>
<li><strong>IfcRelCoversBldgElements</strong> to assign coverings to
elements.
<blockquote class="note">NOTE&nbsp; This relationship is now
deprecated and replaced by <strong>IfcRelAggregates</strong>.</blockquote>
</li>
<li><span class="self-ref">IfcRelCoversSpaces</span> to assign coverings to spaces<br>
<blockquote class="note">NOTE&nbsp; This relationship is now
deprecated and replaced by
<strong>IfcRelContainedInSpatialStructure</strong>.</blockquote>
</li>
</ul>
<p>Whether the relationship between the covering and the space, or
between the covering and the element, is regarded as primary, has
to be determined within the context of a model view definition.</p>

<blockquote class="deprecated">DEPRECATION&nbsp; The relationship
<i>IfcRelCoversSpace</i> shall not be used anymore, use
<strong>IfcRelContainedInSpatialStructure</strong> instead.</blockquote>
<h1>IfcRoof</h1>
                                
                                <p>A roof is the covering of the top part of a building, it protects the building against the effects of wheather.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
construction enclosing the building from above.</blockquote>

<p>The <span class="self-ref">IfcRoof</span> is a description of the total roof. It acts as a container entity, that aggregates all components of the roof, it represents. The aggregation is handled via the <strong>IfcRelAggregates</strong> relationship, relating an <span class="self-ref">IfcRoof</span> with the related roof elements, like slabs (represented by <strong>IfcSlab</strong>), rafters and purlins (represented by <strong>IfcBeam</strong>), or other included roofs, such as dormers (represented by <span class="self-ref">IfcRoof</span>).</p>

<p>The geometric representation of <span class="self-ref">IfcRoof</span> is given by the
<strong>IfcProductDefinitionShape</strong>, allowing multiple geometric
representations. Independent 'Body' geometric representations should 
only be used when the <span class="self-ref">IfcRoof</span> is not defined as an
 aggregate. If defined as an aggregate, the 'Body' geometric 
representation is the sum of the representation of the components 
within the aggregate.</p>


<blockquote class="note">NOTE&nbsp; View definitions and implementer
agreements may restrict the <span class="self-ref">IfcRoof</span> to not have an
independent geometry, but to always require aggregated elements
to represent the shape of the roof.</blockquote>

<blockquote class="note">NOTE&nbsp; If the <span class="self-ref">IfcRoof</span> has aggregated elements to
represent the shape of the roof, then only those elements shall
have openings, not the <span class="self-ref">IfcRoof</span>
itself.</blockquote>




<h1>IfcRoofType</h1>
                                
                                <p>The building element type <b>IfcRoofType</b> defines commonly shared information for occurrences of roofs. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a roof type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcRoofType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcRoofType</b> are represented by instances of <strong>IfcRoof</strong>. 
Refer to the documentation at <strong>IfcRoof</strong> for supported property sets, materials, and composition.</p>



<h1>IfcRoofTypeEnum</h1>
                                
                                <h1>IfcShadingDevice</h1>
                                
                                <p>Shading devices are purpose built devices to protect from the sunlight, from natural light, or screening them from view. Shading devices can form part of the facade or can be mounted inside the building, they can be fixed or operable.</p>

<blockquote class="note">NOTE&nbsp; Also other building elements such as
protruding slabs or balconies can act as shading devices. Those
elements however have another primary purpose and are defined as
<strong>IfcSlab</strong> or by other subtypes of <strong>IfcBuildingElement</strong>.
The particular additional purpose as a shading device is provided
by assigning the property set <i>Pset_ElementShading</i> to those
building elements.</blockquote>



<h1>IfcShadingDeviceType</h1>
                                
                                <p>The building element type <b>IfcShadingDeviceType</b> defines commonly shared information for occurrences of shading devices. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a shading device type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcShadingDeviceType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcShadingDeviceType</b> are represented by instances of <strong>IfcShadingDevice</strong>. 
Refer to the documentation at <strong>IfcShadingDevice</strong> for supported property sets, materials, and composition.</p>



<h1>IfcShadingDeviceTypeEnum</h1>
                                
                                <h1>IfcSlab</h1>
                                
                                <p>A slab is a component of the construction that normally encloses a space vertically. The slab may provide the lower support (floor) or upper construction (roof slab) in any space in a building.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1<br> 
thick, flat or shaped component, usually larger than 300 mm square, used to form a covering or projecting from a building.</blockquote>

<p> Only the core or constructional part of this construction is considered to be a slab. The upper finish (flooring, roofing) and the lower finish (ceiling, suspended ceiling) are considered to be coverings. A special type of slab is the landing, described as a floor section to which one or more stair flights or ramp flights connect.</p>

<blockquote class="note">
NOTE&nbsp; There is a representation of slabs for structural analysis provided by a proper subtype of
<strong>IfcStructuralMember</strong> being part of the <strong>IfcStructuralAnalysisModel</strong>.
</blockquote>
<blockquote class="note">
NOTE&nbsp;Â An arbitrary planar element to which this semantic information is not applicable or irrelevant shall be modeled as <strong>IfcPlate</strong>.
</blockquote>

<p>A slab may have openings, such as floor openings, or recesses.
They are defined by an <strong>IfcOpeningElement</strong> attached to the
slab using the inverse relationship <i>HasOpenings</i> pointing
to <strong>IfcRelVoidsElement</strong>.</p>
<p>There are three entities for slab occurrences:</p>
<ul>
<li><strong>IfcSlabStandardCase</strong> used for all occurrences of slabs,
that are prismatic and where the thickness parameter can be fully
described by the <strong>IfcMaterialLayerSetUsage</strong>. These slabs are
always represented geometrically by a 'SweptSolid' geometry (or
by a 'Clipping' geometry based on 'SweptSolid'), if a 3D
geometric representation is assigned. In addition they have to
have a corresponding <strong>IfcMaterialLayerSetUsage</strong>
assigned.</li>
<li><strong>IfcSlabElementedCase</strong> used for occurrences of slabs
which are aggregated from subordinate elements, following
specific decomposition rules expressed by the mandatory use of
<strong>IfcRelAggregates</strong> relationship.</li>
<li><span class="self-ref">IfcSlab</span> used for all other occurrences of slabs,
particularly for slabs with changing thickness, or slabs with non
planar surfaces, and slabs having only 'SweptSolid' or 'Brep'
geometry.</li>
</ul>



<h1>IfcSlabElementedCase</h1>
                                
                                <p>The <span class="self-ref">IfcSlabElementedCase</span>
defines a slab with certain constraints for the provision of its
components. The <span class="self-ref">IfcSlabElementedCase</span> handles all cases of
slabs, that are decomposed into parts:Â </p>
<ul>
<li>having components being assigned to the
<span class="self-ref">IfcSlabElementedCase</span> using the <strong>IfcRelAggregates</strong>
relationship accessible by the inverse relationship
<i>IsDecomposedBy</i>.</li>
<li>applying the constraint that the parts within the
decomposition shall be of type <strong>IfcBeam</strong>, <strong>IfcMember</strong>,
<strong>IfcPlate</strong>, <strong>IfcBuildingElementPart</strong> or
<strong>IfcBuildingElementProxy</strong>.</li>
</ul>



<p class="use-head">Voiding Use Definition</b></u>:</p>

<p>As shown in 

<table border="0" cellpadding="2" cellspacing="2" summary="voiding">
<tr><td valign="top"><img src="../../../figures/IfcSlabElementedCase_fig01.png" alt="voiding" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSlabStandardCase</h1>
                                
                                <p>The standard slab, <span class="self-ref">IfcSlabStandardCase</span>, defines a slab with certain constraints
for the provision of material usage, parameters and with certain constraints for the geometric representation. The
<span class="self-ref">IfcSlabStandardCase</span> handles all cases of slabs, that:</p>
<ul>
<li>have a reference to the <strong>IfcMaterialLayerSetUsage</strong> defining the material layers of the slab with thicknesses</li>
<li>are based on an extrusion of a planar surface as defined by the slab profile</li>
<li>have a constant thickness along the extrusion direction</li>
<li>are consistent in using the correct material layer set offset to the base planar surface in regard to the shape
representation</li>
<li>are extruded either perpendicular or slanted to the plane surface</li>
</ul>
<p>The definitions of slab openings and niches are the same as given at the supertype <strong>IfcSlab</strong>. The same agreements to the
special types of slabs, as defined in the <i>PredefinedType</i> attribute apply as well.</p>


<blockquote class="note">NOTE&nbsp; If the <span class="self-ref">IfcSlabStandardCase</span> is of type Landing
and is used within an <strong>IfcStair</strong> or <strong>IfcRamp</strong>, the
special agreements to handle stair and ramp geometry will also
affect the geometric representation of the
<span class="self-ref">IfcSlabStandardCase</span>.</blockquote>




 <h1>IfcSlabType</h1>
                                
                                <p>The element type <span class="self-ref">IfcSlabType</span> defines commonly shared
information for occurrences of slabs. The set of shared information
may include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common material layer definitions</li>
<li>common shape representations</li>
</ul>

<blockquote class="note">
NOTE&nbsp; It is illegal to share shape representations as representation maps for occurrences of <strong>IfcSlabStandardCase</strong>.
</blockquote>

<p>It is used to define a slab specification (i.e. the specific
product information, that is common to all occurrences of that
product type). Slab types may be exchanged without being already
assigned to occurrences.</p>

<blockquote class="note">
NOTE&nbsp; The product representations are defined as
representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element occurrence
instance through the <i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.
</blockquote>

<p>The occurrences of the <span class="self-ref">IfcSlabType</span> within building models
are represented by instances of <strong>IfcSlabStandardCase</strong> if the
<span class="self-ref">IfcSlabType</span> has a single associated
<strong>IfcMaterialLayerSet</strong>; otherwise they are represented by
instances of <strong>IfcSlab</strong>, or <strong>IfcSlabElementedCase</strong>.</p>



<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The material assignment, if provided using the
<strong>IfcRelAssociatesMaterial</strong> relationship, shall not reference
the <strong>IfcMaterialLayerSetUsage</strong>.</li>
</ol>
<h1>IfcSlabTypeEnum</h1>
                                
                                <h1>IfcStair</h1>
                                
                                <p>A stair is a vertical passageway allowing occupants to walk (step) from one floor level to another floor
level at a different elevation. It may include a landing as an intermediate floor slab.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
Construction comprising a succession of horizontal stages (steps or landings) that make it
possible to pass on foot to other levels.</blockquote>

<p> The <span class="self-ref">IfcStair</span> shall either be represented:</p>
<ul>
<li>as a stair assembly entity that aggregates all components (stair flight, landing, etc. with own representations), or</li>
<li>as a single stair entity without decomposition including all representation directly at the stair entity.</li>
</ul>

<blockquote class="note">NOTE&nbsp; In case of an <span class="self-ref">IfcStair</span> being the aggregate of all components
of the stair the aggregation is handled by the <strong>IfcRelAggregates</strong> relationship, relating an <span class="self-ref">IfcStair</span>
with the related <strong>IfcStairFlight</strong> and landings, <strong>IfcSlab</strong> with PredefinedType=LANDING. <strong>IfcRailing</strong>'s belonging to the stair may also be included into the aggregation.</blockquote>

<blockquote class="note">NOTE&nbsp; The 'Body' geometric representation shall only be provided if the
<span class="self-ref">IfcStair</span> has no components defined (empty set of
 <i>SELF\IfcObject.IsDecomposedBy</i>).</blockquote>




<h1>IfcStairFlight</h1>
                                
                                <p>A stair flight is an assembly of
building components in a single "run" of stair steps (not
interrupted by a landing). The stair steps and any stringers are
included in the stair flight. A winder is also regarded a part of
a stair flight.</p>
<p>An <span class="self-ref">IfcStairFlight</span> is normally aggregated by an
<strong>IfcStair</strong> through the <strong>IfcRelAggregates</strong> relationship,
the stair flight is then included in the set of
<i>IfcRelAggregates.RelatedObjects</i>. An <span class="self-ref">IfcStairFlight</span>
normally connects the floor slab of zero to two different storeys
(or partial storeys, or landings) within a building. The
connection relationship between the <span class="self-ref">IfcStairFlight</span> and the
<strong>IfcSlab</strong> is expressed using the
<strong>IfcRelConnectsElements</strong> relationship.</p>



<p>Currently, the 'Axis', 'FootPrint', 'Body', and 'Box'
representations are supported. The 'Box' representation includes
the representation type 'BoundingBox' and is explained at
<strong>IfcBuildingElement</strong>.</p>
<ul>
<li><u>Axis</u>: A two-dimensional open curve
<strong>IfcBoundedCurve</strong> defining the walking line for the stair
flight.</li>
<li><u>FootPrint</u>: A geometric curve set defining the footing
print, including the boundary of the stair flight.</li>
<li><u>Body</u>: A solid representation defining the 3D shape of
the stair flight</li>
</ul>

<h1>IfcStairFlightType</h1>
                                
                                <p>The building element type <b>IfcStairFlightType</b> defines commonly shared information for occurrences of stair flights. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a stair flight type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcStairFlightType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcStairFlightType</b> are represented by instances of <strong>IfcStairFlight</strong>. 
Refer to the documentation at <strong>IfcStairFlight</strong> for supported property sets, materials, and composition.</p>
  

<h1>IfcStairFlightTypeEnum</h1>
                                
                                <h1>IfcStairType</h1>
                                
                                <p>The building element type <b>IfcStairType</b> defines commonly shared information for occurrences of stairs. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a stair type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcStairType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcStairType</b> are represented by instances of <strong>IfcStair</strong>. 
Refer to the documentation at <strong>IfcStair</strong> for supported property sets, materials, and composition.</p>



<h1>IfcStairTypeEnum</h1>
                                
                                <h1>IfcWall</h1>
                                
                                <p>The wall represents a vertical construction that bounds or subdivides spaces. Wall are usually vertical, or nearly vertical, planar elements, often designed to bear structural loads. A wall is howeverÂ not required to be load bearing.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: 
vertical construction usually in masonry or in concrete which bounds or subdivides a construction works and fulfils a load bearing or retaining function.</blockquote>

<blockquote class="note">
NOTE&nbsp; There is a representation of walls
for structural analysis provided by a proper subtype of
<strong>IfcStructuralMember</strong> being part of the
<strong>IfcStructuralAnalysisModel</strong>.
</blockquote>
<blockquote class="note">
NOTE&nbsp; An arbitrary planar element to which this semantic information is not applicable (is not predominantly vertical), shall be modeled as <strong>IfcPlate</strong>.
</blockquote>

<p>A wall may have openings, such as wall openings, openings used
for windows or doors, or niches and recesses. They are defined by
an <strong>IfcOpeningElement</strong> attached to the wall using the
inverse relationship <i>HasOpenings</i> pointing to
<strong>IfcRelVoidsElement</strong>.</p>
<p>There are three entities for wall occurrences:</p>
<ul>
<li><strong>IfcWallStandardCase</strong> Â used for all occurrences of
walls, that have a non-changing thickness along the wall path and
where the thickness parameter can be fully described by a
material layer set. These walls are always represented
geometrically by an 'Axis' and a 'SweptSolid' shape
representation (or by a 'Clipping' geometry based on
'SweptSolid'), if a 3D geometric representation is assigned. In
addition they have to have a corresponding
<strong>IfcMaterialProfileSetUsage</strong> assigned.</li>
<li><strong>IfcWallElementedCase</strong> used for occurrences of walls
which are aggregated from subordinate elements, following
specific decomposition rules expressed by the mandatory use of
<strong>IfcRelAggregates</strong> relationship.</li>
<li><span class="self-ref">IfcWall</span> Â used for all other occurrences of wall,
particularly for walls with changing thickness along the wall
path (e.g. polygonal walls), or walls with a non-rectangular
cross sections (e.g. L-shaped retaining walls), and walls having
an extrusion axis that is unequal to the global Z axis of the
project (i.e. non-vertical walls), or walls having only 'Brep',
or 'SurfaceModel' geometry.</li>
</ul>


<h1>IfcWallElementedCase</h1>
                                
                                <p>The <span class="self-ref">IfcWallElementedCase</span>
defines a wall with certain constraints for the provision of its
components. The <span class="self-ref">IfcWallElementedCase</span> handles all cases of
walls, that are decomposed into parts:Â </p>
<ul>
<li>having components being assigned to the
<span class="self-ref">IfcWallElementedCase</span> using the <strong>IfcRelAggregates</strong>
relationship accessible by the inverse relationship
<i>IsDecomposedBy</i>.</li>
<li>applying the constraint that the parts within the
decomposition shall be of type <strong>IfcMember</strong>, <strong>IfcPlate</strong>,
<strong>IfcBuildingElementPart</strong> or
<strong>IfcBuildingElementProxy</strong>.</li>
</ul>


<p class="use-head">Property Set Use Definition</b></u>:</p>
<p>The property sets relating to the <span class="self-ref">IfcWallElementedCase</span>
are defined at the supertype <strong>IfcWall</strong>.</p>
<blockquote class="note">NOTE&nbsp; The parts within the decomposition
relationship may define their own property
sets.</blockquote>
<p class="use-head">Quantity Use Definition</b></u>:</p>
<p>The quantities relating to the <span class="self-ref">IfcWallElementedCase</span> are
defined at the supertype <strong>IfcWall</strong>.</p>
<blockquote class="note">NOTE&nbsp; The parts within the decomposition
relationship may define their own individual
quantities.</blockquote>

<p class="use-head">Voiding Use Definition</b></u>:</p>

<p>As shown in 

<table border="0" cellpadding="2" cellspacing="2" summary="voiding">
<tr><td valign="top"><img src="../../../figures/IfcWallElementedCase_fig01.png" alt="voiding" border="0"></td></tr>
<tr><td><p class="figure">
</table>

<p><b><i>Geometric Representation</i></b></p>
<p>The standard geometric representation of
<span class="self-ref">IfcWallElementedCase</span> is defined using the following
multiple shape representations for its definition:</p>
<ul>
<li><u>Axis</u>: A two-dimensional open curve being a subtype of
<strong>IfcBoundedCurve</strong> defining the axis for the elemented wall.
It maybe used as a simplified representation directly at the
elemented wall.</li>
<li><u>Surface</u>: A three-dimensional surface being a subtype
of <strong>IfcBoundedSurface</strong> defining the reference surface for
the elemented wall. It maybe used as a simplified representation
directly at the elemented wall.</li>
</ul>


<h1>IfcWallStandardCase</h1>
                                
                                <p>The <span class="self-ref">IfcWallStandardCase</span> defines a wall with certain
constraints for the provision of parameters and with certain
constraints for the geometric representation. The
<span class="self-ref">IfcWallStandardCase</span> handles all cases of walls, that are
extruded vertically:</p>
<ul>
<li>along the positive z axis of the wall object coordinate system,
and</li>
<li>along the positve z axis of the global (world) coordinate
system</li>
</ul>
<p>and have a single thickness along the path for each wall layer,
i.e.:</p>
<ul>
<li>parallel sides for straight walls</li>
<li>co-centric sides for curved walls.</li>
</ul>
<p>and have either:</p>
<ul>
<li>a straight line axis (straight wall), or</li>
<li>a circular arc axis (round wall).</li>
</ul>
<p>and shall not have</p>
<ul>
<li>aggregated components, that is, parts aggregated to a wall by <strong>IfcRelAggregates</strong></li>
<li>shape representation for 'Body' not being an extrusion, or clipped extrusion</li>
</ul>
<p>The following parameter have to be provided:</p>
<ul>
<li>Wall height, taken from the depth of extrusion, provided by the geometric representation.</li>
<li>Wall thickness, taken from the material layer set usage, attached to the wall</li>
<li>Wall offset from axis, taken from the material layer set usage, attached to the wall</li>
</ul>
<p>The <span class="self-ref">IfcWallStandardCase</span> requires the provision of the
wall axis either a straight line that is parallel to the x-axis of
the object coordinate system, or a circular arc where the tangent
at start is parallel to the x-axis of the object coordinate system.
The direction of the wall axis shall be the positive direction of
that x-axis.</p>
<p>The material of the wall is defined by the
<strong>IfcMaterialLayerSetUsage</strong> and is attached by the
<strong>IfcRelAssociatesMaterial</strong> objectified relationship. It is
accessible by the inverse <i>HasAssociations</i> relationship.
The material layer set usage has to be given (enforced by where
rule).</p>


<p>The standard geometric representation of
<span class="self-ref">IfcWallStandardCase</span> is defined using the following
multiple shape representations for its definition:</p>
<ul>
<li><u>Axis</u>: A two-dimensional open curve
(<strong>IfcBoundedCurve</strong>) defining the axis for the standard wall.
The material layer offset is measured from the wall axis.</li>
<li><u>Body</u>: A Swept Solid Representation or a CSG
representation defining the 3D shape of the standard wall</li>
</ul>
<blockquote class="note">NOTE&nbsp; It is invalid to exhange a
'SurfaceModel', or 'Brep' or 'MappedRepresentation' representation
for the 'Body' shape representation of an
<span class="self-ref">IfcWallStandardCase</span>.</blockquote>



<h1>IfcWallType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcWallType</span> defines commonly shared information for
occurrences of walls. The set of shared information may
include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common material layer definitions</li>
<li>common shape representations</li>
</ul>

<blockquote class="note">
NOTE&nbsp; It is illegal to share shape representations as representation maps for occurrences of <i>IfcWallStandardcase</i>.
</blockquote>

<p>It is used to define a wall specification (i.e. the specific
product information, that is common to all occurrences of that
product type). Wall types may be exchanged without being already
assigned to occurrences.</p>
<blockquote class="note">NOTE&nbsp; The product representations are defined
as representation maps (at the level of the supertype
<strong>IfcTypeProduct</strong>, which gets assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[1]</i> being an
<strong>IfcMappedItem</strong>.</blockquote>
<p>Occurrences of the <span class="self-ref">IfcWallType</span> within building models
are represented by instances of <strong>IfcWallStandardCase</strong> if the
<span class="self-ref">IfcWallType</span> has a single associated
<strong>IfcMaterialLayerSet</strong>; otherwise they are represented by
instances of <strong>IfcWall</strong>, or <strong>IfcWallElementedCase</strong>.
Occurrences of the <span class="self-ref">IfcWallType</span> within structural analysis
models are represented by instances of
<strong>IfcStructuralSurfaceMember</strong>, or its applicable
subtypes.</p>

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The material assignment, if provided using the
<strong>IfcRelAssociatesMaterial</strong> relationship, shall not reference
the <strong>IfcMaterialLayerSetUsage</strong>.</li>
</ol>


<h1>IfcWallTypeEnum</h1>
                                
                                <h1>IfcWindow</h1>
                                
                                <p>The window is a building element that is predominately used to provide natural light and fresh air. It includes vertical opening but also horizontal opening such as skylights or light domes. It includes constructions with swinging, pivoting, sliding, or revolving panels and fixed panels. A window consists of a lining and one or several panels.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1<br> 
Construction for closing a vertical or near vertical opening in a wall or pitched roof that will admit light and may admit fresh air.</blockquote>

<p>The <span class="self-ref">IfcWindow</span> defines a particular occurrence of a window inserted in the spatial context of a project. A window
can:</p>
<ul>
<li>be inserted into an <strong>IfcOpeningElement</strong> using the <strong>IfcRelFillsElement</strong> relationship, then the <span class="self-ref">IfcWindow</span> has an inverse attribute <i>FillsVoids</i> provided,</li>
<li>be part of an element assembly, often an <strong>IfcCurtainWall</strong>, using the <strong>IfcRelAggregates</strong> relationship, then the inverse attribute <i>Decomposes</i> is provided.</li>
<li>or be a "free standing" window, then the <span class="self-ref">IfcWindow</span> has no inverse attributes <i>FillsVoids</i> or <i>Decomposes</i> provided.</li>
</ul>
<blockquote class="note">NOTE&nbsp; View definitions or implementer agreements may restrict the relationship to only include one window (or door) into one opening.</blockquote>

<p>There are two entities for window occurrences:</p>
<ul>
<li><strong>IfcWindowStandardCase</strong> used for all occurrences of windows, that have a 'Profile' shape representation defined to
which a set of shape parameters for lining and framing properties apply. Additionally it requires the provision of an <strong>IfcWindowType</strong> that references one <strong>IfcWindowLiningProperties</strong> and on to many <strong>IfcWindowPanelProperties</strong>. </li>
<li><span class="self-ref">IfcWindow</span> used for all other occurrences of windows, particularly for windows having only 'Brep', or 'SurfaceModel'
geometry without applying shape parameters.</li>
</ul>
<p>The actual parameter of the window and/or its shape is defined at the <span class="self-ref">IfcWindow</span> as the occurrence definition (or project
instance), or by the <strong>IfcWindowType</strong> as the specific definition (or project type). The following parameters are given:</p>
<ul>
<li>at the <span class="self-ref">IfcWindow</span> or <strong>IfcWindowStandardCase</strong> for occurrence specific parameters. The <span class="self-ref">IfcWindow</span> specifies:</li>
<li style="list-style: none">
<ul>
<li>the window width and height</li>
<li>the window opening direction (by the y-axis of the
<i>ObjectPlacement</i>)<br>
<br></li>
</ul>
</li>
<li>at the <strong>IfcWindowType</strong> to
which the <span class="self-ref">IfcWindow</span> is related by the inverse relationship
<i>IsDefinedBy</i> pointing to <strong>IfcRelDefinesByType</strong>, for
type parameters common to all occurrences of the same type.</li>
<li style="list-style: none">
<ul>
<li>the partitioning type (single panel, double panel, tripel
panel, more panels)</li>
<li>the operation type (swing, tilt and turn, pivot revolve,
fixed case ment, etc.)</li>
<li>the window panel hinge side (by using two different styles
for right and left opening windows)</li>
<li>the construction material type</li>
<li>the particular attributes for the lining by the
<strong>IfcWindowLiningProperties</strong></li>
<li>the particular attributes for the panels by theÂ 
<strong>IfcWindowPanelProperties</strong><br></li>
</ul>
</li>
</ul>



<p class="use-head">Parameteric Representation using parameters at 
<strong>IfcWindowType</strong></p>

<p>The parameters, which define the shape of the
<span class="self-ref">IfcWindow</span>, are given at the <strong>IfcWindowType</strong> and the
property sets, which are included in the <strong>IfcWindowType</strong>.
The <span class="self-ref">IfcWindow</span> only defines the local placement. The overall size of the <span class="self-ref">IfcWindow</span> to
be used to apply the lining or panel parameter provided by the
<strong>IfcWindowType</strong> is determined by the IfcShapeRepresentation
with the RepresentationIdentifier = 'Profile'. Only in case of an
<span class="self-ref">IfcWindow</span> inserted into an <strong>IfcOpeningElement</strong> using
the <strong>IfcRelFillsElement</strong> relatioship, having a horizontal
extrusion (along the y-axis of the <strong>IfcDoor</strong>), the overall
size is determined by the extrusion profile of the
<strong>IfcOpeningElement</strong>.</p>



<p>
<span class="self-ref">IfcWindow</span> with <i>PartitioningType = DoublePanelHorizontal</i>. The parameters <i>OverallHeight</i> and <i>OverallWidth</i> show the extent of the window in the positive Z and X axis of the local placement of the window. The lining and the transom are created by the given parameters.</p>



<table>
<tr><td><img src="../../../figures/IfcWindow-Layout1.gif" alt="window 1" border="0" height="299" width="356"></td></tr>
<tr><td><p class="figure">
</table>



<p>



<table>
<tr><td><img src="../../../figures/IfcWindow-Layout2.gif" alt="window 2" border="0" height="299" width="356"></td></tr>
<tr><td><p class="figure">
</table>



<p class="use-head">Window opening operation by window type</p>

<p>The parameters that defines the shape of the <span class="self-ref">IfcWindow</span>,
are given at the <strong>IfcWindowType</strong> and the property sets,
which are included in the <strong>IfcWindowType</strong>. The
<span class="self-ref">IfcWindow</span> only defines the local placement which
determines the opening direction of the window. The overall
layout of the <span class="self-ref">IfcWindow</span> is determined by
itsÂ <i>IfcWindowType.PartitioningType</i>. Each window panel has
its own operation type, provided by
<i>IfcWindowPanelProperties.OperationType</i>. All window panels
are assumed to open into the same direction (if relevant for the
particular window panel operation. The hindge side (whether a
window opens to the left or to the right) is determined by the
<strong>IfcWindowPanelProperties</strong><i>.OperationType</i>.</p>
<blockquote class="note">NOTE&nbsp; Â There are different conventions in
different countries on how to show the symbolic presentation of
the window panel operation (the "triangles"). Either as seen from
the exterior, or from the interior side. The following figures
show the symbolics from the exterior side (the convention as used
predominately in Europe).</blockquote>

<p>



<table><tr><td><table border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr valign="top">
<td align="left" valign="top"><small><img alt="fig 1" src=
"../../../figures/IfcWindow-Fig01.gif" height="121" width=
"301"><br></small></td>
<td align="left" valign="top">
<p><small>The window panel (for side hung windows) opens always
into the direction of the positive Y axis of the local placement.
The determination of whether the window opens to the left or to
the right is done at
<i>IfcWindowPanelProperties.OperationType</i>. Here it is a left
side opening window given byÂ <i>OperationType</i> =
SideHungLeftHand.</small></p>
</td>
</tr>
<tr>
<td><small><img alt="fig 2" src="../../../figures/IfcWindow-Fig02.gif"
height="121" width="301"><br></small></td>
<td valign="top">
<p><small>If the window should open to the other side, then the
local placement has to be changed. It is still a left hung
window, given by <i>IfcWindowPanelProperties.OperationType</i>
=Â SideHungLeftHand.</small></p>
</td>
</tr>
<tr>
<td><img alt="fig 3" src="../../../figures/IfcWindow-Fig03.gif" height=
"121" width="301"></td>
<td valign="top">
<p><small>If the window panel (for side hung windows) opens to
the right, a separate window panel style needs to be used (here
<i>IfcWindowPanelProperties.OperationType</i>
=Â SideHungRightHand) and it always opens into the direction of
the positive Y axis of the local placement.Â </small></p>
</td>
</tr>
<tr valign="top">
<td align="left" valign="top"><small><img alt="fig 4" src=
"../../../figures/IfcWindow-Fig04.gif" height="121" width=
"301"><br></small></td>
<td align="left" valign="top">
<p><small>If the window should open to the other side, then the
local placement has to be changed. It is still a right hung
window, given by <i>IfcWindowPanelProperties.OperationType</i>
=Â </small><small>SideHungRightHand.</small></p>
<small>.</small></td>
</tr>
</tbody>
</table>

</td></tr>
<tr><td><p class="figure">
</table>




<h1>IfcWindowStandardCase</h1>
                                
                                <p>The standard window,
<span class="self-ref">IfcWindowStandardCase</span>, defines a window with certain
constraints for the provision of operation types, opening
directions, frame and lining parameters, construction types and
with certain constraints for the geometric representation. The
<span class="self-ref">IfcWindowStandardCase</span> handles all cases of windows,
that:</p>
<ul>
<li>are inserted into an opening, represented by
<strong>IfcOpeningElement</strong>, using the <strong>IfcRelFillsElement</strong>
relationship</li>
<li>have a local placement relative to this opening, and with the
y-axis of the placement pointing into the opening direction</li>
<li>have a profile geometry, represented by
<i>IfcShapeRepresentation.RepresentationIdentifier</i>="Profile"
as a closed curve to which the window parameter apply. The
profile represents a rectangle within the xz plane of the local
placement</li>
<li>have a reference to an <strong>IfcWindowType</strong> to define the
opening direction and the operation type (swinging, sliding,
folding, etc.) of the window. The attribute <i>OperationType</i>
shall be provided and not being UNDEFINED, and the attribute
<i>ParameterTakesPrecedence</i> shall be "TRUE".</li>
<li>have a single <strong>IfcWindowLiningProperties</strong> and a set of
<strong>IfcWindowPanelProperties</strong> instances included in the set of
<i>HasPropertySets</i> at <strong>IfcWindowType</strong></li>
</ul>


<p>The geometric representation of <span class="self-ref">IfcWindowStandardCase</span>
is defined using the following multiple shape representations for
its definition:</p>
<ul>
<li><u>Profile</u>: a three-dimensional closed curve within a
particular shape representation. The profile is used to apply the
parameter of the parametric window representation. The profile
around the edges of the opening is used to apply the window
lining and window panel shape parameter.</li>
<li><u>Body</u>: A SweptSolid, SurfaceModel, or
Brep Representation or a CSG additionally defining the 3D shape
of the standard window in addition to the parametric
representation by applying the <strong>IfcWindowLiningProperties</strong>
and an the <strong>IfcWindowPanelProperties</strong> to the Profile
representation.</li>
</ul>
<h1>IfcWindowType</h1>
                                
                                <p>The element type
<span class="self-ref">IfcWindowType</span> defines commonly shared information for
occurrences of windows. The set of shared information may
include:</p>
<ul>
<li>common properties within shared property sets</li>
<li>common material information</li>
<li>common partitioning of panels</li>
<li>common operation types of panels</li>
<li>common shape representations</li>
</ul>
<p>A window type defines the particular parameter of the lining
and one (or several) panels through the
<strong>IfcWindowLiningProperties</strong> and the
<strong>IfcWindowPanelProperties</strong> as predefined property sets
applicable to windows only.</p>
<p>It is used to define a window specification, or window style
(the specific product information that is common to all
occurrences of that window type). Window types may be exchanged
without being already assigned to occurrences.</p>
<p>Occurrences of the <span class="self-ref">IfcWindowType</span> within building models
are represented by instances of <strong>IfcWindow</strong> or
<strong>IfcWindowStandardCase</strong>.</p>



<p class="use-head">Partitioning type use definition</p>
<p>The <strong>IfcWindowTypePartitioningEnum</strong> defines the general
layout of the window type and its symbolic presentation.
Depending on the enumerator, the appropriate instances of
<strong>IfcWindowLiningProperties</strong> and
<strong>IfcWindowPanelProperties</strong> are attached in the list of
<i>HasPropertySets</i>. The <strong>IfcWindowTypePartitioningEnum</strong>
mainly determines the way of partitioning the window into
individual window panels and thereby number and position of
window panels.</p>
<p>See geometry use definitions at
<strong>IfcWindowTypePartitioningEnum</strong> for the correct usage of
panel partitioning and <strong>IfcWindowPanelProperties</strong> for the
opening symbols for different panel operation types.</p>
<p class="use-head">Material Use Definition</p>
<p>The material of the <span class="self-ref">IfcWindowType</span> is defined by the
<strong>IfcMaterialConstituentSet</strong> or as fall back by
<strong>IfcMaterial</strong> and attached by the
<strong>IfcRelAssociatesMaterial</strong><i>.RelatingMaterial</i>. It is
accessible by the inverse <i>HasAssociations</i>
relationship.</p>
<p>The following keywords for
<i>IfcMaterialConstituentSet.MaterialConstituents[n].Name</i>
shall be used:</p>
<ul>
<li>'Lining' - to indicate that the material constituent applies
to to the window lining</li>
<li>'Framing' - to indicate that the material constituent applies
to to the window panels, if not provided, the 'Lining' material
information applied to panels as well</li>
<li>'Glazing' - to indicate that the material constituent applies
to to the glazing part</li>
</ul>
<p>If the fall back single <strong>IfcMaterial</strong> is referenced, it
applies to the lining and framing of the window.</p>
<p class="use-head">Property Set Use Definition</b></u>:</p>
<p>The shared property sets relating to the <span class="self-ref">IfcWindowType</span>
are defined by the <strong>IfcPropertySet</strong> and are attached by the
<i>HasPropertySets</i> attribute. The following property set
definitions specific to the <span class="self-ref">IfcWindowType</span> are part of this
IFC release:</p>
<blockquote class="note">NOTE&nbsp; There is no differentiation between
properties within the property set that are only assignable to
<span class="self-ref">IfcWindowType</span> and those that are only assignable to
<strong>IfcWindow</strong>. If the same property is assigned to the
<span class="self-ref">IfcWindowType</span> and the <strong>IfcWindow</strong> being an occurrence
of the <span class="self-ref">IfcWindowType</span>, then the occurrence property
overrides the type property.</blockquote>
<ul>
<li><a href=
"../../ifcsharedbldgelements/pset/pset_windowcommon.htm" target=
"SOURCE">Pset_WindowCommon</strong>: common property set for all
window types.</li>
<li><a href=
"../../ifcsharedbldgelements/pset/pset_doorwindowglazingtype.htm"
target="info">Pset_DoorWindowGlazingType</strong>: specific property
set for the glazing properties of the door type glazing</li>
<li><a href=
"../../ifcsharedbldgelements/pset/pset_doorwindowshadingtype.htm"
target="info">Pset_DoorWindowShadingType</strong>: specific property
set for the shading properties of the door type shading</li>
</ul>
<p>Two subtypes of <strong>IfcPreDefinedPropertySet</strong> are applicable
to <span class="self-ref">IfcWindowType</span>:</p>
<ul>
<li><strong>IfcWindowLiningProperties</strong> - a single instance to
define the shape parameters of the window lining</li>
<li><strong>IfcWindowPanelProperties</strong> - one or several instances to
define the shape parameters of the window panel(s)</li>
</ul>
<p class="use-head">Geometry Use Definitions</b></u>:</p>
<p>The <span class="self-ref">IfcWindowType</span> may define the common shape of window
occurrences. The common shape can be defined by</p>
<ul>
<li>applying shape parameters defined within the associated
<strong>IfcWindowLiningProperties</strong> and
<strong>IfcWindowPanelProperties</strong> applied to the 'Profile'
geometric representation. It is only applicable if the
<span class="self-ref">IfcWindowType</span> has only occurrences of type
<strong>IfcWindowStandardCase</strong> (See geometric use definition of
<strong>IfcWindowStandardCase</strong> for further information).</li>
<li>applying the <i>RepresentationMaps</i> attribute to refer to
a list of <strong>IfcRepresentationMap</strong>'s, that allow for multiple
geometric representations (e.g. with
<strong>IfcShapeRepresentation</strong>'s having an
<i>RepresentationIdentifier</i> 'Box', 'Profile', 'FootPrint', or
'Body')
<blockquote class="note">NOTE&nbsp; The product shape representations are
defined as <i>RepresentationMaps</i> (attribute of the supertype
<strong>IfcTypeProduct</strong>), which get assigned by an element
occurrence instance through the
<i>IfcShapeRepresentation.Item[n]</i> being an
<strong>IfcMappedItem</strong>. See <strong>IfcTypeProduct</strong> for further
information.</blockquote>
<blockquote class="note">NOTE&nbsp; The values of attributes
<i>RepresentationIdentifier</i> and <i>RepresentationType</i> of
<strong>IfcShapeRepresentation</strong> are restricted in the same way as
those for <strong>IfcWindow</strong> and
<strong>IfcWindowStandardCase</strong></blockquote>
</li>
</ul>
<h1>IfcWindowTypeEnum</h1>
                                
                                <h1>IfcWindowTypePartitioningEnum</h1>
                                
                                <h1>IfcDistributionChamberElement</h1>
                                
                                <p>A distribution chamber element defines a place at which distribution systems and their constituent elements may be inspected or through which they may travel.</p>
 
<p>An <b>IfcDistributionChamberElement</b> is a formed volume used in a distribution system, such as a sump, trench or manhole. Instances of <strong>IfcDistributionSystem</strong> or <strong>IfcDistributionFlowElement</strong> may be related to the <b>IfcDistributionChamberElement</b> enabling their location in or at the chamber to be determined.</p>
 

 


<h1>IfcDistributionChamberElementType</h1>
                                
                                <p>The distribution flow element type <b>IfcDistributionChamberElementType</b> defines commonly shared information for occurrences of distribution chamber elements. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
<li>common ports</li>
</ul><p>It is used to define a distribution chamber element type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDistributionChamberElementType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDistributionChamberElementType</b> are represented by instances of <strong>IfcDistributionChamberElement</strong>. 
Refer to the documentation at <strong>IfcDistributionChamberElement</strong> for supported property sets, materials, composition, and ports.</p>


 

<h1>IfcDistributionChamberElementTypeEnum</h1>
                                
                                <h1>IfcDistributionCircuit</h1>
                                
                                <p>
A distribution circuit is a partition of a distribution system that is conditionally switched such as an electrical circuit.
</p>






<p><b><u>Composition Use Definition</u></b></p>

<p>An <span class="self-ref">IfcDistributionCircuit</span> may aggregate an <strong>IfcDistributionSystem</strong> using the <strong>IfcRelAggregates</strong> relationship where <i>RelatingObject</i> refers to the <strong>IfcDistributionSystem</strong> and <i>RelatedObjects</i> includes one or more <span class="self-ref">IfcDistributionCircuit</span> groups.

<p>An <span class="self-ref">IfcDistributionCircuit</span> may be aggregated into sub-circuits using the <strong>IfcRelAggregates</strong> relationship where <i>RelatingObject</i> refers to the parent <span class="self-ref">IfcDistributionCircuit</span> and <i>RelatedObjects</i> refers to one or more <span class="self-ref">IfcDistributionCircuit</span> sub-circuits.</p>


<p><b><u>Assignment Use Definition</u></b></p>

<p>An <span class="self-ref">IfcDistributionCircuit</span> should be assigned to an <strong>IfcDistributionPort</strong> on an <strong>IfcFlowController</strong> element indicating the host or origination of the system using the <strong>IfcRelAssignsToProduct</strong> relationship.</p>

<p>Each device whose operation is conditional based upon the state of the circuit is assigned to the <span class="self-ref">IfcDistributionCircuit</span> via the <strong>IfcRelAssignsToGroup</strong> relationship.  An <strong>IfcDistributionElement</strong> may belong to multiple systems or circuits, however only one <strong>IfcDistributionSystem</strong> or <span class="self-ref">IfcDistributionCircuit</span> of a particular <i>PredefinedType</i>.</p>


<h1>IfcDistributionControlElement</h1>
                                
                                <p>The distribution element <span class="self-ref">IfcDistributionControlElement</span> defines occurrence elements of a building automation control system that are used to impart control over elements of a distribution system.</p>

<p><span class="self-ref">IfcDistributionControlElement</span> defines elements of a building automation control system. These are typically used to control distribution system elements to maintain  variables such as temperature, humidity, pressure, flow, power, or lighting levels, through the modulation, staging or sequencing of mechanical or electrical devices. The three general functional categories of control elements are as follows:</p>

<ul> 
<li>Impart control over flow control elements (<strong>IfcFlowController</strong>) in a distribution system such as dampers, valves, or relays, typically through the use of actuation (<strong>IfcActuator</strong>).</li>
<li>Sensing elements (<strong>IfcSensor</strong>) that measure changes in the controlled variable such as temperature, humidity, pressure, or flow.</li>
<li>Controllers (<strong>IfcController</strong>) typically classified according to the control action they seek to perform and generally responsible for making decisions about the elements under control.</li>
</ul>
    
<p>Since <span class="self-ref">IfcDistributionControlElement</span> and its subtypes typically relate to many different distribution flow elements (<strong>IfcDistributionFlowElement</strong>), the objectified relationship <strong>IfcRelFlowControlElements</strong> has been provided to relate control and flow elements as required.</p>

<p>The key distinction between <strong>IfcDistributionFlowElement</strong> and <span class="self-ref">IfcDistributionControlElement</span> is whether it is internal or external to the flow system, respectively. For example, the distinction between <strong>IfcFlowMeter</strong> (subtype of <strong>IfcDistributionFlowElement</strong> measuring a flow quantity) and <strong>IfcFlowInstrument</strong> (subtype of <span class="self-ref">IfcDistributionControlElement</span> measuring a flow quality), is based on this principal.  A physical device that connects within the flow system in which it measures (having inlet/outlet pipes for the measured substance) follows the <strong>IfcDistributionFlowElement</strong> hierarchy (and therefore <strong>IfcFlowMeter</strong> which measures the flow internally).  Otherwise, if it monitors/controls but does not connect inline within the flow system (it is external or is a component of another device), then it follows the <span class="self-ref">IfcDistributionControlElement</span> hierarchy (and therefore <strong>IfcFlowInstrument</strong> which may display various attributes through connected sensors).</p>
    



      

<h1>IfcDistributionControlElementType</h1>
                                
                                <p>The element type <span class="self-ref">IfcDistributionControlElementType</span> defines a list of commonly shared property set definitions of an element and an optional set of product representations.  It is used to define an element specification (the specific product information that is common to all occurrences of that product type).</p> 
	 
<p>Distribution control element types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcDistributionControlElementType</span> are represented by instances of <strong>IfcDistributionControlElement</strong> or its subtypes.</p> 
    




<h1>IfcDistributionFlowElement</h1>
                                
                                <p>The distribution element <span class="self-ref">IfcDistributionFlowElement</span> defines occurrence elements of a distribution system that facilitate the distribution of energy or matter, such as air, water or power.</p>
    
<blockquote class="example">
EXAMPLE&nbsp; Examples of distribution flow elements are ducts, pipes, wires, fittings, and equipment.
</blockquote> 





  

<h1>IfcDistributionFlowElementType</h1>
                                
                                <p>The element type <span class="self-ref">IfcDistributionFlowElementType</span> defines a list of commonly shared property set definitions of an element and an optional set of product representations.  It is used to define an element specification (the specific product information that is common to all occurrences of that product type).</p> 
	     
<p>Distribution flow element types (orthe instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcDistributionFlowElementType</span> are represented	by instances of <strong>IfcDistributionFlowElement</strong> or its subtypes.</p> 
    





<h1>IfcDistributionPort</h1>
                                
                                <p>A distribution port is an inlet or outlet of a product through which a particular substance may flow.</p>
 
<p>Distribution ports are used for passage of solid, liquid, or gas substances, as well as electricity for power or communications.  Flow segments (pipes, ducts, cables) may be used to connect ports across products.  Distribution ports are defined by system type and flow direction such that for two ports to be connected, they must share the same system type and have opposite flow directions (one side being a <i>SOURCE</i> and the other being a <i>SINK</i>).  Ports are similar to openings in that they do not have any visible geometry; such geometry is captured at the shape representation of the enclosing element or element type.  Ports may have placement that indicates the position and orientation of the connection.</p>
 



 
 
<h1>IfcDistributionPortTypeEnum</h1>
                                
                                <h1>IfcDistributionSystem</h1>
                                
                                <p>A distribution system is a network designed to receive, store, maintain, distribute, or control the flow of a distribution media. A common example is a heating hot water system that consists of a pump, a tank, and an interconnected piping system for distributing hot water to terminals.</p>

<p>The group <span class="self-ref">IfcDistributionSystem</span>
defines the occurrence of a specialized system for use within the context of building services.</p>


<p>Important functionalities for the description of a distribution system are derived from existing IFC entities:</p>

<ul><li>From <strong>IfcSystem</strong> it inherits the ability to couple the distribution system via <strong>IfcRelServicesBuildings</strong> to one or more <strong>IfcSpatialElement</strong> subtypes as necessary.</li></ul>

<ul><li>From <strong>IfcGroup</strong> it inherits the inverse attribute <i>IsGroupedBy</i>, pointing to the relationship entity <strong>IfcRelAssignsToGroup</strong>. This allows to group distribution elements (instances of <strong>IfcDistributionElement</strong> subtypes), and in special cases ports directly (instances of <strong>IfcDistributionPort</strong>).</li></ul>

<ul><li>From <strong>IfcObject</strong> it inherits the inverse attribute <i>IsDecomposedBy</i> pointing to the relationship entity <strong>IfcRelAggregates</strong>. It provides the hierarchy between the separate (partial) distribution systems.  For example, an electrical main circuit may be aggregated into branch circuits.</li></ul>







<h1>IfcDistributionSystemEnum</h1>
                                
                                <h1>IfcEnergyConversionDevice</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcEnergyConversionDevice</span> defines 
    the occurrence of a device used to perform
    energy conversion or heat transfer and typically participates
    in a flow distribution system. Its type is defined by <strong>IfcEnergyConversionDeviceType</strong> 
    or its subtypes.</p>


    

    
    

<h1>IfcEnergyConversionDeviceType</h1>
                                
                                <p>The element type <i>IfcEnergyConversionType</i> defines a list of commonly shared property
	set definitions of an energy conversion device and an optional set of product representations.
	It is used to define an energy conversion device specification (the specific product
	information, that is common to all occurrences of that product type).</p> 
	     
    <p>A energy conversion type is used to define the common properties of a energy conversion device that may be applied to many occurrences of that type. 
An energy conversion device is a building systems device that converts energy from one form into another such 
as a boiler (combusting gas to heat water), chiller (using a refrigeration cycle to cool a liquid), or a cooling coil (using the phase-change characteristics of a refrigerant to cool air). Energy conversion types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
    <p>Occurrences of the <i>IfcEnergyConversionType</i> are represented by instances of <strong>IfcEnergyConversionDevice</strong> or its subtypes.</p> 
    


<h1>IfcFlowController</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowController</span> defines
    the occurrence of elements of a distribution system that 
    are used to regulate flow through a distribution system. 
    Examples include dampers, valves, switches, and relays. Its type is defined by 
    <strong>IfcFlowControllerType</strong> or subtypes.</p>





<h1>IfcFlowControllerType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowControllerType</span> defines a list of commonly shared property set definitions of a flow controller and an optional set of product representations. It is used to define a flow controller specification (i.e. the specific product information, that is common to all occurrences of that product type).</p> 
	     
<p>A flow controller type is used to define the common properties of a flow controller that may be applied to many occurrences of that type.
A flow controller is a device that regulates flow within a distribution system, such as a valve in a piping system, modulating damper in an air distribution system, or electrical switch in an electrical distribution system. Flow controller types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>Occurrences of the <span class="self-ref">IfcFlowControllerType</span> are represented by instances of <strong>IfcFlowController</strong> or its subtypes.</p> 
    


<h1>IfcFlowDirectionEnum</h1>
                                
                                <h1>IfcFlowFitting</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowFitting</span> defines the occurrence of a junction or transition in a flow distribution system, such as an elbow or tee. Its type is defined by <strong>IfcFlowFittingType</strong> or its subtypes.</p>






<h1>IfcFlowFittingType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowFittingType</span> defines a list of commonly shared property set definitions of a flow fitting and an optional set of product representations. It is used to define a flow fitting specification (i.e. the specific product information, that is common to all occurrences of that product type).</p> 
	     
<p>A flow fitting type is used to define the common properties of a flow fitting that may be applied to many occurrences of that type.
A flow fitting is a device that is used to interconnect flow segments or other fittings within a distribution system, such as a tee in a ducted system that branches flow into two directions, or a junction box in an electrical distribution system.  Flow fitting types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>Occurrences of the <span class="self-ref">IfcFlowFittingType</span> are represented by instances of <strong>IfcFlowFitting</strong> or its subtypes.</p> 
    


<h1>IfcFlowMovingDevice</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowMovingDevice</span> defines the occurrence of an apparatus used to distribute, circulate or perform conveyance of fluids, including liquids and gases (such as a pump or fan), and typically participates in a flow distribution system. Its type is defined by <strong>IfcFlowMovingDeviceType</strong> or its subtypes.</p>





<h1>IfcFlowMovingDeviceType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowMovingDeviceType</span> defines a list of commonly shared property set definitions of a flow moving device and an optional set of product representations. It is used to define a flow moving device specification (i.e. the specific product information, that is common to all occurrences of that product type).</p> 
	     
<p>A flow moving type is used to define the common properties of a flow moving device that may be applied to many occurrences of that type. A flow moving device is a device that is used to produce a pressure differential in a distribution system, such as a pump, fan, or compressor.  Flow moving types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcFlowMovingDeviceType</span> are represented by instances of <strong>IfcFlowMovingDevice</strong> or its subtypes.</p> 
    


<h1>IfcFlowSegment</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowSegment</span> defines the occurrence of a segment of a flow distribution system.</p>
<p>The <span class="self-ref">IfcFlowSegment</span> defines a particular occurrence of a segment inserted in the spatial context of a project. The parameters defining the type of the segment and/or its shape are defined by the <strong>IfcFlowSegmentType</strong>, which is related by the inverse relationship IsDefinedBy pointing to <strong>IfcRelDefinesByType</strong>.







<h1>IfcFlowSegmentType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowSegmentType</span> defines a list of commonly shared property set definitions of a flow segment and an optional set of product representations. It is used to define a flow segment specification (the specific product information, that is common to all occurrences of that product type).</p> 
	 
<p>A flow segment type is used to define the common properties of a flow segment that may be applied to many occurrences of that type. A flow segment is a section of a distribution system, such as a duct, pipe, or conduit, that typically has only two ports. Flow segment types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>Occurrences of the <span class="self-ref">IfcFlowSegmentType</span> are represented by instances of <strong>IfcFlowSegment</strong> or its subtypes.</p> 
    


<p><b><u>Material Use Definition</u></b></p>
<p>The material of the <b>IfcDistributionFlowSegmentType</b> is defined using one of the following entities:</p>
<ul>
<li><strong>IfcMaterialProfileSet</strong> : This defines the material cross section which may be used to generate the 'Body' representation at occurrences (for parametric definitions not having representation), or for analysis purposes.</li>
<li><strong>IfcMaterialConstituentSet</strong> : For elements containing multiple materials where profiles are not applicable, this indicates materials at named aspects.</i>
</li>
<li><strong>IfcMaterial</strong> : For elements comprised of a single material where profiles are not applicable, this indicates the material.</li>
</ul>


<h1>IfcFlowStorageDevice</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowStorageDevice</span> defines the occurrence of a device that participates in a distribution system and is used for temporary storage (such as a tank). Its type is defined by <strong>IfcFlowStorageDeviceType</strong> or its subtypes.</p>
    



        

<h1>IfcFlowStorageDeviceType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowStorageDeviceType</span> defines a list of commonly shared property set definitions of a flow storage device and an optional set of product representations.  It is used to define a flow storage device specification (the specific product information that is common to all occurrences of that product type).</p> 
	     
<p>A flow storage device is a device used for the temporary storage of a fluid (such as a tank) or the voltage potential induced by the induced electron flow (such as a battery). Flow storage types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcFlowStorageDeviceType</span> are represented by instances of <strong>IfcFlowStorageDevice</strong> or its subtypes.</p> 
    


<h1>IfcFlowTerminal</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowTerminal</span> defines the occurrence of a permanently attached element that acts as a terminus or beginning of a distribution system (such as an air outlet, drain, water closet, or sink). A terminal is typically a point at which a system interfaces with an external environment. Its type is defined by <strong>IfcFlowTerminalType</strong> or its subtypes.</p>




        

<h1>IfcFlowTerminalType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowTerminalType</span> defines a list of commonly shared property set definitions of a flow terminal and an optional set of product representations.  It is used to define a flow terminal specification (the specific product information that is common to all occurrences of that product type).</p> 
	     
<p>A flow terminal type is used to define the common properties of a flow terminal that may be applied to many occurrences of that type.  A flow terminal acts as a terminus or beginning element in a distribution system such as a ceiling register in a ducted air distribution system, a sink in a waste-water system, or a light fixture in an electrical lighting system. Flow terminal types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcFlowTerminalType</span> are represented by instances of <strong>IfcFlowTerminal</strong> or its subtypes.</p> 
    


<h1>IfcFlowTreatmentDevice</h1>
                                
                                <p>The distribution flow element <span class="self-ref">IfcFlowTreatmentDevice</span> defines the occurrence of a device typically used to remove unwanted matter from a fluid, either liquid or gas, and typically participates in a flow distribution system.  Its type is defined by <strong>IfcFlowTreatmentDeviceType</strong> or its subtypes.</p>



        

<h1>IfcFlowTreatmentDeviceType</h1>
                                
                                <p>The element type <span class="self-ref">IfcFlowTreatmentDeviceType</span> defines a list of commonly shared property set definitions of a flow treatment device and an optional set of product representations. It is used to define a flow treatment device specification (the specific product information that is common to all occurrences of that product type).</p> 
	     
<p>A flow treatment device is a device used to change the physical properties of the medium, such as an air, oil or water filter (used to remove particulates from the fluid), or a duct silencer (used to attenuate noise).  Flow treatment types (or the instantiable subtypes) may be exchanged without being already assigned to occurrences.</p> 
	
<p>The occurrences of the <span class="self-ref">IfcFlowTreatmentDeviceType</span> are represented by instances of <strong>IfcFlowTreatmentDevice</strong> or its subtypes.</p> 
    


<h1>IfcRelFlowControlElements</h1>
                                
                                <p>This objectified relationship between a distribution flow element occurrence and one-to-many control element occurrences indicates that the control element(s) sense or control some aspect of the flow element. It is applied to <strong>IfcDistributionFlowElement</strong> and <strong>IfcDistributionControlElement</strong>.</p>

<p>This relationship may be used to indicate an operational relationship such as an actuator operating a valve, damper, or switch.  It may also be used to indicate a sensing relationship such as a sensor detecting conditions of fluid flow.</p>

<p>This relationship implies a sensing or controlling relationship; if elements are merely connected without any control relationship, then <strong>IfcRelConnectsElements</strong> should be used.</p>




<h1>IfcBuildingElementPart</h1>
                                
                                <p><span class="self-ref">IfcBuildingElementPart</span> represents major components as subordinate
parts of a building element. Typical usage examples include precast concrete
sandwich walls, where the layers may have different geometry representations.
In this case the layered material representation does not sufficiently describe
the element. Each layer is represented by an own instance of the
<span class="self-ref">IfcBuildingElementPart</span> with its own geometry description.</p>

<p>The kind of building element part is further specified by a
corresponding instance of <strong>IfcBuildingElementPartType</strong>,
referred to by <strong>IfcRelDefinesByType</strong>.</p>






<h1>IfcBuildingElementPartType</h1>
                                
                                <p>The building element part type defines lists of commonly shared property set definitions and representation maps of parts of a building element.</p>




<h1>IfcBuildingElementPartTypeEnum</h1>
                                
                                <h1>IfcDiscreteAccessory</h1>
                                
                                <p>A discrete accessory is a representation of different kinds of accessories included in or added to elements. </p> 






<h1>IfcDiscreteAccessoryType</h1>
                                
                                <p>The element component type <b>IfcDiscreteAccessoryType</b> defines commonly shared information for occurrences of discrete accessorys. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a discrete accessory type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcDiscreteAccessoryType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcDiscreteAccessoryType</b> are represented by instances of <strong>IfcDiscreteAccessory</strong>.</p>

  

<p class="use-head">Type Use Definition</p>
    <p>
      The exact type information of the
      <span class="self-ref">IfcDiscreteAccessoryType</span> is given in the
      <i>PredefinedType</i> attribute, possibly in combination with the
      <i>ElementType</i> attribute inherited from
      <strong>IfcElementType</strong>. Standard <i>ElementType</i> designations are
      provided for guideline below. The list is not exhaustive and
      the list of definitions may be extended based on local
      agreements.
    </p>
    <p>
      Corbels as separate components:
    </p>
    <ul>
      <li>
        <b>'Hidden steel corbel'</b>: Corbel system made from steel
        components embedded into the master element.
      </li>
      <li>
        <b>'Visible steel corbel'</b>: Corbel system made from
        steel components protruding from the master element.
      </li>
      <li>
        <b>'Visible concrete corbel'</b>: Corbel system made as a
        separate precast concrete component added to the master
        element.
      </li>
    </ul>
    <p>
      Connecting accessories, for example for sandwich wall panels:
    </p>
    <ul>
      <li>
        <b>'Diagonal truss connector'</b>: A fixing device in truss
        form with diagonal cross bars holding two precast conrete
        panels together in a sandwich wall panel.
      </li>
      <li>
        <b>'Ladder truss connector'</b>: A fixing device in truss
        form with straight cross bars in ladder form holding two
        precast conrete panels together in a sandwich wall panel.
      </li>
      <li>
        <b>'Panel suspender'</b>: A straight fixing device holding
        two precast conrete panels together in a sandwich wall
        panel.
      </li>
    </ul>
    <p>
      Electrical accessories for precast concrete elements:
    </p>
    <ul>
      <li>
        <b>'Protective plug'</b>: Protective plug used in element
        for protecting electrical accessories during manufacturing,
        transportation and assembly.
      </li>
    </ul>
    <p>
      Fixing parts:
    </p>
    <ul>
      <li>
        <b>'Standard fixing plate'</b>: Standard fixing plate.
      </li>
      <li>
        <b>'Edge fixing plate'</b>: Fixing plate attached to the
        edge of an element.
      </li>
      <li>
        <b>'Corner fixing plate'</b>: Fixing plate attached to the
        corner of an element.
      </li>
      <li>
        <b>'Slab fixing plate'</b>: Fixing plate for slabs.
      </li>
  <li>
    <b>'Channel fixing'</b>: Fixing channels, often realized as cast-in channels.
  </li>
  <li>
    <b>'Balcony hinge'</b>: Accessory supporting and fixing balconies.
  </li>
  <li>
    <b>'Frame shoe'</b>: Fixing shoe for frames.
  </li>
      <li>
        <b>'Thermo frame'</b>: Thermo frame.
      </li>
      <li>
        <b>'Column shoe'</b>: Fixing shoe for columns.
      </li>
      <li>
        <b>'Wall shoe'</b>: Fixing shoe for walls.
      </li>
      <li>
        <b>'Fixing socket'</b>: Fixing socket.
      </li>
    </ul>
    <p>
      Joint accessories:
    </p>
    <ul>
      <li>
        <b>'Neoprene bearing plate'</b>: Rubber plate used as a
        bearing in, for example, joints between column corbels and
        beams.
      </li>
      <li>
        <b>'Working joint reinforcement'</b>: Reinforcement
        accessory used in working joints.
      </li>
      <li>
        <b>'Expansion joint reinforcement'</b>: Reinforcement
        accessory used in expansion joints.
      </li>
      <li>
        <b>'Ribbed steel bar extension'</b>: Extension accessory
        made of a ribbed (reinforcement) bar used in joints.
      </li>
      <li>
        <b>'Steel pin bolt'</b>: Pin bolt used to join together,
        for example, columns and beams.
      </li>
      <li>
        <b>'Concrete dowel'</b>: Dowel pin used in joints.
      </li>
      <li>
        <b>'Concrete groove'</b>: A groove made in a joint.
      </li>
      <li>
        <b>'Steel plate'</b>: A steel plate used as an accessory in
        a joint.
      </li>
      <li>
        <b>'Wire loop'</b>: A joint connector accessory made from a
        wire loop.
      </li>
      <li>
        <b>'Steel loop'</b>: A joint connector accessory made from
        a steel bar loop.
      </li>
      <li>
        <b>'Sealing strip'</b>: A strip sealing the joint.
      </li>
      <li>
        <b>'Sealing compound'</b>: Sealing compound protecting and
        sealing the joint.
      </li>
    </ul>
    <p>
      Lifting accessories:
    </p>
    <ul>
      <li>
        <b>'Wire lifting hook'</b>: A lifting aid in the form of a
        wire loop.
      </li>
      <li>
        <b>'Steel lifting hook'</b>: A lifting aid in the form of a
        steel bar loop.
      </li>
      <li>
        <b>'Lifting socket'</b>: A lifting aid in the form of a
        socket.
      </li>
      <li>
        <b>'Steel lifting anchor'</b>: A lifting aid in the form of
        a steel lifting anchor.
      </li>
      <li>
        <b>'Lifting hole'</b>: A lifting aid in the form of a hole.
      </li>
    </ul>
    <p>
      Accessories mainly used in the building services domain:
    </p>
    <ul>
      <li>
        <b>'Antivibration'</b> : An isolating device to prevent
        other elements to be effected by vibrations.
      </li>
      <li>
        <b>'Drop rod'</b> : A length of material providing a
        hanging support to a bracket. Note that a drop rod is
        considered to include nuts and washers required for
        securing.
      </li>
      <li>
        <b>'Duct foot'</b> : A base support used to receive a
        vertical pipe .
      </li>
      <li>
        <b>'Framing'</b> : A frame placed around a penetration to
        prevent scraping against the building surface or structure.
      </li>
      <li>
        <b>'Grommet'</b> : An element placed within a penetration
        that seals the penetration for a particular reason.
      </li>
      <li>
        <b>'Rack'</b> : A set of shelving for the purposes of
        storage that may be freestanding or bolted to a structure.
      </li>
      <li>
        <b>'Safety part'</b> : A part, typically installed in
        vertical shafts at each level, to ensure safety from
        falling when entering the shaft.
      </li>
      <li>
        <b>'Sleeve'</b> : A thin barrier placed between a
        penetration and a penetrating element.
      </li>
      <li>
        <b>'Support section'</b> : A section of material that is
        used as an intermediate support upon which multiple
        brackets can be mounted.
      </li>
    </ul>



<h1>IfcDiscreteAccessoryTypeEnum</h1>
                                
                                <h1>IfcElementComponent</h1>
                                
                                <p>
An element component is a representation for minor items included in, added to or connecting to or between
   elements, which usually are not of interest from the overall building structure viewpoint.
   However, these small parts may have vital and load carrying functions within the construction.
   These items do not provide any actual space boundaries.
   Typical examples of <span class="self-ref">IfcElementComponent</span>s include different kinds of fasteners and various accessories.
</p>

<p>One or several instances of subtypes of <span class="self-ref">IfcElementComponent</span> should always be accompanied by a defining instance of a respective subtype of <strong>IfcElementComponentType</strong>.  The type object holds shape and material information.</p>




<p>It is often desirable to model a number of same-shaped element components by means of a single
occurrence object, e.g. several bolts within a connection or a row of reinforcement elements.
In this IFC release, this is possible by means of multiple mapped representation as documented below.</p>

<p>To express the multiplicity of element components also on a higher semantic level,
a <i>Qto_ElementComponentPatternQuantities</i> should be provided via <strong>IfcRelDefinesByProperties</strong>
and contain the number of pieces which are placed by a single <span class="self-ref">IfcElementComponent</span> instance.</p>

<p class="use-head"><b>Symbolic Representation</b></p>

<p>A symbolic representation is defined for a row of components or several rows of
components within a single instance of <span class="self-ref">IfcElementComponent</span>.  Such rows or arrays may
contain possibly large numbers of individual pieces.  The product definition shape consists of
an <strong>IfcShapeRepresentation</strong> with the attribute values</p>
<ul>
  <li><i>RepresentationIdentifier</i> : 'Row'</li>
  <li><i>RepresentationType</i> : 'GeometricCurveSet'</li>
</ul>
<p>and one or several curves as geometric items.  The curves represent where reference points of
the pieces are located.  For example, such reference points may be at the heads of mechanical fasteners
or at the starting point of the extrusion axis of reinforcement bars.  In case of straight components
(bolts, nails, staples, straight reinforcement bars, or similar), the local placement of the
<span class="self-ref">IfcElementComponent</span> shall be located and oriented such that the local z axis is parallel with
the axes of the components.  A <i>Qto_ElementComponentPatternQuantities</i> should denote the count
of pieces in the row or array and their spacing.</p>


<h1>IfcElementComponentType</h1>
                                
                                <p>The element type <b>IfcElementComponentType</b> defines commonly shared information for occurrences of element components. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a element component type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcElementComponentType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcElementComponentType</b> are represented by instances of <strong>IfcElementComponent</strong>.</p>



<h1>IfcFastener</h1>
                                
                                <p>Representations of fixing parts which are used as fasteners to connect or join elements with other elements.  Excluded are mechanical fasteners which are modeled by a separate entity (<strong>IfcMechanicalFastener</strong>).</p>






<h1>IfcFastenerType</h1>
                                
                                <p>The element component type <b>IfcFastenerType</b> defines commonly shared information for occurrences of fasteners. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a fastener type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFastenerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFastenerType</b> are represented by instances of <strong>IfcFastener</strong>.</p>



<h1>IfcFastenerTypeEnum</h1>
                                
                                <h1>IfcMechanicalFastener</h1>
                                
                                <p>A mechanical fasteners connecting building elements mechanically.  A single instance of this class may represent one or many of actual mechanical fasteners, for example an array of bolts or a row of nails.</p>






<h1>IfcMechanicalFastenerType</h1>
                                
                                <p>The element component type <b>IfcMechanicalFastenerType</b> defines commonly shared information for occurrences of mechanical fasteners. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a mechanical fastener type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcMechanicalFastenerType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcMechanicalFastenerType</b> are represented by instances of <strong>IfcMechanicalFastener</strong>.</p>






<p class="use-head">Classification Use Definition</p>

<p>Mechanical fasteners, especially bolts, are often standardized.  To refer to a formal fastener
designation according to a standard (a product norm), <strong>IfcRelAssociatesClassification</strong> together
with <strong>IfcClassificationReference</strong> should be used.</p>
<ul>
<li><i>IfcClassificationReference.Identification</i>
contains a machine-readable form of the formal fastener designation from the norm.
Example: 'M16X80-10.9-HV' for a high-strength structural bolting assembly for preloading with
hexagon bolt and nut.  (On the other hand, <i>IfcMechanicalFastenerType.Name</i> contains a
displayable name which may not necessarily be the same as the formal designation.)</li>
<li><i>IfcClassificationReference.Name</i> carries the short name of the fastener norm.
Example: 'EN 14399-4' as the respective European standard for high-strength hexagon bolts.</li>
<li>Optionally, the norm can be further described by
<i>IfcClassificationReference.ReferencedSource</i>, including information like publisher and
date of issue of the norm.</li>
</ul>

<p>Furthermore, <strong>IfcRelAssociatesLibrary</strong> together with <strong>IfcLibraryReference</strong> may be
used to refer to a library which contains fastener definitions.</p>
<h1>IfcMechanicalFastenerTypeEnum</h1>
                                
                                <h1>IfcAsset</h1>
                                
                                <p>An asset is a uniquely identifiable grouping of elements acting as a single entity that has a financial value or that can be operated on as a single unit.</p> 
 
<p>An asset is generally the level of granularity at which maintenance operations are undertaken. An asset is a group that can contain one or more elements. Whilst the financial value of a component or element can be defined, financial value is also defined for accounting purposes at the level of the asset.<br/>  <br/>There are a number of actors that can be associated with an asset, each actor having a role. Actors within the scope of the project are indicated using the <strong>IfcRelAssignsToActor</strong> relationship in which case roles should be defined through the <strong>IfcActorRole</strong> class; otherwise principal actors are identified as attributes of the class. In the existence of both, direct attributes take precedence.<br/>  <br/>There are a number of costs that can be associated with an asset, each cost having a role. These are specified through the <i>OriginalValue</i>, <i>CurrentValue</i>, <i>TotalReplacementCost</i> and <i>DepreciatedValue</i> attributes.</p>




 
 <h1>IfcFurniture</h1>
                                
                                <p>Furniture defines complete furnishings such as a table, desk, chair, or cabinet, which may or may not be permanently attached to a building structure.</p> 
 
<p>Occurrences of furniture that are built in (where the property <i>Pset_FurnitureTypeCommon.IsBuiltIn</i> is asserted to be TRUE) should have their connection relationship with a building element occurrence defined through the <strong>IfcRelConnectsElements</strong> relationship.</p>

 
   
 <h1>IfcFurnitureType</h1>
                                
                                <p>The furnishing element type <b>IfcFurnitureType</b> defines commonly shared information for occurrences of furnitures. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a furniture type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFurnitureType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFurnitureType</b> are represented by instances of <strong>IfcFurniture</strong>. 
Refer to the documentation at <strong>IfcFurniture</strong> for supported property sets, materials, and composition.</p>
<blockquote class="note"></blockquote>

<h1>IfcFurnitureTypeEnum</h1>
                                
                                <h1>IfcInventory</h1>
                                
                                <p>An inventory is a list of items within an enterprise.</p> 
 
<p>Various types of inventory can be included. These are identified by the range of values within the inventory type enumeration which includes space, asset, and furniture. User defined inventories can also be defined for lists of particular types of element such as may be required in operating and maintenance instructions. Such inventories should be constrained to contain a list of elements of a restricted type.<br/><br/>There are a number of actors that can be associated with an inventory, each actor having a role. Actors within the scope of the project are indicated using the <strong>IfcRelAssignsToActor</strong> relationship in which case roles should be defined through the <strong>IfcActorRole</strong> class; otherwise principal actors are identified as attributes of the class. In the existence of both, direct attributes take precedence.<br/><br/>There are a number of costs that can be associated with an inventory, each cost having a role. These are specified through the <i>CurrentValue</i> and <i>OriginalValue</i> attributes.</p>



 
 
 <h1>IfcInventoryTypeEnum</h1>
                                
                                <h1>IfcOccupant</h1>
                                
                                <p>An occupant is a type of actor that defines the form of occupancy of a property.</p> 
 
<p>The principal purpose of <b>IfcOccupant</b> is to determine the nature of occupancy of a property for a particular actor. All characteristics relating to the actor (name and organization details) are inherited from the <strong>IfcActor</strong> entity.</p>

 

 <h1>IfcOccupantTypeEnum</h1>
                                
                                <h1>IfcSystemFurnitureElement</h1>
                                
                                <p>A system furniture element defines components of modular furniture which are not directly placed in a building structure but aggregated inside furniture.</p> 
 
 
  
 <h1>IfcSystemFurnitureElementType</h1>
                                
                                <p>The furnishing element type <b>IfcSystemFurnitureElementType</b> defines commonly shared information for occurrences of system furniture elements. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a system furniture element type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcSystemFurnitureElementType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcSystemFurnitureElementType</b> are represented by instances of <strong>IfcSystemFurnitureElement</strong>. 
Refer to the documentation at <strong>IfcSystemFurnitureElement</strong> for supported property sets, materials, and composition.</p>
<blockquote class="note"></blockquote>

<h1>IfcSystemFurnitureElementTypeEnum</h1>
                                
                                <h1>IfcActionRequest</h1>
                                
                                <p>A request is the act or instance of asking for something, such as a request for information, bid submission, or performance of work.</p> 
 
<p>Requests may take many forms depending on the need including fault reports for maintenance, requests for small works, and purchase requests (where these are to be made through a help desk or buying function).</p> 
 
 


 
 <h1>IfcActionRequestTypeEnum</h1>
                                
                                <h1>IfcCostItem</h1>
                                
                                <p>An <span class="self-ref">IfcCostItem</span> describes a cost or financial value together with descriptive information that describes its context in a form that enables it to be used within a cost schedule. An <span class="self-ref">IfcCostItem</span> can be used to represent the cost of goods and services, the execution of works by a process, lifecycle cost and more.</p>

<p>Each instance of <span class="self-ref">IfcCostItem</span> may have a name and a description. Depending on the use for which the cost is intended, these values should be asserted on the basis of agreement. For instance, the <i>Name</i> attribute could be used to provide a common value that enables distinct instances to be brought together in a nesting arrangement (see below) while the </i>Description</i> attribute may be used to provide text used for item description in a costing schedule.</p>

<p>An <span class="self-ref">IfcCostItem</span> can link one or many <strong>IfcCostValue</strong>'s representing a unit cost, total cost, or a unit cost with one or many quantities used to generate the total cost. The quantities can be given as individual quantities, or those quantities are provided as element quantities by one or many building elements.  The <i>IfcCostValue.CostType</i> attribute indicates the category of cost, which may be used to present the value in a particular column.  For nested cost items (having <strong>IfcRelNests</strong> relationship), <i>IfcCostValue.CostType</i> is significant such that <i>IfcCostValue.AppliedValue</i> is calculated as the sum of all nested costs having the same <i>IfcCostValue.CostType</i> or if set to an asterisk ('*'), then the sum of all nested costs of all cost types. An <strong>IfcCostValue</strong> may represent an original value or a value derived from formulas using <i>IfcAppliedValueRelationship</i>.  For example, taxes may be calculated as a percentage of a subtotal.</p>





<h1>IfcCostItemTypeEnum</h1>
                                
                                <h1>IfcCostSchedule</h1>
                                
                                <p>An <span class="self-ref">IfcCostSchedule</span> brings together instances of <strong>IfcCostItem</strong> either for the purpose of identifying purely cost information as in an estimate for constructions costs or for including cost information within another presentation form such as a work order.</p>




 

<h1>IfcCostScheduleTypeEnum</h1>
                                
                                <h1>IfcPermit</h1>
                                
                                <p>A permit is a permission to perform work in places and on artifacts where regulatory, security or other access restrictions apply.</p> 
 

 

 
 
 
 <h1>IfcPermitTypeEnum</h1>
                                
                                <h1>IfcProjectOrder</h1>
                                
                                <p>A project order is a directive to purchase products and/or perform work, such as for construction or facilities management.</p> 
 
<p>Project orders are typically formal contracts between two organizations, where cost and time information may be rigid or flexible according to contained schedule types and constraints.</p> 
 
 

  
 
 <h1>IfcProjectOrderTypeEnum</h1>
                                
                                <h1>IfcActionSourceTypeEnum</h1>
                                
                                <h1>IfcActionTypeEnum</h1>
                                
                                <h1>IfcAnalysisModelTypeEnum</h1>
                                
                                <h1>IfcAnalysisTheoryTypeEnum</h1>
                                
                                <h1>IfcLoadGroupTypeEnum</h1>
                                
                                <h1>IfcProjectedOrTrueLengthEnum</h1>
                                
                                <h1>IfcRelConnectsStructuralActivity</h1>
                                
                                <p>The <span class="self-ref">IfcRelConnectsStructuralActivity</span> relationship connects a structural activity (either an action or reaction) to a structural member, structural connection, or element.</p>



<h1>IfcRelConnectsStructuralMember</h1>
                                
                                <p>The entity <span class="self-ref">IfcRelConnectsStructuralMember</span> defines all needed properties describing the connection between structural members and structural connection objects (nodes or supports).</p>



<p><b>Use Definition</b></p>

<p><i>Point Connection</i><br>
Instances of the entity <span class="self-ref">IfcRelConnectsStructuralMember</span> shall be used to describe a connection between an instance of <strong>IfcStructuralPointConnection</strong> and either an instance of <strong>IfcStructuralCurveMember</strong> or <strong>IfcStructuralSurfaceMember</strong>.  The <i>RelatedStructuralConnection</i> for point connections has to be of type <strong>IfcStructuralPointConnection</strong>.</p>

<p><i>Curve Connection</i><br>
Instances of the entity <span class="self-ref">IfcRelConnectsStructuralMember</span> shall be used to describe a connection between an instance of <strong>IfcStructuralCurveConnection</strong> and an instance of either <strong>IfcStructuralCurveMember</strong> or <strong>IfcStructuralSurfaceMember</strong>.  The <i>RelatedStructuralConnection</i> for curve connections has to be of type <strong>IfcStructuralCurveConnection</strong>.</p>

<p><i>Surface Connection</i><br>
Instances of the entity <span class="self-ref">IfcRelConnectsStructuralMember</span> shall be used to describe a connection between an instance of <strong>IfcStructuralSurfaceConnection</strong> and an instance of <strong>IfcStructuralSurfaceMember</strong>.  The <i>RelatedStructuralConnection</i> for curve connections has to be of type <strong>IfcStructuralSurfaceConnection</strong>.</p>

<p><i>Coordinate System for Applied Conditions</i><br>
All values defined by <i>AppliedCondition</i> or <i>AdditionalConditions</i> are given within the coordinate system provided by <i>ConditionCoordinateSystem</i>, which is defined relative to the local coordinate system of the structural member.  If the <i>ConditionCoordinateSystem</i> is not defined, the local coordinate system of the structural member is used instead.</p>

<p><i>Supported Length</i><br>
Optionally a supported length can be given, which specifies the length (or width) of the physical connection along a curve connection.</p>

<p>

<table border="0" cellpadding="2" cellspacing="0">
  <tr>
    <td>
      <p><img src="../../../figures/IfcRelConnectsStructuralMember-Fig1.gif" alt="supported length" style="border: 0px solid ; width: 600px; height: 368px;" align="left"></p>
    </td>
  </tr>
  <tr>
    <td>
      <p class="figure">
    </td>
  </tr>
</table>

<h1>IfcRelConnectsWithEccentricity</h1>
                                
                                <p>The entity <span class="self-ref">IfcRelConnectsWithEccentricity</span> adds the definition of eccentricity to the connection between a structural member and a structural connection (representing either a node or support).</p>

<blockquote class="note">
NOTE&nbsp; Another eccentricity model is available independently of eccentric connection specification:  The section profile of a curve member may be inserted eccentrically with respect to the member's reference curve, see definitions at <strong>IfcStructuralCurveMember</strong>.  Whether one or the other or both eccentricity models may be used is subject to information requirements and local agreements.
</blockquote>





<p><b>Use Definition</b></p>

<p><i>Point Connection</i><br>
<i>ConnectionConstraint</i> shall be of type <strong>IfcConnectionPointGeometry</strong> and shall refer to two instances of <strong>IfcVertexPoint</strong>.</p>

<p><i>Curve Connection</i><br>
<i>ConnectionConstraint</i> shall be of type <strong>IfcConnectionCurveGeometry</strong> and shall refer to two instances of <strong>IfcEdge</strong> or subtypes.</p>

<p><i>Surface Connection</i><br>
<i>ConnectionConstraint</i> shall be of type <strong>IfcConnectionSurfaceGeometry</strong> and shall refer to two instances of <strong>IfcFaceSurface</strong>.</p>

<h1>IfcStructuralAction</h1>
                                
                                <p>A structural action is a structural activity that acts upon
a structural item or building element.</p>





<p class="use-head">Relationship use definition</p>
<p>Structural actions are grouped into either an <strong>IfcStructuralLoadGroup</strong> of predefined
type LOAD_GROUP or, more often, an <strong>IfcStructuralLoadCase</strong>.  This is accomplished via the
inverse relationship <i>HasAssignments</i> and an <strong>IfcRelAssignsToGroup</strong> relationship object.
<i>IfcStructuralLoadGroup.LoadGroupFor</i> or <i>IfcStructuralLoadCase.LoadGroupFor</i> respectively
refers to the structural analysis model(s) in which the loads are used.</p>

<p>It is furthermore possible to establish relationships between actions in one analysis model
and reactions in another analysis model which cause the actions.  For example, a support reaction
from one structural system may be taken over as a load onto another supporting structural system.
This is expressed by means of the inverse relationship <i>ReferencedBy</i> of the action and an
<strong>IfcRelAssignsToProduct</strong> relationship object.  <i>IfcRelAssignsToProduct.Name</i> is set to
'Causes' and <i>IfcRelAssignsToProduct.RelatedObjects</i> refers to an instance of a subtype of
<strong>IfcStructuralReaction</strong>.</p>

<h1>IfcStructuralActivity</h1>
                                
                                <p>The abstract entity <span class="self-ref">IfcStructuralActivity</span> combines the definition of actions (such as forces, displacements, etc.) and reactions (support reactions, internal forces, deflections, etc.) which are specified by using the basic load definitions from the <i>IfcStructuralLoadResource</i>.</p>

<p>The differentiation between actions and reactions is realized by instantiating objects either from subclasses of <strong>IfcStructuralAction</strong> or <strong>IfcStructuralReaction</strong> respectively.  They inherit commonly needed attributes from the abstract superclass <span class="self-ref">IfcStructuralActivity</span>, notably the relationship which connects actions or reactions with connections, analysis members, or elements (subtypes of <strong>IfcStructuralItem</strong> or <strong>IfcElement</strong>).</p>

<blockquote class="note">
NOTE&nbsp; Instances of <span class="self-ref">IfcStructuralActivity</span> which are connected with an <strong>IfcElement</strong> are subject to agreements outside the scope of this specification.</blockquote>

<blockquote class="note">
NOTE&nbsp; The semantics of <span class="self-ref">IfcStructuralActivity</span> are only fully defined
if an activity instance is connected with exactly one structural item.  The inverse attribute
<i>AssignedToStructuralItem</i> can only be empty in incomplete models or in conceptual models
which are not yet ready for analysis.</blockquote>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>The following coordinate systems are distinguished:</p>

<ul>
  <li>The so-called global coordinate system is the coordinate system shared by all items and activities which are grouped in a common <strong>IfcStructuralAnalysisModel</strong>.  This coordinate system is established by an <i>ObjectPlacement</i>.  (This coordinate system is not necessarily the same as the <strong>IfcProject</strong>'s world coordinate system.)</li>
  <li>The so-called local coordinate system is a coordinate system local to a structural item (connection or member).  This coordinate system is established by a <i>Representation</i> in conjunction with further use definitions and attributes of subtypes of <strong>IfcStructuralItem</strong>.</li>
</ul>

<p>Representation items in topology representations are always given within the <i>ObjectPlacement</i>, i.e. in so-called global coordinates (global with respect to the <strong>IfcStructuralAnalysisModel</strong> to which this activity belongs).</i>

<p>Locations of the load objects in the <i>AppliedLoad</i> attribute (if of type <strong>IfcStructuralLoadConfiguration</strong>) are always given in local coordinates.</p>

<p>Directions of the load objects in the <i>AppliedLoad</i> attribute refer to global or local coordinates according to the <i>GlobalOrLocal</i> attribute.</p>

<p>The <i>ObjectPlacement</i> and <i>Representation</i> are sometimes not explicitly instantiated; instead they may be implied as described below.  Global and local coordinate systems are then determined in the same way as with explicit placement and representation.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which are connected with a structural item of same dimensionality, i.e.</p>
<ul>
  <li>a point action or reaction connected with a point item (<strong>IfcStructuralPointConnection</strong>),</li>
  <li>a curve action or reaction connected with a curve item (<strong>IfcStructuralCurveConnection</strong>, <strong>IfcStructuralCurveMember</strong>), or</li>
  <li>a surface action or reaction connected with a surface item (<strong>IfcStructuralSurfaceConnection</strong>, <strong>IfcStructuralSurfaceMember</strong>) and which acts on the entire surface of the item and is not specified by isocontours</li>
</ul>
<p>shall not have an <i>ObjectPlacement</i> nor a <i>Representation</i>.  It is implied that the placement and representation of the <span class="self-ref">IfcStructuralActivity</span> is the same as the ones of the <strong>IfcStructuralItem</strong>.</p>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which are connected with</p>
<ul>
  <li>a curve item (<strong>IfcStructuralCurveConnection</strong>, <strong>IfcStructuralCurveMember</strong>) and act on a point of the item</li>, or
  <li>a surface item (<strong>IfcStructuralSurfaceConnection</strong>, <strong>IfcStructuralSurfaceMember</strong>) and act on a point or on a curve or on a part of the surface of the item</li>
</ul>
<p>shall have a topology representation as specified below.  It includes a placement and a product representation. The <strong>IfcProductRepresentation</strong> shall be given by an item in a <i>Representation</i> of type <strong>IfcTopologyRepresentation</strong>.</p>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which are connected with</p>
<ul>
  <li>a surface item (<strong>IfcStructuralSurfaceConnection</strong>, <strong>IfcStructuralSurfaceMember</strong>) and are specified by isocontours</li>
</ul>
<p>shall have a shape representation as specified below.  It includes a placement and a product representation. The <strong>IfcProductRepresentation</strong> shall be given by items in a <i>Representation</i> of type <strong>IfcShapeRepresentation</strong>.  Shape representation and topology representation may be combined.</p>

<p><b>Local Placement</b></p>

<p>The local placement for <span class="self-ref">IfcStructuralActivity</span> is defined in its supertype <strong>IfcProduct</strong>.  It is defined by the <strong>IfcLocalPlacement</strong>, which establishes a global coordinate system which shall be common to all items and activities in an <strong>IfcStructuralAnalysisModel</strong>.</p>

<p><b>Topology Representation</b></p>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which act on parts of a surface item shall have a topology representation given by a face with underlying surface geometry, <strong>IfcFaceSurface</strong>, which should be the single item of <i>IfcTopologyRepresentation.Items</i>.  The surface establishes a local coordinate system of the activity:</p>
<ul>
  <li>The origin of surface parameters u,v is the origin of the local coordinate system.</li>
  <li>The local x and y directions follow the tangents on the surface and are in parallel with and directed like u and v respectively.</li>
  <li>The local z direction is in parallel with and directed like the surface normal.</li>
</ul>
<blockquote>
  <ul>
    <li><i>RepresentationIdentifier</i>: 'Reference'</li>
    <li><i>RepresentationType</i>: 'Face'</li>
  </ul>
</blockquote>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which act on a curve on a surface item shall have a topology representation given by an edge (<strong>IfcEdge</strong> or subtype), which should be the single item of <i>IfcTopologyRepresentation.Items</i>.  The curve geometry shall be compatible with the surface geometry of the connected item.  In conjunction with this surface, the curve establishes a local coordinate system of the activity:</p>
<ul>
  <li>The origin of the curve parameter u is the origin of the local coordinate system.</li>
  <li>The local x direction follows the tangent on the curve and is directed like u.</li>
  <li>The local z direction is in parallel with and directed like the surface normal of the connected surface item.</li>
  <li>The local x,y,z directions form a right-handed Cartesian coordinate system.</li>
</ul>
<blockquote>
  <ul>
    <li><i>RepresentationIdentifier</i>: 'Reference'</li>
    <li><i>RepresentationType</i>: 'Edge'</li>
  </ul>
</blockquote>
<blockquote class="note">NOTE&nbsp; While an <strong>IfcEdge</strong> (or <strong>IfcOrientedEdge</strong> with underlying <strong>IfcEdge</strong>) does not provide an explicit underlying curve geometry, it may be used to imply an underlying straight line as reference curve with the origin of the curve parameter at the start vertex point.</blockquote>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which act on a single point on a curve or surface item shall have a topology representation given by an <strong>IfcVertexPoint</strong>, which should be the single item of <i>IfcTopologyRepresentation.Items</i>.  The point geometry shall be compatible with the curve or surface geometry of the connected item.  The local coordinate system of the activity is oriented by the curve or surface geometry of the connected item as described above for activities with edge or face topology.</p>
<blockquote>
  <ul>
    <li><i>RepresentationIdentifier</i>: 'Reference'</li>
    <li><i>RepresentationType</i>: 'Vertex'</li>
  </ul>
</blockquote>

<p><b>Shape Representation</b></p>

<p>Instances of <span class="self-ref">IfcStructuralActivity</span> which act on a surface item and are specified by isocontours (level sets) shall have a shape representation given by a set of curves on a surface, <i>IfcPCurve</i>.  The basis surface shall comply with or preferably be identical with the surface of the structural item to which the activity is connected.  The representation identifier and type of this geometric representation is:</p>
<blockquote>
  <ul>
    <li><i>RepresentationIdentifier</i>: 'Level set'</li>
    <li><i>RepresentationType</i>: 'GeometricCurveSet'</li>
  </ul>
</blockquote>

<h1>IfcStructuralActivityAssignmentSelect</h1>
                                
                                <h1>IfcStructuralAnalysisModel</h1>
                                
                                <p>The <span class="self-ref">IfcStructuralAnalysisModel</span> is used to assemble all information needed to represent a structural analysis model.  It encompasses certain general properties (such as analysis type), references to all contained structural members, structural supports or connections, as well as loads and the respective load results.</p>

<p>Important functionalities for the description of an analysis model are derived from existing IFC entities:</p>

<ul>
  <li>From <strong>IfcSystem</strong> it inherits the ability to couple the analysis model via <strong>IfcRelServicesBuildings</strong> to one or more <strong>IfcBuilding</strong>s as necessary.</li>
  <li>From <strong>IfcGroup</strong> it inherits the inverse attribute <i>IsGroupedBy</i>, pointing to the relationship class <strong>IfcRelAssignsToGroup</strong>.  This allows to group structural members (instances of <strong>IfcStructuralMember</strong>), and supports (instances of <strong>IfcStructuralConnection</strong>) which belong to a specific analysis model.
      <blockquote class="note">NOTE&nbsp;  Loads (as instances of <strong>IfcStructuralAction</strong>) are not included through <i>IsGroupedBy</i>.  Loads are assigned through the <i>LoadedBy</i> attribute relationship, using load groups as a grouping mechanism.  Only top-level load groups should be referenced via <i>LoadedBy</i>, i.e. load combinations if any load combinations exist, or load cases if no load combinations exist in this analysis model.</blockquote>
      <blockquote class="note">NOTE&nbsp;  Results (as instances of <strong>IfcStructuralReaction</strong>) are not included through <i>IsGroupedBy</i>.  Results are assigned through the <i>HasResults</i> attribute relationship, using result groups as a grouping mechanism.</blockquote>
  </li>
  <li>From <strong>IfcObject</strong> it inherits the inverse attribute <i>IsDecomposedBy</i> pointing to the relationship class <strong>IfcRelNests</strong>. It provides the hierarchy between the separate (partial) analysis models.</li>
</ul>





<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>If one or more structural item (instance of a subtype of <strong>IfcStructuralItem</strong>) is grouped into an <span class="self-ref">IfcStructuralAnalysisModel</span>, the attribute <i>SharedPlacement</i> shall be provided with a value.</li>
  <li>The <i>ObjectPlacement</i>s of all structural items which are grouped into the same instance of <span class="self-ref">IfcStructuralAnalysisModel</span> shall refer to the same instance of <strong>IfcObjectPlacement</strong> as <i>IfcStructuralAnalysisModel.SharedPlacement</i>.</li>
</ol>

<blockquote class="note">NOTE&nbsp; This rule is necessary to achieve consistent topology representations.  The topology representations of structural items in an analysis model are meant to share vertices and edges und must therefore have the same object placement.</blockquote>

<blockquote class="note">NOTE&nbsp; A structural item may be grouped into more than one analysis model.  In this case, all these models must use the same instance of <strong>IfcObjectPlacement</strong>.</blockquote>


<h1>IfcStructuralConnection</h1>
                                
                                <p>An <span class="self-ref">IfcStructuralConnection</span> represents a structural connection object (node connection, edge connection, or surface connection) or supports.</p>



<h1>IfcStructuralCurveAction</h1>
                                
                                <p>A structural curve action defines an action which is distributed over a curve.
A curve action may be connected with a curve member or curve connection, or
surface member or surface connection.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Standard Case:<br>
If connected with a curve item, instances of <span class="self-ref">IfcStructuralCurveAction</span> shall not have an
<i>ObjectPlacement</i> nor a <i>Representation</i>.  It is implied that the placement and
representation of the <strong>IfcStructuralActivity</strong> is the same as the ones of the member or
connection.</p>

<p>Special Case 1:<br>
If connected with a surface item, instances of <span class="self-ref">IfcStructuralCurveAction</span> shall have an
<i>ObjectPlacement</i> and <i>Representation</i>, containing an <strong>IfcEdgeCurve</strong>.  See
<strong>IfcStructuralActivity</strong> for further definitions.</p>

<p>Special Case 2:<br>
If not connected with a structural item (which may happen in an incomplete or conceptual model),
a curve action should have an <i>ObjectPlacement</i> and <i>Representation</i>, containing an
<strong>IfcEdgeCurve</strong>.  See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>If the curve action is of the predefined type CONST, SINUS, or PARABOLA,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> must not be of type
      <strong>IfcStructuralLoadConfiguration</strong>.  In case of SINUS and PARABOLA, the load item
      defines the maximum of the load at the centre of the load distribution.</li>
  <li>If the curve action is of the predefined type LINEAR,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two items.</li>
  <li>If the curve action is of the predefined type POLYGONAL,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain three or more items.</li>
  <li>If the curve action is of the predefined type DISCRETE,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two or more items.</li>
  <li>In case of types LINEAR, POLYGONAL, and DISCRETE, the load items shall have
      one-dimensional <i>IfcStructuralLoadConfiguration.Locations</i>, defining the
      location of the load samples in local coordinates of the curve action.
      The load items shall be provided in ascending order according to their locations.
      The first and the last load item define the extent of the load distribution.</i>
  <li>Point actions must be of type DISCRETE, thus contain two or more load points.
      (Single point loads are modeled by <strong>IfcStructuralPointAction</strong>.)</li>
  <li>All items in <i>SELF\IfcStructuralActivity.AppliedLoad\IfcStructuralLoadConfiguration.Values</i>
      shall be of the same entity type.</li>
</ol>


<h1>IfcStructuralCurveActivityTypeEnum</h1>
                                
                                <h1>IfcStructuralCurveConnection</h1>
                                
                                <p>Instances of <span class="self-ref">IfcStructuralCurveConnection</span> describe edge 'nodes', i.e. edges where two or more surface members are joined, or edge supports.  Edge curves may be straight or curved.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong>.  The local coordinate system is established by the reference curve given by topology representation and by the attribute <i>Axis</i>.  The local x axis is parallel with the tangent on the reference curve.  The local z axis is located in the surface which is created by sweeping <i>Axis</i> along the reference curve and is directed according to <i>Axis</i>.  The local y axis is directed such that x,y,z form a right-handed Cartesian coordinate system.</p>

<h1>IfcStructuralCurveMember</h1>
                                
                                <p>Instances of <span class="self-ref">IfcStructuralCurveMember</span> describe edge members, i.e. structural analysis idealizations of beams, columns, rods etc..  Curve members may be straight or curved.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong>.  The local coordinate system is established by the reference curve given by topology representation and by the attribute <i>Axis</i>.  The local x axis is parallel with the tangent on the reference curve.  The local z axis is located in the surface which is created by sweeping <i>Axis</i> along the reference curve and is directed according to <i>Axis</i>.  The local y axis is directed such that x,y,z form a right-handed Cartesian coordinate system.</p>


<h1>IfcStructuralCurveMemberTypeEnum</h1>
                                
                                <h1>IfcStructuralCurveMemberVarying</h1>
                                
                                <p>This entity describes edge members with varying profile properties.  Each instance of <span class="self-ref">IfcStructuralCurveMemberVarying</span> is composed of two or more instances of <strong>IfcStructuralCurveMember</strong> with differing profile properties.  These subordinate members relate to the instance of <span class="self-ref">IfcStructuralCurveMemberVarying</span> by <strong>IfcRelAggregates</strong>.</p>

<blockquote class="note">
NOTE&nbsp; A curve member whose variation of profile properties can be sufficiently described by a start profile and an end profile (e.g. tapers) shall be modeled as a single direct instance of the supertype <strong>IfcStructuralCurveMember</strong>.
</blockquote>

<blockquote class="note">
NOTE&nbsp; It is recommended that structural activities (actions or reactions) are not connected with aggregated <span class="self-ref">IfcStructuralCurveMemberVarying</span> but only with the <strong>IfcStructuralCurveMember</strong>s in the aggregation.  That way, difficulties in interpretation of local coordinates are avoided.
</blockquote>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong> and <strong>IfcStructuralCurveMember</strong>.  The local coordinates of the aggregate are derived from those of its parts.  Length measures in local x direction of the aggregate depend on continuity and lengths of the parts.  The <i>Axis</i> of the aggregate shal be the same as the <i>Axis</i> of the part at the start of the aggregate.</p>

<p><b><u>Material Use Definition</u></b></p>

<p>Only the individual parts (direct instances of <strong>IfcStructuralCurveMember</strong>) carry material and profile information.</p>

<h1>IfcStructuralCurveReaction</h1>
                                
                                <p>This entity defines a reaction which occurs distributed over a curve.
A curve reaction may be connected with a curve member or curve connection,
or surface member or surface connection.</p>



<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Standard Case:<br>
If connected with a curve item, instances of <i>IfcStructuralCurveRection</i> shall not
have an <i>ObjectPlacement</i> nor a <i>Representation</i>.  It is implied that the
placement and representation of the <strong>IfcStructuralActivity</strong> is the same as the ones
of the member or connection.</p>

<p>Special Case:<br>
If connected with a surface item, instances of <span class="self-ref">IfcStructuralCurveReaction</span> shall
have an <i>ObjectPlacement</i> and <i>Representation</i>, containing an <strong>IfcEdgeCurve</strong>.
See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>If the curve reaction is of the predefined type CONST,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> must not be of type
      <strong>IfcStructuralLoadConfiguration</strong>.</li>
  <li>If the curve reaction is of the predefined type LINEAR,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two items.</li>
  <li>If the curve reaction is of the predefined type POLYGONAL,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain three or more items.</li>
  <li>If the curve action is of the predefined type DISCRETE,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two or more items.</li>
  <li>In case of types LINEAR, POLYGONAL, and DISCRETE, the load items shall have
      one-dimensional <i>IfcStructuralLoadConfiguration.Locations</i>, defining the
      location of the result samples in local coordinates of the curve reaction.
      The load items shall be provided in ascending order according to their locations.
      The first and the last load item define the extent of the result distribution.</i>
  <li>If the curve reaction is of the predefined type EQUIDISTANT,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two or more items.
      <i>IfcStructuralLoadConfiguration.Locations</i> shall be omitted as it is implicit.
      The load items shall be provided in ascending order.  The first and the last load
      item are located at the beginning and end of the result distribution, respectively.</li>
  <li>All items in <i>SELF\IfcStructuralActivity.AppliedLoad\IfcStructuralLoadConfiguration.Values</i>
      shall be of the same entity type.</li>
</ol>

<h1>IfcStructuralItem</h1>
                                
                                <p>The abstract entity <span class="self-ref">IfcStructuralItem</span> is the generalization of structural members and structural connections, that is, analysis idealizations of elements in the building model.  It defines the relation between structural members and connections with structural activities (actions and reactions).</p>

<p>Relationships between elements in the building model and structural items as their idealizations can be expressed by instances of <strong>IfcRelAssignsToProduct</strong>.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>The following coordinate systems are distinguished:</p>

<ul>
  <li>The so-called global coordinate system is the coordinate system shared by all items and activities which are grouped in a common <strong>IfcStructuralAnalysisModel</strong>.  This coordinate system is established by <i>SELF\IfcProduct.ObjectPlacement</i>.  (This coordinate system is not necessarily the same as the <strong>IfcProject</strong>'s world coordinate system.)</li>
  <li>The so-called local coordinate system is a coordinate system local to a structural item (connection or member).  This coordinate system is established by a <i>Representation</i> (attribute inherited from <strong>IfcProduct</strong>) in conjunction with further use definitions and attributes of subtypes of <span class="self-ref">IfcStructuralItem</span>.</li>
</ul>

<p>Representation items in topology representations are always given within the <i>ObjectPlacement</i>, i.e. in so-called global coordinates (global with respect to the <strong>IfcStructuralAnalysisModel</strong> to which this item belongs).</i>

<p>The usage of local coordinate systems is further defined in subtypes.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Instances of <span class="self-ref">IfcStructuralItem</span> shall have a topology representation.  It includes a placement and a product representation. The <strong>IfcProductRepresentation</strong> shall be given by an item in a <i>Representation</i> of type <strong>IfcTopologyRepresentation</strong>.</p>

<p><b>Local Placement</b></p>

<p>The local placement for <span class="self-ref">IfcStructuralItem</span> is defined in its supertype <strong>IfcProduct</strong>.  It is defined by the <strong>IfcLocalPlacement</strong>, which establishes a global coordinate system which shall be common to all items and activities in an <strong>IfcStructuralAnalysisModel</strong>.</p>

<p><b>Topology Representation</b></p>

<p>Instances of <span class="self-ref">IfcStructuralItem</span> shall have a topology representation given by an instance of a subtype of <strong>IfcTopologicalRepresentationItem</strong>, which should be the single item of <i>IfcTopologyRepresentation.Items</i>.  Depending on the dimensionality of the structural item, one of the following types of toplogical representation items shall be used:</p>

<ul>
  <li>Point connections shall be represented by an <strong>IfcVertexPoint</strong> with an underlying <strong>IfcCartesianPoint</strong>.
      The Cartesian point is the reference point of the connection in the so-called global coordinate system.
      The following labels are used in the <strong>IfcTopologyRepresentation</strong>:
      <ul>
        <li><i>RepresentationIdentifier</i>: 'Reference'</li>
        <li><i>RepresentationType</i>: 'Vertex'</li>
      </ul>
      <br>
      </li>

  <li>Curve members and curve connections shall either be represented by an <strong>IfcOrientedEdge</strong>,
      <strong>IfcEdgeCurve</strong>, or <strong>IfcEdge</strong>.  The curve to which the <strong>IfcEdgeCurve</strong> (or an
      <strong>IfcOrientedEdge</strong>'s underlying <strong>IfcEdgeCurve</strong>) refers to is the reference curve of the structural
      item in the global coordinate system.  Start and end vertex of the edge shall be <strong>IfcVertexPoint</strong>s
      with underlying <strong>IfcCartesianPoint</strong>s.
      The following labels are used in the <strong>IfcTopologyRepresentation</strong>:
      <ul>
        <li><i>RepresentationIdentifier</i>: 'Reference'</li>
        <li><i>RepresentationType</i>: 'Edge'</li>
      </ul>
<blockquote class="note">NOTE&nbsp; While an <strong>IfcEdge</strong> (or <strong>IfcOrientedEdge</strong> with underlying
      <strong>IfcEdge</strong>) does not provide an explicit underlying curve geometry, it may be used to imply an
      underlying straight line as reference curve with the origin of the curve parameter at the start vertex
      point.</blockquote>
      </li>

  <li>Surface members and surface connections shall be represented by an <strong>IfcFaceSurface</strong>.
      The underlying surface defines the reference surface of the structural surface item in the global
      coordiante system.  All edges in the bounds of the face shall conform to the rules for edge
      representations of structural curve item.
      The following labels are used in the <strong>IfcTopologyRepresentation</strong>:
      <ul>
        <li><i>RepresentationIdentifier</i>: 'Reference'</li>
        <li><i>RepresentationType</i>: 'Face'</li>
      </ul>
      </li>
</ul>

<p>The reference point, reference curve, or reference surface partially or completely defines the local coordinate system of the represented structural item according to the following rules.  In all cases, The local x,y,z directions form a right-handed Cartesian coordinate system.</p>

<p><i>Structural point items</i></p>

<ul>
  <li>The reference point in the representation is the origin of the local coordinate system of the structural item.</li>
  <li>The axes of the local coordiante system are either parallel with and directed like the so-called global coordinate axes, or are oriented according to definitions at the respective subtype of <span class="self-ref">IfcStructuralItem</span>.</li>
</ul>

<p><i>Structural curve items</i></p>

<ul>
  <li>The u parameter origin of the reference curve in the representation is the origin of the local coordinate system of the structural item.</li>
  <li>The local x axis is parallel with the tangent on the curve and directed like the u parameter direction.</li>
  <li>The local y and z axes are oriented according to definitions at the respective subtypes of <span class="self-ref">IfcStructuralItem</span>.</li>
</ul>

<p><i>Structural surface items</i></p>

<ul>
  <li>The u,v parameter origin of the reference surface in the representation is the origin of the local coordinate system of the structural item.</li>
  <li>The local x and y directions follow the tangents on the surface and are in parallel with and directed like u and v respectively.</li>
  <li>The local z direction is in parallel with and directed like the surface normal.</li>
</ul>

<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>The <i>ObjectPlacement</i>s of all structural items which are grouped into the same instance of <strong>IfcStructuralAnalysisModel</strong> shall refer to the same instance of <strong>IfcObjectPlacement</strong>.</li>
</ol>

<blockquote class="note">NOTE&nbsp; This rule is necessary to achieve consistent topology representations.  The topology representations of structural items in an analysis model are meant to share vertices and edges und must therefore have the same object placement.</blockquote>

<blockquote class="note">NOTE&nbsp; A structural item may be grouped into more than one analysis model. In this case, all these models must use the same instance of <strong>IfcObjectPlacement</strong>.</blockquote>

<h1>IfcStructuralLinearAction</h1>
                                
                                <p>This entity defines an action with constant value which is distributed over a curve.</p>





<blockquote class="note">
NOTE&nbsp; Like its supertype <strong>IfcStructuralCurveAction</strong>, this action type may also act on curved edges.
</blockquote>

<h1>IfcStructuralLoadCase</h1>
                                
                                <p>A load case is a load group, commonly used to group loads from the same action source.</p>



<h1>IfcStructuralLoadGroup</h1>
                                
                                <p>The entity <span class="self-ref">IfcStructuralLoadGroup</span> is used to structure the
physical impacts.  By using the grouping features inherited from <strong>IfcGroup</strong>, instances of
<strong>IfcStructuralAction</strong> (or its subclasses) and of <span class="self-ref">IfcStructuralLoadGroup</span> can be used to
define load groups, load cases and load combinations.  (See also <strong>IfcLoadGroupTypeEnum</strong>.)</p>

<blockquote class="note">
NOTE&nbsp; Important functionality for the description of a load-bearing system
is derived from the existing IFC entity <strong>IfcGroup</strong>.  This class provides, via the relationship
class <strong>IfcRelAssignsToGroup</strong>, the needed grouping mechanism.  In this way, instances of
<strong>IfcStructuralAction</strong> belonging to a specific load group can be unambiguously determined.
</blockquote>

<blockquote class="note">
NOTE&nbsp; The relationship class <strong>IfcRelAssignsToGroupByFactor</strong> is
used to group load cases into load combinations.  The factor provided in this assignment relationship
is to applied together with the optional <i>IfcStructuralLoadGroup.Coefficient</i>.  Unlike this
coefficient which always affects the load group, the <i>IfcRelAssignsToGroupByFactor.Factor</i> is
specific for a load case&mdash;load combination pair.  As many instances of
<strong>IfcRelAssignsToGroupByFactor</strong> are used within one load combination as there are different
<i>Factor</i>s to be applied to load cases in the load combination.
On the other hand, a load case may appear in more than one load combination
and can have a different <i>Factor</i> in each assignment by <strong>IfcRelAssignsToGroupByFactor</strong>.
</blockquote>





<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>Load groups of type LOAD_GROUP shall only contain instances of <strong>IfcStructuralAction</strong>.</li>
  <li>Load groups of type LOAD_CASE shall always be instantiated from the subtype <strong>IfcStructuralLoadCase</strong>,
      not directly from the generic type <span class="self-ref">IfcStructuralLoadGroup</span> itself.</li>
  <li>Instances of <strong>IfcStructuralLoadCase</strong> shall only contain instances of <strong>IfcStructuralAction</strong>
      or/ and instances of <span class="self-ref">IfcStructuralLoadGroup</span> of type LOAD_GROUP.</li>
  <li>Load groups of type LOAD_COMBINATION shall only contain instances of <strong>IfcStructuralLoadCase</strong>.</li>
</ol>

<h1>IfcStructuralMember</h1>
                                
                                <p>The abstract entity <span class="self-ref">IfcStructuralMember</span> is the superclass of all structural items which represent the idealized structural behavior of building elements.</p>





<h1>IfcStructuralPlanarAction</h1>
                                
                                <p>This entity defines an action with constant value which is distributed over a surface.</p>





<blockquote class="note">
NOTE&nbsp; Like its supertype <strong>IfcStructuralSurfaceAction</strong>, this action type may also act on curved faces.
</blockquote>

<h1>IfcStructuralPointAction</h1>
                                
                                <p>This entity defines an action which acts on a point.
A point action is typically connected with a point connection.
It may also be connected with a curve member or curve connection,
or surface member or surface connection.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Standard Case:<br>
If connected with a point item, instances of <span class="self-ref">IfcStructuralPointAction</span>
shall not have an <i>ObjectPlacement</i> nor a <i>Representation</i>.
It is implied that the placement and representation of the action is the same
as the structural item.</p>

<p>Special Case 1:<br>
If connected with a curve item or surface item, instances of <span class="self-ref">IfcStructuralPointAction</span>
shall have an <i>ObjectPlacement</i> and <i>Representation</i>, containing an <strong>IfcVertexPoint</strong>.
See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<blockquote class="note">NOTE&nbsp; In order to model concentrated actions on a curve or surface item,
<strong>IfcStructuralCurveAction</strong> or <strong>IfcStructuralSurfaceAction</strong> of type DISCRETE is
preferable since they do not require an extra topology representation in this case.
An <span class="self-ref">IfcStructuralPointAction</span> should be used for a concentrated action on a curve or surface
item only when an explicit vertex point representation is actually desired.</blockquote>

<p>Special Case 2:<br>
If not connected with a structural item (which may happen in an incomplete or
conceptual model), a point action should have an <i>ObjectPlacement</i> and
<i>Representation</i>, containing an <strong>IfcVertexPoint</strong>.
See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<h1>IfcStructuralPointConnection</h1>
                                
                                <p>Instances of <span class="self-ref">IfcStructuralPointConnection</span> describe structural nodes or point supports.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong>.  The local coordinate system is established by the reference point given by topology representation and by the attribute <i>ConditionCoordinateSystem</i>.</p>

<h1>IfcStructuralPointReaction</h1>
                                
                                <p>This entity defines a reaction which occurs at a point.
A point reaction is typically connected with a point connection.
It may also be connected with a curve member or curve connection,
or surface member or surface connection.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Standard Case:<br>
If connected with a point item, instances of <span class="self-ref">IfcStructuralPointReaction</span>
shall not have an <i>ObjectPlacement</i> nor a <i>Representation</i>.
It is implied that the placement and representation of the reaction is the same
as the structural item.</p>

<p>Special Case 1:<br>
If connected with a curve item or surface item, instances of <span class="self-ref">IfcStructuralPointReaction</span>
shall have an <i>ObjectPlacement</i> and <i>Representation</i>, containing an <strong>IfcVertexPoint</strong>.
See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<blockquote class="note">NOTE&nbsp; In order to model concentrated reactions on a curve or surface item,
<strong>IfcStructuralCurveReaction</strong> or <strong>IfcStructuralSurfaceAction</strong> of type DISCRETE is
preferable since they do not require an extra topology representation in this case.
An <span class="self-ref">IfcStructuralPointReaction</span> should be used for a concentrated reaction on a curve or surface
item only when an explicit vertex point representation is actually desired.</blockquote>

<p>Special Case 2:<br>
If not connected with a structural item (which may happen in an incomplete or
conceptual model), a point action should have an <i>ObjectPlacement</i> and
<i>Representation</i>, containing an <strong>IfcVertexPoint</strong>.
See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<h1>IfcStructuralReaction</h1>
                                
                                <p>A structural reaction is a structural activity that results from a
structural action imposed to a structural item or building element.  Examples are support reactions,
internal forces, and deflections.</p>





<p>Structural reactions are grouped into <strong>IfcStructuralResultGroup</strong>s via the inverse
relationship <i>HasAssignments</i> and an <strong>IfcRelAssignsToGroup</strong> relationship object.
<i>IfcStructuralResultGroup.ResultGroupFor</i> finally refers to the structural analysis model
in which the results occur.</p>

<p>It is furthermore possible to establish relationships between reactions in one analysis model
and actions which they cause in another analysis model.  For example, a support reaction from one
structural system may be taken over as a load onto another supporting structural system.  This is
expressed by means of the inverse relationship <i>HasAssignments</i> of the reaction and an
<strong>IfcRelAssignsToProduct</strong> relationship object.  <i>IfcRelAssignsToProduct.Name</i> is set to
'Causes' and <i>IfcRelAssignsToProduct.RelatingProduct</i> refers to an instance of a subtype of
<strong>IfcStructuralAction</strong>.</p>


<h1>IfcStructuralResultGroup</h1>
                                
                                <p>Instances of the entity <span class="self-ref">IfcStructuralResultGroup</span> are used to group results of structural analysis calculations and to capture the connection to the underlying basic load group.  The basic functionality for grouping inherited from <strong>IfcGroup</strong> is used to collect instances from <strong>IfcStructuralReaction</strong> or its respective subclasses.</p>





<h1>IfcStructuralSurfaceAction</h1>
                                
                                <p>This entity defines an action which is distributed over a surface.
A surface action may be connected with a surface member or surface connection.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Standard Case:<br>
If connected with a surface item and acting on its entirety, instances of
<strong>IfcStructuralCurveAction</strong> shall not have an <i>ObjectPlacement</i> nor a
<i>Representation</i>.  It is implied that the placement and representation of the
<strong>IfcStructuralActivity</strong> is the same as the ones of the member or connection.</p>

<p>Special Case 1:<br>
If connected with a surface item but acting only on a part of it, instances of
<span class="self-ref">IfcStructuralSurfaceAction</span> shall have an <i>ObjectPlacement</i> and
<i>Representation</i>, containing an <strong>IfcFaceSurface</strong> which topologically
defines the loaded part of the surface.  See <strong>IfcStructuralActivity</strong> for further
definitions.</p>

<p>Special Case 2:<br>
If not connected with a structural item (which may happen in an incomplete or conceptual model),
a surface action should have an <i>ObjectPlacement</i> and <i>Representation</i>, containing an
<strong>IfcFaceSurface</strong>.  See <strong>IfcStructuralActivity</strong> for further definitions.</p>

<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>If the surface action is of the predefined type CONST,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> must not be of type
      <strong>IfcStructuralLoadConfiguration</strong>.</li>
  <li>If the surface action is of the predefined type BILINEAR,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain three items
      with two-dimensional <i>IfcStructuralLoadConfiguration.Locations</i>,
      defining the location of the load samples in local coordinates of the
      surface action.</i>
  <li>If the surface action is of the predefined type DISCRETE,
      <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type
      <strong>IfcStructuralLoadConfiguration</strong> and shall contain two or more
      items with two-dimensional locations.</i>
  <li>Point loads must be of type DISCRETE, thus contain two or more load points.
      (Single point loads are modeled by <i>IfcStructuralPointLoad</i>.)</li>
  <li>All items in <i>SELF\IfcStructuralActivity.AppliedLoad\IfcStructuralLoadConfiguration.Values</i>
      shall be of the same entity type.</li>
</ol>

<h1>IfcStructuralSurfaceActivityTypeEnum</h1>
                                
                                <h1>IfcStructuralSurfaceConnection</h1>
                                
                                <p>Instances of <span class="self-ref">IfcStructuralSurfaceConnection</span> describe face 'nodes', i.e. faces where two or more surface members are joined, or face supports.  Face surfaces may be planar or curved.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong>.  The local coordinate system is established by the reference surface given by topology representation.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>Instances of <span class="self-ref">IfcStructuralSurfaceConnection</span> shall have a topology representation which consists of one <strong>IfcFaceSurface</strong>, representing the reference surface of the surface connection.  See definitions at <strong>IfcStructuralItem</strong> for further specifications.</p>

<h1>IfcStructuralSurfaceMember</h1>
                                
                                <p>Instances of <span class="self-ref">IfcStructuralSurfaceMember</span> describe face members, that is, structural analysis idealizations of slabs, walls, and shells.  Surface members may be planar or curved.</p>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong>.  The local coordinate system is established by the reference surface given by topology representation.</p>

<p><b><u>Material Use Definition</u></b></p>

<p>The material of direct instances <span class="self-ref">IfcStructuralSurfaceMember</span> (in contrast to instances of the subtype <strong>IfcStructuralSurfaceMemberVarying</strong>) is defined by <strong>IfcMaterial</strong> and attached by the <i>IfcRelAssociatesMaterial.RelatingMaterial</i>.  It is accessible by the inverse <i>HasAssociations</i> relationship.</p>

<p>The material is specified minimally by a name which corresponds with an agreed upon standardized structural material designation.  An external reference to the source which specifies the material designation should be provided.  Alternatively, structural material properties may be provided by means of <i>IfcMechanicalMaterialProperties</i> and <i>IfcExtendedMaterialProperties</i>.</p>

<p>Direct instances of <span class="self-ref">IfcStructuralSurfaceMember</span> are assumed to be located centrically relative to their reference surface.  Their depth is provided in the attribute <i>Thickness</i>.</p>

<h1>IfcStructuralSurfaceMemberTypeEnum</h1>
                                
                                <h1>IfcStructuralSurfaceMemberVarying</h1>
                                
                                <p>This entity describes surface members with varying section properties.  The properties are provided by means of
<span class="self-ref">Pset_StructuralSurfaceMemberVaryingThickness</span>
via <strong>IfcRelDefinesByProperties</strong>, or by means of aggregation:  An instance of <span class="self-ref">IfcStructuralSurfaceMemberVarying</span> may be composed of two or more instances of <strong>IfcStructuralSurfaceMember</strong> with differing section properties.  These subordinate members relate to the instance of <span class="self-ref">IfcStructuralSurfaceMemberVarying</span> by <strong>IfcRelAggregates</strong>.</p>

<blockquote class="note">
NOTE&nbsp; It is recommended that structural activities (actions or reactions) are not connected with aggregated <span class="self-ref">IfcStructuralSurfaceMemberVarying</span> but only with the <strong>IfcStructuralSurfaceMember</strong>s in the aggregation.  That way, difficulties in interpretation of local coordinates are avoided.
</blockquote>





<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralItem</strong> and <strong>IfcStructuralSurfaceMember</strong>.  The local coordinates of an aggregate are generally undefined since continuity of local coordinates of the parts is not ensured.</p>

<p><b><u>Material Use Definition</u></b></p>

<p>In case of aggregation, only the individual parts (direct instances of <strong>IfcStructuralSurfaceMember</strong>) carry material and thickness information.  Otherwise, definitions at <strong>IfcStructuralSurfaceMember</strong> apply.</p>

<h1>IfcStructuralSurfaceReaction</h1>
                                
                                <p>This entity defines a reaction which occurs distributed over a surface.  A surface reaction may be connected with a surface member or surface connection.</p>



<p><b><u>Coordinate Systems</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p><b><u>Topology Use Definitions</u></b>:</p>

<p>See definitions at <strong>IfcStructuralActivity</strong>.</p>

<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>If the surface reaction is of the predefined type CONST, <i>SELF\IfcStructuralActivity.AppliedLoad</i> must not be of type <strong>IfcStructuralLoadConfiguration</strong>.</li>
  <li>If the surface reaction is of the predefined type BILINEAR, <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type <strong>IfcStructuralLoadConfiguration</strong> and shall contain three items with two-dimensional <i>IfcStructuralLoadConfiguration.Locations</i>, defining the location of the result samples in local coordinates of the surface reaction.</i>
  <li>If the surface reaction is of the predefined type DISCRETE, <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type <strong>IfcStructuralLoadConfiguration</strong> and shall contain two or more items with two-dimensional locations.</i>
  <li>If the surface reaction is of the predefined type ISOCONTOUR, <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be of type <strong>IfcStructuralLoadConfiguration</strong> and shall contain the same number of items as the set <i>SELF.IfcProduct.Representation.Representations[?].Items</i>.  Each item in the load configuration shall have a two-dimensional location, defining the location of the result samples in local coordinates of the surface reaction.  Each item in <i>SELF\IfcStructuralActivity.AppliedLoad</i> shall be located at exactly one of the isocontours.
  <blockquote class="note">NOTE&nbsp;  The set of representation items is unordered, hence result locations are required to correlate result values and isocontours.</blockquote>
  <blockquote class="note">NOTE&nbsp;  Isocontours are represented as <i>IfcPCurve</i>s which are defined in terms of surface parameters u,v, while result locations are given in local surface item coordinates x,y.  It is strongly recommended that the surface parameterization u,v is scaled 1:1 in order to avoid different scales of u,v versus x,y.  If u,v are scaled 1:1 and the <i>IfcPCurve</i>'s base surface is identical with the surface item's base surface, u,v and local x,y are identical.</blockquote>
  </li>
  <li>All items in <i>SELF\IfcStructuralActivity.AppliedLoad\IfcStructuralLoadConfiguration.Values</i> shall be of the same entity type.</li>
</ol>

<h1>IfcBendingParameterSelect</h1>
                                
                                <h1>IfcFooting</h1>
                                
                                <p>A footing is a part of the foundation of a structure that spreads and transmits the load to the soil. A footing is also characterized as shallow foundation, where the loads are transfered to the ground near the surface.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to
ISO 6707-1: stepped construction that spreads the load at the foot of a wall or column.</blockquote>



<blockquote class="note">
NOTE&nbsp; Slab foundations, also called slab-on-grade, are not instantiated as <span class="self-ref">IfcFooting</span> but as <strong>IfcSlab</strong> or as its subtype <strong>IfcSlabStandardCase</strong>, <strong>IfcSlabElementedCase</strong> with a predefined type of <strong>IfcSlabTypeEnum</strong>.BASESLAB. Deep foundations, which transfer the loads to subsurface layers, are represented by <strong>IfcPile</strong>.
</blockquote>

<h1>IfcFootingType</h1>
                                
                                <p>The building element type <b>IfcFootingType</b> defines commonly shared information for occurrences of footings. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a footing type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcFootingType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcFootingType</b> are represented by instances of <strong>IfcFooting</strong>. 
Refer to the documentation at <strong>IfcFooting</strong> for supported property sets, materials, and composition.</p>



<h1>IfcFootingTypeEnum</h1>
                                
                                <h1>IfcPile</h1>
                                
                                <p>A pile is a slender timber, concrete, or steel structural element, driven, jetted, or otherwise embedded on end in the ground for the purpose of supporting a load. A pile is also characterized as deep foundation, where the loads are transfered to deeper subsurface layers.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to
ISO 6707-1: slender structural member, substantially underground, intended to transmit force(s) into
loadbearing strata below the surface of the ground.</blockquote>
<blockquote class="note">
NOTE&nbsp; Shallow foundations, which transfer the loads to the ground near its surface, are represented by <strong>IfcFooting</strong>.
</blockquote>
 



<h1>IfcPileConstructionEnum</h1>
                                
                                <h1>IfcPileType</h1>
                                
                                <p>The building element type <b>IfcPileType</b> defines commonly shared information for occurrences of piles. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a pile type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcPileType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcPileType</b> are represented by instances of <strong>IfcPile</strong>. 
Refer to the documentation at <strong>IfcPile</strong> for supported property sets, materials, and composition.</p>



<h1>IfcPileTypeEnum</h1>
                                
                                <h1>IfcReinforcementDefinitionProperties</h1>
                                
                                <p> <span class="self-ref">IfcReinforcementDefinitionProperties</span> defines the cross section
		properties of reinforcement included in reinforced concrete building elements.
		The property set definition may be used both in conjunction with insitu and
		precast structures. </p> 

	 <p> This subtype of <strong>IfcPropertySetDefinition</strong> is used to define the
		reinforcement properties in early design stages, such as in requirement
		definition or scheme design. In later design stages explicit instances of
		subtypes of <strong>IfcReinforcingElement</strong> are used. The intended usage may be
		indicated using the <i>DefinitionType</i> attribute value as a designator:
		recommended values are 'Reinforcement area requirement' or 'Reinforcement
		configuration requirement'. Other values may be used according to local
		standards. </p> 
	 <p> Only one property set definition of this kind is used for each concrete
		building element in each intended usage indicated by the <i>DefinitionType</i>
		attribute value. This set then defines a list of cross section properties in a
		discrete number of longitudinal sections as instances of
		<strong>IfcSectionReinforcementProperties</strong> (one for each structural reinforcement
		bar role), which in turn have a section cross section property defined as a
		profile and a number of reinforcement properties, one for each steel grade /
		bar type. </p>





<h1>IfcReinforcingBar</h1>
                                
                                <p>A reinforcing bar is usually made of steel with manufactured deformations in the surface,
and used in concrete and masonry construction to provide additional strength.  A single instance
of this class may represent one or many of actual rebars, for example a row of rebars.</p>





<p class="use-head">Geometry Use Definition</p>

<p>Placement and representation are defined at the supertype <strong>IfcElementComponent</strong>.</p>

<p>The representation map of a mapped 'Body' representation should contain a representation of type 'AdvancedSweptSolid' which holds an <strong>IfcSweptDiskSolid</strong> (including subtype <strong>IfcSweptDiskSolidPolygonal</strong>).</p>



<h1>IfcReinforcingBarType</h1>
                                
                                <p>The reinforcing element type <b>IfcReinforcingBarType</b> defines commonly shared information for occurrences of reinforcing bars. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a reinforcing bar type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcReinforcingBarType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcReinforcingBarType</b> are represented by instances of <strong>IfcReinforcingBar</strong>.</p>



<h1>IfcReinforcingBarTypeEnum</h1>
                                
                                <h1>IfcReinforcingElement</h1>
                                
                                <p>A reinforcing element represents bars, wires, strands, meshes, tendons, and other components embedded in concrete in such a manner that the reinforcement and the concrete act together in resisting forces.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to
ISO 6707-1: rod(s), bar(s), fabric, fibres, wires and cable(s) added to give additional strength or
support to a material or component.</blockquote>

<p>One or several instances of subtypes of <span class="self-ref">IfcReinforcingElement</span> should always be accompanied by a defining instance of a respective subtype of <strong>IfcReinforcingElementType</strong>.  The type object holds shape and material information.</p>






<h1>IfcReinforcingElementType</h1>
                                
                                <p>The element component type <b>IfcReinforcingElementType</b> defines commonly shared information for occurrences of reinforcing elements. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a reinforcing element type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcReinforcingElementType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcReinforcingElementType</b> are represented by instances of <strong>IfcReinforcingElement</strong>.</p>



<p class="use-head">Material Use Definition</p>

<p>An associated material denotes the steel grade, preferrably using material classification.</p>
<h1>IfcReinforcingMesh</h1>
                                
                                <p>A reinforcing mesh is a series of longitudinal and transverse wires or bars of various gauges, arranged at right angles to each other and welded at all points of intersection; usually used for concrete slab reinforcement. It is also known as welded wire fabric. In scope are plane meshes as well as bent meshes.</p>





<p class="use-head">Geometry Use Definition</p>

<p>Placement and representation are defined at the supertype <strong>IfcElementComponent</strong>.</p>

<p>The representation map of a mapped 'Outline' representation should contain a representation of type 'Curve3D' which holds an <strong>IfcPolyline</strong>.</p>

<p>The representation map of a mapped 'Body' representation should contain a representation of type 'AdvancedSweptSolid' which holds multiple <strong>IfcSweptDiskSolid</strong> (including subtype <strong>IfcSweptDiskSolidPolygonal</strong>).</p>


<h1>IfcReinforcingMeshType</h1>
                                
                                <p>The reinforcing element type <b>IfcReinforcingMeshType</b> defines commonly shared information for occurrences of reinforcing meshs. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a reinforcing mesh type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcReinforcingMeshType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcReinforcingMeshType</b> are represented by instances of <strong>IfcReinforcingMesh</strong>.</p>



<p class="use-head">Geometry Use Definition</p>

<p>The <span class="self-ref">IfcReinforcingMeshType</span> may define the shared geometric representation for many mesh occurrences. The <i>RepresentationMaps</i> attribute refers to a list of <strong>IfcRepresentationMap</strong>'s, that allow for multiple geometric representations.</p>


<h1>IfcReinforcingMeshTypeEnum</h1>
                                
                                <h1>IfcSurfaceFeature</h1>
                                
                                <p>A surface feature is a modification at (onto, or into) of the surface of an element.  Parts of the surface of the entire surface may be affected.  The volume and mass of the element may be increased, remain unchanged, or be decreased by the surface feature, depending on manufacturing technology.  However, any increase or decrease of volume is small compared to the total volume of the element.</u></p>

<p>The standard use of instances of <span class="self-ref">IfcSurfaceFeature</span> is as a part of element type objects (instances of subtypes of <strong>IfcElementType</strong>).  The part&ndash;whole relationship is established by an aggregation relationship object, expressing the decomposition of an element type into one or more additive elements (element parts) and zero or more feature elements.</p>



<p><b><u>Containment Use Definition</u></b>:</p>

<p>Surface features shall have no spatial containment relationship to the spatial structure since they are dependent on element types without spatial containment relationships or on an element occurrence with own spatial containment relationship.</p>
<ul>
  <li>The <i>SELF\IfcElement.ContainedInStructure</i> relationship shall be NIL.</li>
</ul>

<p><b><u>Geometry use definition</u></b>:</p>

<p>The geometric representation of <i>IfcSurfaceFeatureElement</i> is given by the <strong>IfcProductDefinitionShape</strong>, allowing multiple geometric representation.</p>

<p><b>Local Placement</b></p>

<p>The local placement for <i>IfcSurfaceFeatureElement</i> is defined in its supertype <strong>IfcProduct</strong>. It is defined by the <strong>IfcLocalPlacement</strong>, which defines the local coordinate system that is referenced by all geometric representations.</p>
<ul>
  <li>In case of features which are part of an element type, absolute placement into the type object's implied coordinate system shall be used.</li>
  <li>In case of features which are voiding an element occurrence, the <i>PlacementRelTo</i> relationship of <strong>IfcLocalPlacement</strong> shall point to the local placement of the respective element.</li>
</ul>

<p><b>Shape representation</b></p>

<p>Different shape representations may be used, depending on the nature of the feature and information requirements:</p>
<ul>
  <li>Symbolic representation, such as the two-dimensional bounding box of a tag.</p>
  <li>A geometric set representing the geometric items of a mark.</li>
  <li>Surface representations of treated parts of the lement surface by means of <strong>IfcShellBasedSurfaceModel</strong>.  The faces within the surface model may be included into a B-Rep model within a representation map of the parent element type.</li>
</ul>

<p>Higher-level parameters (geometric and non-geometric) may be provided by property sets based on local agreements.</p>


<h1>IfcSurfaceFeatureTypeEnum</h1>
                                
                                <h1>IfcTendon</h1>
                                
                                <p>A tendon is a steel element such as a wire, cable, bar, rod, or strand used to impart prestress to concrete when the element is tensioned.</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO 6707-1: steel bar(s) or groups of bars, strands or wires given a tensile stress that produces a compressive stress in prestressed concrete or masonry. </blockquote>







<h1>IfcTendonAnchor</h1>
                                
                                <p>A tendon anchor is the end connection for tendons in prestressed or posttensioned concrete.</p>






<h1>IfcTendonAnchorType</h1>
                                
                                <p>The reinforcing element type <b>IfcTendonAnchorType</b> defines commonly shared information for occurrences of tendon anchors. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a tendon anchor type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcTendonAnchorType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcTendonAnchorType</b> are represented by instances of <strong>IfcTendonAnchor</strong>.</p>



<p class="use-head">Material Use Definition</p>

<p>A material or material constituent set may be associated.</p>

<p class="use-head">Geometry Use Definition</p>

<p>The <span class="self-ref">IfcTendonAnchorType</span> may define the shared geometric representation for many tendon anchor occurrences. The <i>RepresentationMaps</i> attribute refers to a list of <strong>IfcRepresentationMap</strong>'s, that allow for multiple geometric representations.</p>


<h1>IfcTendonAnchorTypeEnum</h1>
                                
                                <h1>IfcTendonType</h1>
                                
                                <p>The reinforcing element type <b>IfcTendonType</b> defines commonly shared information for occurrences of tendons. The set of shared information may include: <ul>
<li>common properties with shared property sets</li>
<li>common representations</li>
<li>common materials</li>
<li>common composition of elements</li>
</ul><p>It is used to define a tendon type specification indicating the specific product information that is common to all occurrences of that product type. 
The <b>IfcTendonType</b> may be declared within <strong>IfcProject</strong> or <strong>IfcProjectLibrary</strong> using <strong>IfcRelDeclares</strong> and may be exchanged with or without occurrences of the type. Occurrences of <b>IfcTendonType</b> are represented by instances of <strong>IfcTendon</strong>.</p>



<p class="use-head">Material Use Definition</p>

<p>An associated material denotes the steel grade, preferrably via material classification.  A material constituent set or material profile set may be associated if the cable, bonding mortar or corrosion protection, and tendon sheeth are to be described together by the material association.</p>

<p class="use-head">Geometry Use Definition</p>

<p>The <span class="self-ref">IfcTendonType</span> may define the shared geometric representation for many tendon occurrences. The <i>RepresentationMaps</i> attribute refers to a list of <strong>IfcRepresentationMap</strong>'s, that allow for multiple geometric representations.</p>


<h1>IfcTendonTypeEnum</h1>
                                
                                <h1>IfcVoidingFeature</h1>
                                
                                <p>A voiding feature is a modification of an element which reduces its volume.  Such a feature may be manufactured in different ways, for example by cutting, drilling, or milling of members made of various materials, or by inlays into the formwork of cast members made of materials such as concrete.</u></p>

<p>The standard use of instances of <span class="self-ref">IfcVoidingFeature</span> is as a part of element type objects (instances of subtypes of <strong>IfcElementType</strong>).  The part&ndash;whole relationship is established by an aggregation relationship object, expressing the decomposition of an element type into one or more additive elements (element parts) and zero or more feature elements.</p>



<p class="use-head">Containment Use Definition</p>

<p>Voiding features shall have no spatial containment relationship to the spatial structure since they are dependent on element types without spatial containment relationships or on an element occurrence with own spatial containment relationship.</p>
<ul>
  <li>The <i>SELF\IfcElement.ContainedInStructure</i> relationship shall be NIL.</li>
</ul>


<h1>IfcVoidingFeatureTypeEnum</h1>
                                
                                <h1>IfcBoundaryCondition</h1>
                                
                                <p>The abstract entity <span class="self-ref">IfcBoundaryCondition</span>
is the supertype of all boundary conditions that can be applied to
structural connection definitions, either directly for the connection
(e.g. the joint) or for the relation between a structural member and
the connection.</p>
<blockquote class="note">NOTE&nbsp; The boundary conditions are used
within other parts, mainly by instances of <strong>IfcStructuralConnection</strong>
(for the definition of supports) and instances of <strong>IfcRelConnectsStructuralMember</strong>
(for the definition of connections between structural members and
structural connections).</blockquote>

<h1>IfcBoundaryEdgeCondition</h1>
                                
                                <p>Describes linearly elastic support conditions or connection conditions.</p>

<p>Applicability:</p>
<ul>
  <li>Curve supports and connections.</li>
</ul>





<h1>IfcBoundaryFaceCondition</h1>
                                
                                <p>Describes linearly elastic support conditions or connection conditions.</p>

<p>Applicability:</p>
<ul>
  <li>Surface supports and connections.</li>
</ul>





<h1>IfcBoundaryNodeCondition</h1>
                                
                                <p>Describes linearly elastic support conditions or connection conditions.</p>

<p>Applicability:</p>
<ul>
  <li>Point supports and connections.</li>
</ul>





<h1>IfcBoundaryNodeConditionWarping</h1>
                                
                                <p>Describes linearly elastic support conditions or connection conditions, including linearly elastic warping restraints.</p>

<p>Applicability:</p>
<ul>
  <li>Point supports and connections.</li>
</ul>

 



<h1>IfcFailureConnectionCondition</h1>
                                
                                <p>Defines forces at which a support or connection fails.</p>

<p>Applicability:</p>
<ul>
  <li>Point supports and connections.</li>
</ul>



<h1>IfcModulusOfRotationalSubgradeReactionSelect</h1>
                                
                                <h1>IfcModulusOfSubgradeReactionSelect</h1>
                                
                                <h1>IfcModulusOfTranslationalSubgradeReactionSelect</h1>
                                
                                <h1>IfcRotationalStiffnessSelect</h1>
                                
                                <h1>IfcSlippageConnectionCondition</h1>
                                
                                <p>Describes slippage in support conditions or connection conditions.  Slippage means that a relative displacement may occur in a support or connection before support or connection reactions are awoken.</p>

<p>Applicability:</p>
<ul>
  <li>Point supports and connections,</li>
  <li>curve supports and connections,</li>
  <li>surface supports and connections.</li>
</ul>



<h1>IfcStructuralConnectionCondition</h1>
                                
                                <p>Describe more rarely needed connection properties.</p>



<h1>IfcStructuralLoad</h1>
                                
                                <p>This abstract entity is the supertype of all loads (actions or reactions) or of certain requirements resulting from structural analysis, or certain provisions which influence structural analysis.</p>



<h1>IfcStructuralLoadConfiguration</h1>
                                
                                <p>This class combines one or more load or result values in a 1- or 2-dimensional configuration.</p>



<p class="spec-head">Informal Propositions:</p>

<ol>
  <li>All items in <i>Values</i> shall be of the same type.</li>
  <li>If the loads or results comprise a curve activity, 1-dimensional locations shall be given, measured locally along the curve.  The location shall not exceed the bounds of the curve actvity.  The load samples and corresponding locations shall be given in ascending order of locations.</li>
  <li>If the loads or results comprise a surface activity, 2-dimensional locations shall be given, measured in the surface activity's local x and y directions.  The location shall not exceed the bounds of the surface activity.</li>
</ol>

<blockquote class="note">NOTE&nbsp; There are no ordering requirements in the 2-dimensional case, but the 1-dimensional case shall be spatially ordered for simplicity.</blockquote>

<h1>IfcStructuralLoadLinearForce</h1>
                                
                                <p>An instance of the entity
		<span class="self-ref">IfcStructuralLoadLinearForce</span> shall be used to define actions on curves.
		</p>
	 

<h1>IfcStructuralLoadOrResult</h1>
                                
                                <p>Abstract superclass of simple load or result classes.</p>



<h1>IfcStructuralLoadPlanarForce</h1>
                                
                                <p>An instance of the entity
		<span class="self-ref">IfcStructuralLoadPlanarForce</span> shall be used to define actions on faces.
		</p> 
	 

<h1>IfcStructuralLoadSingleDisplacement</h1>
                                
                                <p>Instances of the entity
		<span class="self-ref">IfcStructuralLoadSingleDisplacement</span> shall be used to define displacements.</p>
	 

<h1>IfcStructuralLoadSingleDisplacementDistortion</h1>
                                
                                <p>Defines a displacement with warping.</p>



<h1>IfcStructuralLoadSingleForce</h1>
                                
                                <p>Instances of the entity
		<span class="self-ref">IfcStructuralLoadSingleForce</span> shall be used to define the forces and
		moments of an action operating on a single point. </p>
	 

<h1>IfcStructuralLoadSingleForceWarping</h1>
                                
                                <p>Instances of the entity
		<span class="self-ref">IfcStructuralLoadSingleForceWarping</span>, as a subtype of
		<strong>IfcStructuralLoadSingleForce</strong>, shall be used to define an action operation
		on a single point. In addition to forces and moments defined by its supertype a
		warping moment can be defined. </p> 
	 

<h1>IfcStructuralLoadStatic</h1>
                                
                                <p>The abstract entity <span class="self-ref">IfcStructuralLoadStatic</span> is the supertype of all static loads (actions or reactions) which can be defined.  Within scope are single i.e. concentrated forces and moments, linear i.e. one-dimensionally distributed forces and moments, planar i.e. two-dimensionally distributed forces, furthermore displacements and temperature loads.</p>



<h1>IfcStructuralLoadTemperature</h1>
                                
                                <p>An instance of the entity <span class="self-ref">IfcStructuralLoadTemperature</span> shall be used to define actions which are caused by a temperature change. As shown in 

 

<table>
<tr><td><img src="../../../figures/StructuralLoadTemperature.gif" WIDTH="323" HEIGHT="186" BORDER="0" ALIGN="LEFT"></td></tr>
<tr><td><p class="figure">
</table>

<h1>IfcSurfaceReinforcementArea</h1>
                                
                                <p>Describes required or provided reinforcement area of surface members.</p>

<blockquote class="note">NOTE&nbsp; Member design parameters like concrete cover, effective depth, orientation of meshes or rebars (two, optionally three directions) etc. are not specified in <i>IfcStructuralLoadResource</i> schema.  They shall be specified at the level of structural members.</blockquote>



<h1>IfcTranslationalStiffnessSelect</h1>
                                
                                <h1>IfcWarpingStiffnessSelect</h1>
                                
                                <h1>IfcAdvancedFace</h1>
                                
                                <p>An advanced face is a specialization of a face surface that has to meet requirements on using particular topological and geometric representation items for the definition of the faces, edges and vertices.</p>

<p>An <span class="self-ref">IfcAdvancedFace</span> is restricted to:</p>
<ul>
<li>have a face surface geometry of type <strong>IfcElementarySurface</strong>, <strong>IfcSweptSurface</strong> or <strong>IfcBSplineSurface</strong>,</li>
<li>have one <strong>IfcFaceOuterBound</strong> as the bound of the face, with the exception of closed surfaces,</li>
<li>have all faces to be bound by <strong>IfcEdgeLoop</strong> or <strong>IfcVertexLoop</strong></li>,
<li>have all edges to have an edge curve geometry</li> 
<li>have the edge curve geometry restricted to <strong>IfcLine</strong>, <strong>IfcConic</strong>, <strong>IfcPolyline</strong>, or <strong>IfcBSplineCurve</strong></li>
</ul>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>advanced_face</strong> defined in ISO 10303-511.
</blockquote>



<h1>IfcBooleanChoose</h1>
                                
                                <h1>IfcClosedShell</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A closed shell is a shell of the dimensionality 2 which typically serves as a bound for a region in R3. A
closed shell has no boundary, and has non-zero finite extent. If the shell has a domain with coordinate space R3, it divides that space into two connected
regions, one finite and the other infinite. In this case, the topological normal of the shell is defined as being directed from the finite to the
infinite region. <br><br> 
The shell is represented by a collection of faces. The domain of the shell, if present, contains all those faces, together with their bounds.
Associated with each face in the shell is a logical value which indicates whether the face normal agrees with (TRUE) or is opposed to (FALSE) the shell
normal. The logical value can be applied directly as a BOOLEAN attribute of an oriented face, or be defaulted to TRUE if the shell boundary attribute member
is a face without the orientation attribute. <br><br> 
The combinatorial restrictions on closed shells and geometrical restrictions on their domains are designed to ensure that any domain associated
with a closed shell is a closed, orientable manifold. The domain of a closed shell, if present, is a connected, closed, oriented 2-manifold. It is always
topologically equivalent to an <i>H</i>-fold torus for some <i>H</i> &ge; 0. The number <i>H</i> is referred to as the
surface genus of the shell. If a shell of genus <i>H</i> has a domain within coordinate space <i>R<sup>3</sup></i>, then the finite region of space inside
it is topologically equivalent to a solid ball with <i>H</i> tunnels drilled through it.<br><br> 
The Euler equation applies with <i>B</i>=0, because in this case there are no holes. As in the case of open shells, the surface genus <i>H</i>
may not be known a priori, but shall be an integer &ge; 0. Thus a necessary, but not sufficient, condition
for a well-formed closed shell is the following: 
<blockquote><img src="../../../figures/IfcOpenShell-Math1.gif" width="240" height="18"></blockquote>
</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>closed_shell</strong> defined in ISO 10303-42.</blockquote>
 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>Every edge shall be referenced exactly twice by the loops of the face. </li> 
<li>Each oriented edge shall be unique. </li> 
<li>No edge shall be referenced by more than two faces. </li> 
<li>Distinct faces of the shell do not intersect, but may share edges or vertices. </li> 
<li>Distinct edges do not intersect but may share vertices. </li> 
<li>Each face reference shall be unique. </li> 
<li>The loops of the shell shall not be a mixture of poly loop and other loop types. Note: this is given, since only poly loop is defined as face bound definition.</li> 
<li>The closed shell shall be an oriented arcwise connected 2-manifold.</li> 
<li>The Euler equation shall be satisfied. Note: Please refer to ISO 10303-42 for the equation.</li> 
</ol> 

<h1>IfcConnectedFaceSet</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A connected_face_set is a set of faces such that the domain of faces together with their bounding edges and vertices is connected. </blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>connected_face_set</strong> defined in ISO 10303-42.</blockquote>		
 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The union of the domains of the faces and their bounding loops shall be arcwise connected.</li> 
</ol>

<h1>IfcEdge</h1>
                                
                                <p>An <span class="self-ref">IfcEdge</span> defines two vertices being connected topologically. The geometric representation of the connection between the two vertices defaults to a straight line if no curve geometry is assigned using the subtype <strong>IfcEdgeCurve</strong>. The <span class="self-ref">IfcEdge</span> can therefore be used to exchange straight edges
without an associated geometry provided by <strong>IfcLine</strong> or <strong>IfcPolyline</strong> thought <i>IfcEdgeCurve.EdgeGeometry</i>.</p>
<p>&nbsp;</p>
<table>
<tr><td><br><img src="../../../figures/IfcEdge.png" alt="edge representation" border="0"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
</tr>
<tr><td><p class="figure">
</table>

<p>&nbsp;</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An edge is the topological construct corresponding to the connection of two
vertices. More abstractly, it may stand for a logical relationship between two vertices. The domain of an edge, if
present, is a finite, non-self-intersecting open curve in <i>R<sup>M</sup></i>, that is, a connected 1-dimensional
manifold. The bounds of an edge are two vertices, which need not be distinct. The edge is oriented by choosing its traversal
direction to run from the first to the second vertex. If the two vertices are the same, the edge is a self loop. The domain of the
edge does not include its bounds, and 0 &le; &Xi; &le; &infin;. Associated with an edge may be a geometric curve to locate the
edge in a coordinate space; this is represented by the edge curve subtype. The curve shall be finite and non-self-intersecting within 
the domain of the edge. An edge is a graph, so its multiplicity M and graph genus <i>G<sup>e</sup></i> may be determined by the 
graph traversal algorithm. Since <i>M</i> = <i>E</i> = 1, the Euler equation (1) reduces in the case to:
<blockquote><img src="../../../figures/IfcEdge-Math1.gif" width="105" height="24"></blockquote>
where <i>V</i> = 1 or 2, and <i>G<sup>e</sup></i> = 1 or 0. Specifically, the topological edge defining data shall satisfy:
<ul>
<li class="extDef">an edge has two vertices <br><img src="../../../figures/IfcEdge-Math2.gif" width="64" height="26"></li>
<li class="extDef">the vertices need not be distinct <br><img src="../../../figures/IfcEdge-Math3.gif" width="88" height="26"></li>
<li class="extDef">Equation shall hold <br><img src="../../../figures/IfcEdge-Math4.gif" width="120" height="26"></li>
</ul>
</blockquote>
<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>edge</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The edge has dimensionality 1.</li>
<li>The extent of an edge shall be finite and nonzero.</li>
</ol>

<h1>IfcEdgeCurve</h1>
                                
                                <p>An <span class="self-ref">IfcEdgeCurve</span> defines two vertices being connected topologically including the geometric representation of the connection.</p>
<p>&nbsp;</p>
<table>
<tr><td><br><img src="../../../figures/IfcEdgeCurve.png" width="600" height="220" alt="example"></td>
<td><blockquote class="example">EXAMPLE&nbsp; 
</tr>
<tr><td><p class="figure">
</table>
<p>&nbsp;</p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An edge curve is a special subtype of edge which has its geometry fully defined. The geometry is defined by associating the edge with a curve
which may be unbounded. As the topological and geometric directions may be opposed, an indicator (same sense) is used to
identify whether the edge and curve directions agree or are opposed. The Boolean value indicates whether the curve direction
agrees with (TRUE) or is in the opposite direction (FALSE) to the edge direction. Any geometry associated with the vertices of the
edge shall be consistent with the edge geometry. Multiple edges can reference the same curve.
</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>edge_curve</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The domain of the edge curve is formally defined to be the domain of its edge geometry as trimmed by the vertices. This domain does not include the vertices.</li>
<li>An edge curve has non-zero finite extent.</li>
<li>An edge curve is a manifold.</li>
<li>An edge curve is arcwise connected.</li>
<li>The edge start is not a part of the edge domain.</li>
<li>The edge end is not a part of the edge domain.</li>
<li>Vertex geometry shall be consistent with edge geometry.</li>
</ol>

<h1>IfcEdgeLoop</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br> 
An edge_loop is a loop with nonzero extent. It is a path in which the start and end vertices are the same. Its domain, if present, is a closed curve. An edge_loop may overlap itself.</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>edge_loop</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The genus of the <span class="self-ref">IfcEdgeLoop</span> shall be 1 or greater.</li> 
<li>The Euler formula shall be satisfied:<br>(number of vertices) + genus - (number of edges) = 1;</li> 
<li>No edge may be referenced more than once by the same <span class="self-ref">IfcEdgeLoop</span> with the same sense. For this purpose, an edge which is not an oriented edge is considered to be referenced with the sense TRUE.</li> 
</ol> 

<h1>IfcFace</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A face is a topological entity of dimensionality 2 corresponding to the intuitive notion of a piece of
surface bounded by loops. Its domain, if present, is an oriented, connected, finite 2-manifold in <i>R<sup>m</sup></i>. A face domain shall not have handles
but it may have holes, each hole bounded by a loop. The domain of the underlying geometry of the face, if present, does not contain its bounds, and 0
&lt; &Xi; &lt; &infin;.<br><br> 
A face is represented by its bounding loops, which are defined as face bounds. A face has a topological normal n and the tangent to a loop is t. For a
loop bounding a face with defined geometry, the cross product n x t points
toward the interior of the face. That is, each loop runs counter-clockwise
around the face when viewed from above, if we consider the normal n to point
up. With each loop is associated a BOOLEAN flag to signify whether the loop
direction is oriented with respect to the face normal (TRUE) or should be
reversed (FALSE). <br><br> 
A face shall have at least one bound, and the loops shall not intersect. One loop is optionally distinguished as the outer loop of the face. If so, it
establishes a preferred way of embedding the face domain in the plane, in which the other bounding loops of the face are inside the outer bound. Because the
face domain is arcwise connected, no inner loop will contain any other loop. This is true regardless of which embedding in the plane is chosen. <br><br> 
The edges and vertices referenced by the loops of a face form a graph, of which the individual loops are the connected components. The Euler equation (1) 
for this graph becomes:
<blockquote> 
  <img src="../../../figures/IfcFace-Math1.gif" width="176" height="48">
</blockquote>
where <i>G<sup>l</sup><sub>i</sub></i> is the graph genus of the<i> i</i> <sup>th</sup> loop.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>face</strong> defined in ISO 10303-42.</blockquote>
 
<p class="spec-head">Informal Propositions:</p> 
<ol> 
 <li>No edge shall be referenced by the face more than twice. </li> 
 <li>Distinct face bounds of the face shall have no common vertices. </li>
 <li>If geometry is present, distinct loops of the same face shall not intersect. </li> 
 <li>The face shall satisfy the Euler Equation: (number of vertices) - (number of edges) - (number of loops) + (sum of genus for loops) = 0.</li> 
</ol> 
<h1>IfcFaceBound</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A face bound is a loop which is intended to be used for bounding a face. </blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>face_bound</strong> defined in ISO 10303-42.</blockquote>
 

<h1>IfcFaceOuterBound</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A face outer bound is a special subtype of face bound which carries the additional semantics of defining an outer boundary on the face. No more than one boundary of a face shall be of this type. </blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>face_outer_bound</strong> defined in ISO 10303-42.</blockquote>
 

<h1>IfcFaceSurface</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A face surface is a subtype of face in which the geometry is defined by an associated surface. The portion of the surface used by the face shall be
embeddable in the plane as an open disk, possibly with holes. However, the union of the face with the edges and vertices of its bounding loops need not be
embeddable in the plane. It may, for example, cover an entire sphere or torus. As both a face and a geometric surface have defined normal directions, a
BOOLEAN flag (the orientation attribute) is used to indicate whether the surface normal agrees with (TRUE) or is opposed to (FALSE) the face normal
direction. The geometry associated with any component of the loops of the face shall be consistent with the surface geometry, in the sense that the domains of
all the vertex points and edge curves are contained in the face geometry surface. A surface may be referenced by more than one face surface.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>face_surface</strong> defined in ISO 10303-42.</blockquote>
 
<p class="spec-head">Informal Propositions:</p> 
 <ol> 
 <li>The domain of the face surface is formally defined to be the domain of its face geometry as trimmed by the loops, this domain does not include the
 bounding loops.</li> 
 <li>A face surface has non zero finite extent.</li> 
 <li>A face surface is a manifold.</li> 
 <li>A face surface is arcwise connected.</li> 
 <li>A face surface has surface genus 0.</li>
 <li>The loops are not part of the face domain.</li>
 <li>Loop geometry shall be consistent with face geometry. This implies that any edge - curves or vertex points used in defining the loops bounding the
 face surface shall lie on the face geometry.</li>
 <li>The loops of the face shall not intersect.</li>
</ol> 
<h1>IfcLoop</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A loop is a topological entity constructed from a single vertex, or by stringing together connected
(oriented) edges, or linear segments beginning and ending at the same vertex. It is typically used to bound a face lying on a surface. A loop has
dimensionality of 0 or 1. The domain of a 0-dimensional loop is a single point. The domain of a 1-dimensional loop is a connected, oriented curve, but need not
to be manifold. As the loop is a circle, the location of its beginning/ending point is arbitrary. The domain of the loop includes its bounds, an 0 &le; &Xi;
&lt; &infin;. 
A loop is represented by a single vertex, or by an ordered collection of oriented edges, or by an ordered collection of points. A loop is a graph, so
<i>M</i> and the graph genus <i>G<sup>l</sup></i> may be determined by the graph traversal algorithm. Since <i>M</i> = 1, the Euler equation (1) reduces
in this case to  
<blockquote><img src="../../../figures/IfcLoop-Math1.gif" height="31" width="180"></blockquote> 
where <i>V</i> and <i>E<sub>l</sub></i> are the number of unique vertices and oriented edges in the loop and <i>G<sup>l</sup></i> is the genus of the loop.
</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>loop</strong> defined in ISO 10303-42.</blockquote>
 
<p class="spec-head">Informal Propositions:</p> 
<ol> 
 <li>A loop has a finite extent.</li> 
 <li>A loop describes a closed (topological) curve with coincident start and end vertices.</li> 
</ol>
<h1>IfcLoopHeadToTail</h1>
                                
                                <h1>IfcOpenShell</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An open shell is a shell of the dimensionality 2. Its domain, if present, is a finite, connected, oriented,
2-manifold with boundary, but is not a closed surface. It can be thought of as a closed shell with one or more holes punched in it. The domain of an open
shell satisfies 0 &lt; &Xi; &lt; 1. An open shell is functionally more general than a face because its domain can have handles.
<br><br> 
The shell is defined by a collection of faces, which may be oriented faces. The sense of each face, after taking account of the orientation, shall
agree with the shell normal as defined below. The orientation can be supplied directly as a BOOLEAN attribute of an oriented face, or be defaulted to TRUE if
the shell member is a face without the orientation attribute.
<br><br>
The following combinatorial restrictions on open shells and geometrical restrictions on their domains are designed, together with the informal
propositions, to ensure that any domain associated with an open shell is an orientable manifold.
<ul> 
 <li class="extDef">Each face reference shall be unique. </li> 
 <li class="extDef">An open shell shall have at least one face. </li> 
 <li class="extDef">A given face may exist in more than one open shell.</li> 
</ul>
<br>
The boundary of an open shell consists of the edges that are referenced only once by the face - bounds (loops) of its faces, together with all of their
vertices. The domain of an open shell, if present, contains all edges and vertices of its faces.
<br>
<br>
NOTE&nbsp; Note that this is slightly different from the definition of a face domain, which includes none of its bounds. For example, a
face domain may exclude an isolated point or line segment. An open shell domain may not. (See the algorithm for computing below.)
</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>open_shell</strong> defined in ISO 10303-42.</blockquote>
 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
 <li>Every edge shall be referenced exactly twice by the face bounds of the face. </li> 
 <li>Each oriented edge shall be unique. </li> 
 <li>No edge shall be referenced by more than two faces. </li> 
 <li>Distinct faces of the shell do not intersect, but may share edges or vertices. </li> 
 <li>Distinct edges do not intersect but may share vertices. </li> 
 <li>Each face reference shall be unique. </li> 
 <li>The loops of the shell shall not be a mixture of poly loop and other loop types. Note: this is given, since only poly loop is defined as face bound definition. </li> 
 <li>The closed shell shall be an oriented arcwise connected 2-manifold.</li> 
 <li>The Euler equation shall be satisfied.</li> 
</ol>
<h1>IfcOrientedEdge</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
An oriented edge is an edge constructed from another edge and contains a BOOLEAN direction flag to indicate whether or not the orientation of the constructed edge agrees with the orientation of the original edge. Except for perhaps orientation, the oriented edge is equivalent to the original edge. 
<br><br>
A common practice is solid modelling systems is to have an entity that represents the "use" or "traversal" of an edge. This "use" entity explicitly represents the requirement in a manifold solid that each edge must be traversed exactly twice, once in each direction. The "use" functionality is provided by the edge subtype oriented edge.
</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>oriented_edge</strong> defined in ISO 10303-42.</blockquote>
 

<h1>IfcPath</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A path is a topological entity consisting of an ordered collection of oriented edges, such that the edge start vertex of each edge coincides with the edge end of its predecessor. The path is ordered from the edge start of the first oriented edge to the edge end of the last edge. The BOOLEAN value sense in the oriented edge indicates whether the edge direction agrees with the direction of the path (TRUE) or is the opposite direction (FALSE). <br><br> 
An individual edge can only be referenced once by an individual path. An edge can be referenced by multiple paths. An edge can exist independently of a path.
</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>path</strong> defined in ISO 10303-42.</blockquote>
 

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>A path has dimensionality 1.</li>
<li>A path is arcwise connected.</li>
<li>The edges of the path do not intersect except at common vertices.</li>
<li>A path has a finite, non-zero extent.</li>
</ol> 

<h1>IfcPathHeadToTail</h1>
                                
                                <h1>IfcPolyLoop</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A poly loop is a loop with straight edges bounding a planar region in space. A poly loop is a loop of genus 1 where the loop is represented
by an ordered coplanar collection of points forming the vertices of the loop. The loop is composed of straight line segments joining a point in
the collection to the succeeding point in the collection. The closing segment is from the last to the first point in the collection. 
The direction of the loop is in the direction of the line segments.
<br><br>
A poly loop shall conform to the following topological constraints:
<ul>
  <li class="extDef">the loop has the genus of one.</li>
  <li class="extDef">the following equation shall be satisfied
  <br><img src="../../../figures/IfcPolyLoop-Math1.gif" height="26" width="138"></li>
</ul>
The <span class="self-ref">IfcPolyLoop</span> is always closed and the last segment is from the last <strong>IfcCartesianPoint</strong>
in the list of <i>Polygon</i>'s to the first <strong>IfcCartesianPoint</strong>. Therefore the first point shall not be repeated at the end of the list,
neither by referencing the same instance, nor by using an additional instance of&nbsp;<strong>IfcCartesianPoint</strong> having the
coordinates as the first point.
<br><br>
NOTE&nbsp; This entity exists primarily to facilitate the efficient communication of faceted B-rep models.
</blockquote>
<p>&nbsp;</p>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>poly_loop</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p>
<ol>
  <li>All the points in the polygon defining the poly loop shall be coplanar.</li>
  <li>The first and the last <i>Polygon</i> shall be different by value.</li>
</ol>

<h1>IfcShell</h1>
                                
                                <h1>IfcSubedge</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A subedge is an edge whose domain is a connected portion of the domain of an existing edge. The topological constraints on a subedge are the same as those on an edge.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>subedge</strong> defined in ISO 10303-42.</blockquote>


<p class="spec-head">Informal Propositions:</p> 
<ol> 
<li>The domain of the subedge is formally defined to be the domain of the parent edge, as trimmed by the subedge start vertex and subedge end vertex.</li> 
<li>The start vertex and end vertex shall be within the union of the domains of the vertices of the parent edge and the domain of the <i>parent edge</i>.</li> 
</ol> 

<h1>IfcTopologicalRepresentationItem</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
The topological representation item is the supertype for all the topological representation items in the geometry resource.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>topological_representation_item</strong> defined in ISO 10303-42.</blockquote>


<h1>IfcVertex</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A vertex is the topological construct corresponding to a point. It has dimensionality 0 and extent 0. The domain of a vertex, if present, is a point in m dimensional real space <i>R<sup>M</sup></i>; this is represented by the vertex point subtype.</blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>vertex</strong> defined in ISO 10303-42.</blockquote>
 

<p class="spec-head">Informal Propositions:</p>
<ol>
<li>The vertex has dimensionality 0. This is a fundamental property of the vertex.</li>
<li>The extent of a vertex is defined to be zero.</li>
</ol>

<h1>IfcVertexLoop</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A vertex_loop is a loop of zero genus consisting of a single vertex. A vertex can exist independently of a
vertex loop. The topological data shall satisfy the following constraint:  
<blockquote><img src="../../../figures/IfcVertexLoop-Math1.gif" width="132" height="18" border="0"></blockquote> 
</blockquote>

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>vertex_loop</strong> defined in ISO 10303-42.</blockquote>

<p class="spec-head">Informal Propositions:</p> 
<ol> 
 <li>A vertex loop has zero extent and dimensionality.</li> 
 <li>The vertex loop has genus 0.</li> 
</ol> 
<h1>IfcVertexPoint</h1>
                                
                                <p> </p>
<blockquote class="extDef">NOTE&nbsp; Definition according to ISO/CD 10303-42:1992<br>
A vertex point is a vertex which has its geometry defined as a point. </blockquote> 

<blockquote class="note">NOTE&nbsp; Entity adapted from <strong>vertex_point</strong> defined in ISO 10303-42.</blockquote>
 

<p class="spec-head">Informal Propositions:</p> 
<ol> 
 <li>The domain of the vertex is formally defined to be the domain of its vertex point.</li> 
</ol> 

</EDM-HTML><h1>IfcApplication</h1>
                                
                                <h1>IfcChangeActionEnum</h1>
                                
                                <h1>IfcGloballyUniqueId</h1>
                                
                                <h1>IfcOwnerHistory</h1>
                                
                                <h1>IfcStateEnum</h1>
                                
                                <h1>IfcTable</h1>
                                
                                <h1>IfcTableColumn</h1>
                                
                                <h1>IfcTableRow</h1>
                                
                                </body>
