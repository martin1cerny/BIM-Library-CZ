// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CENTAURUS
// DateTime: 26.1.2015 21:01:22
// UserName: Martin
// Input file <Parser.y - 26.1.2015 20:59:37>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;
using System.Linq.Expressions;

namespace Xbim.ExpressParser
{
internal enum Tokens {error=126,
    EOF=127,INTEGER=128,STRING=129,BOOLEAN=130,BINARY=131,REAL=132,
    ARRAY=133,LIST=134,SET=135,IDENTIFIER=136,OF=137,FOR=138,
    FIXED=139,UNIQUE=140,ONEOF=141,INVERSE=142,OPTIONAL=143,SCHEMA=144,
    END_SCHEMA=145,TYPE=146,END_TYPE=147,ENUMERATION_OF=148,SELECT=149,ENTITY=150,
    END_ENTITY=151,SUBTYPE_OF=152,SUPERTYPE_OF=153,ABSTRACT=154,NON_ABSTRACT=155,DERIVE=156,
    FUNCTION=157,END_FUNCTION=158,RULE=159,END_RULE=160,WHERE=161,SELF=162,
    IN=163,AND=164,OR=165,XOR=166,NOT=167,EXISTS=168,
    SIZEOF=169,QUERY=170,ASSIGNMENT=171,GT=172,LT=173,GTE=174,
    LTE=175,NEQ=176,BACKSLASH=177};

internal partial struct ValueType
#line 15 "Parser.y"
{
#line 16 "Parser.y"
		public string strVal;
#line 17 "Parser.y"
		public int intVal;
#line 18 "Parser.y"
		public double realVal;
#line 19 "Parser.y"
		public bool boolVal;
#line 20 "Parser.y"
		public object val;
#line 21 "Parser.y"
		public Tokens tokVal;
#line 22 "Parser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 26.1.2015 20:59:37
#line 2 "Parser.y"
	
  // End verbatim content from Parser.y - 26.1.2015 20:59:37

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[102];
  private static State[] states = new State[256];
  private static string[] nonTerms = new string[] {
      "schema_definition", "$accept", "definitions", "definition", "type_definition", 
      "enumeration", "select_type", "entity", "function", "rule", "identifier_or_type", 
      "enumerable", "where_section", "identifier_list", "sections", "identifiers", 
      "type", "number", "section", "parameter_section", "unique_section", "inverse_section", 
      "derive_section", "inheritance_section", "parameter_definition", "parameter_definition_right", 
      "where_rules", "where_rule", "string_array", "comparer", "accessor", "strings", 
      "unique_rules", "unique_rule", "inverse_rules", "inverse_rule", "derive_rules", 
      "derive_rule", "optional_integer", "inheritance_definition", };

  static Parser() {
    states[0] = new State(new int[]{144,3},new int[]{-1,1});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{136,4});
    states[4] = new State(new int[]{59,5});
    states[5] = new State(new int[]{146,11,150,134,157,243,159,249},new int[]{-3,6,-4,255,-5,10,-6,131,-7,132,-8,133,-9,242,-10,248});
    states[6] = new State(new int[]{145,7,146,11,150,134,157,243,159,249},new int[]{-4,9,-5,10,-6,131,-7,132,-8,133,-9,242,-10,248});
    states[7] = new State(new int[]{59,8});
    states[8] = new State(-2);
    states[9] = new State(-4);
    states[10] = new State(-5);
    states[11] = new State(new int[]{136,12});
    states[12] = new State(new int[]{61,13});
    states[13] = new State(new int[]{148,94,149,105,136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-11,14,-12,74,-17,84});
    states[14] = new State(new int[]{59,15});
    states[15] = new State(new int[]{147,16,161,21},new int[]{-13,18});
    states[16] = new State(new int[]{59,17});
    states[17] = new State(-11);
    states[18] = new State(new int[]{147,19});
    states[19] = new State(new int[]{59,20});
    states[20] = new State(-13);
    states[21] = new State(new int[]{136,24},new int[]{-27,22,-28,73});
    states[22] = new State(new int[]{136,24,147,-50,151,-50,161,-50,140,-50,142,-50,156,-50,152,-50,153,-50,154,-50},new int[]{-28,23});
    states[23] = new State(-52);
    states[24] = new State(new int[]{58,25});
    states[25] = new State(new int[]{126,26,162,28,123,65,136,49},new int[]{-31,59});
    states[26] = new State(new int[]{59,27});
    states[27] = new State(-53);
    states[28] = new State(new int[]{163,29,177,45,172,53,173,54,174,55,175,56,176,57,61,58},new int[]{-30,38});
    states[29] = new State(new int[]{91,32},new int[]{-29,30});
    states[30] = new State(new int[]{59,31});
    states[31] = new State(-54);
    states[32] = new State(new int[]{129,37},new int[]{-32,33});
    states[33] = new State(new int[]{93,34,44,35});
    states[34] = new State(-66);
    states[35] = new State(new int[]{129,36});
    states[36] = new State(-68);
    states[37] = new State(-67);
    states[38] = new State(new int[]{136,41,128,43,132,44},new int[]{-18,39});
    states[39] = new State(new int[]{59,40});
    states[40] = new State(-55);
    states[41] = new State(new int[]{59,42});
    states[42] = new State(-56);
    states[43] = new State(-31);
    states[44] = new State(-32);
    states[45] = new State(new int[]{136,49,162,52},new int[]{-31,46});
    states[46] = new State(new int[]{46,47,172,-101,173,-101,174,-101,175,-101,176,-101,61,-101,58,-101});
    states[47] = new State(new int[]{136,48});
    states[48] = new State(-100);
    states[49] = new State(new int[]{46,50});
    states[50] = new State(new int[]{136,51});
    states[51] = new State(-99);
    states[52] = new State(new int[]{177,45});
    states[53] = new State(-60);
    states[54] = new State(-61);
    states[55] = new State(-62);
    states[56] = new State(-63);
    states[57] = new State(-64);
    states[58] = new State(-65);
    states[59] = new State(new int[]{46,47,172,53,173,54,174,55,175,56,176,57,61,58},new int[]{-30,60});
    states[60] = new State(new int[]{136,63,128,43,132,44},new int[]{-18,61});
    states[61] = new State(new int[]{59,62});
    states[62] = new State(-57);
    states[63] = new State(new int[]{59,64});
    states[64] = new State(-58);
    states[65] = new State(new int[]{128,43,132,44},new int[]{-18,66});
    states[66] = new State(new int[]{172,53,173,54,174,55,175,56,176,57,61,58},new int[]{-30,67});
    states[67] = new State(new int[]{162,68});
    states[68] = new State(new int[]{172,53,173,54,174,55,175,56,176,57,61,58},new int[]{-30,69});
    states[69] = new State(new int[]{128,43,132,44},new int[]{-18,70});
    states[70] = new State(new int[]{125,71});
    states[71] = new State(new int[]{59,72});
    states[72] = new State(-59);
    states[73] = new State(-51);
    states[74] = new State(new int[]{137,75});
    states[75] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93},new int[]{-11,76,-17,84});
    states[76] = new State(new int[]{59,77});
    states[77] = new State(new int[]{147,78,161,21},new int[]{-13,80});
    states[78] = new State(new int[]{59,79});
    states[79] = new State(-12);
    states[80] = new State(new int[]{147,81});
    states[81] = new State(new int[]{59,82});
    states[82] = new State(-14);
    states[83] = new State(-29);
    states[84] = new State(new int[]{40,85,59,-30,171,-30});
    states[85] = new State(new int[]{128,86});
    states[86] = new State(new int[]{41,87});
    states[87] = new State(new int[]{139,88,40,-27,59,-27,171,-27});
    states[88] = new State(-28);
    states[89] = new State(-22);
    states[90] = new State(-23);
    states[91] = new State(-24);
    states[92] = new State(-25);
    states[93] = new State(-26);
    states[94] = new State(new int[]{40,99},new int[]{-14,95});
    states[95] = new State(new int[]{59,96});
    states[96] = new State(new int[]{147,97});
    states[97] = new State(new int[]{59,98});
    states[98] = new State(-15);
    states[99] = new State(new int[]{136,104},new int[]{-16,100});
    states[100] = new State(new int[]{41,101,44,102});
    states[101] = new State(-19);
    states[102] = new State(new int[]{136,103});
    states[103] = new State(-21);
    states[104] = new State(-20);
    states[105] = new State(new int[]{40,99},new int[]{-14,106});
    states[106] = new State(new int[]{59,107});
    states[107] = new State(new int[]{147,108});
    states[108] = new State(new int[]{59,109});
    states[109] = new State(-16);
    states[110] = new State(new int[]{91,111});
    states[111] = new State(new int[]{128,112});
    states[112] = new State(new int[]{58,113});
    states[113] = new State(new int[]{128,116,136,117,63,118},new int[]{-39,114});
    states[114] = new State(new int[]{93,115});
    states[115] = new State(-89);
    states[116] = new State(-86);
    states[117] = new State(-87);
    states[118] = new State(-88);
    states[119] = new State(new int[]{91,120});
    states[120] = new State(new int[]{128,121});
    states[121] = new State(new int[]{58,122});
    states[122] = new State(new int[]{128,116,136,117,63,118},new int[]{-39,123});
    states[123] = new State(new int[]{93,124});
    states[124] = new State(-90);
    states[125] = new State(new int[]{91,126});
    states[126] = new State(new int[]{128,127});
    states[127] = new State(new int[]{58,128});
    states[128] = new State(new int[]{128,116,136,117,63,118},new int[]{-39,129});
    states[129] = new State(new int[]{93,130});
    states[130] = new State(-91);
    states[131] = new State(-6);
    states[132] = new State(-7);
    states[133] = new State(-8);
    states[134] = new State(new int[]{136,135});
    states[135] = new State(new int[]{59,237,136,142,161,21,140,164,142,175,156,192,152,223,153,225,154,230},new int[]{-15,136,-19,241,-20,140,-25,161,-13,162,-21,163,-22,174,-23,191,-24,220,-40,236});
    states[136] = new State(new int[]{151,137,136,142,161,21,140,164,142,175,156,192,152,223,153,225,154,230},new int[]{-19,139,-20,140,-25,161,-13,162,-21,163,-22,174,-23,191,-24,220,-40,236});
    states[137] = new State(new int[]{59,138});
    states[138] = new State(-17);
    states[139] = new State(-34);
    states[140] = new State(new int[]{136,142,151,-35,161,-35,140,-35,142,-35,156,-35,152,-35,153,-35,154,-35},new int[]{-25,141});
    states[141] = new State(-42);
    states[142] = new State(new int[]{58,143});
    states[143] = new State(new int[]{143,146,136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-26,144,-11,149,-17,84,-12,150});
    states[144] = new State(new int[]{59,145});
    states[145] = new State(-43);
    states[146] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-26,147,-11,149,-17,84,-12,150});
    states[147] = new State(new int[]{59,148});
    states[148] = new State(-44);
    states[149] = new State(-45);
    states[150] = new State(new int[]{137,151});
    states[151] = new State(new int[]{140,153,136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-11,152,-12,158,-17,84});
    states[152] = new State(-46);
    states[153] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-11,154,-12,155,-17,84});
    states[154] = new State(-47);
    states[155] = new State(new int[]{137,156});
    states[156] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93},new int[]{-11,157,-17,84});
    states[157] = new State(-49);
    states[158] = new State(new int[]{137,159});
    states[159] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93},new int[]{-11,160,-17,84});
    states[160] = new State(-48);
    states[161] = new State(-41);
    states[162] = new State(-36);
    states[163] = new State(-37);
    states[164] = new State(new int[]{136,167},new int[]{-33,165,-34,173});
    states[165] = new State(new int[]{136,167,151,-69,161,-69,140,-69,142,-69,156,-69,152,-69,153,-69,154,-69},new int[]{-34,166});
    states[166] = new State(-73);
    states[167] = new State(new int[]{58,168});
    states[168] = new State(new int[]{136,169},new int[]{-16,171});
    states[169] = new State(new int[]{59,170,44,-20});
    states[170] = new State(-70);
    states[171] = new State(new int[]{59,172,44,102});
    states[172] = new State(-71);
    states[173] = new State(-72);
    states[174] = new State(-38);
    states[175] = new State(new int[]{136,178},new int[]{-35,176,-36,190});
    states[176] = new State(new int[]{136,178,151,-74,161,-74,140,-74,142,-74,156,-74,152,-74,153,-74,154,-74},new int[]{-36,177});
    states[177] = new State(-76);
    states[178] = new State(new int[]{58,179});
    states[179] = new State(new int[]{136,186,135,110,134,119,133,125},new int[]{-12,180});
    states[180] = new State(new int[]{137,181});
    states[181] = new State(new int[]{136,182});
    states[182] = new State(new int[]{138,183});
    states[183] = new State(new int[]{136,184});
    states[184] = new State(new int[]{59,185});
    states[185] = new State(-77);
    states[186] = new State(new int[]{138,187});
    states[187] = new State(new int[]{136,188});
    states[188] = new State(new int[]{59,189});
    states[189] = new State(-78);
    states[190] = new State(-75);
    states[191] = new State(-39);
    states[192] = new State(new int[]{136,195,162,52},new int[]{-37,193,-38,219,-31,213});
    states[193] = new State(new int[]{136,195,162,52,151,-79,161,-79,140,-79,142,-79,156,-79,152,-79,153,-79,154,-79},new int[]{-38,194,-31,213});
    states[194] = new State(-81);
    states[195] = new State(new int[]{58,196,46,50});
    states[196] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-11,197,-12,201,-17,84});
    states[197] = new State(new int[]{171,198});
    states[198] = new State(new int[]{126,199});
    states[199] = new State(new int[]{59,200});
    states[200] = new State(-82);
    states[201] = new State(new int[]{137,202});
    states[202] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93,135,110,134,119,133,125},new int[]{-11,203,-12,207,-17,84});
    states[203] = new State(new int[]{171,204});
    states[204] = new State(new int[]{126,205});
    states[205] = new State(new int[]{59,206});
    states[206] = new State(-83);
    states[207] = new State(new int[]{137,208});
    states[208] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93},new int[]{-11,209,-17,84});
    states[209] = new State(new int[]{171,210});
    states[210] = new State(new int[]{126,211});
    states[211] = new State(new int[]{59,212});
    states[212] = new State(-84);
    states[213] = new State(new int[]{58,214,46,47});
    states[214] = new State(new int[]{136,83,132,89,130,90,131,91,129,92,128,93},new int[]{-11,215,-17,84});
    states[215] = new State(new int[]{171,216});
    states[216] = new State(new int[]{126,217});
    states[217] = new State(new int[]{59,218});
    states[218] = new State(-85);
    states[219] = new State(-80);
    states[220] = new State(new int[]{59,221,152,223,153,225,154,230},new int[]{-40,222});
    states[221] = new State(-40);
    states[222] = new State(-93);
    states[223] = new State(new int[]{40,99},new int[]{-14,224});
    states[224] = new State(-94);
    states[225] = new State(new int[]{40,226});
    states[226] = new State(new int[]{141,227});
    states[227] = new State(new int[]{40,99},new int[]{-14,228});
    states[228] = new State(new int[]{41,229});
    states[229] = new State(-95);
    states[230] = new State(new int[]{153,231});
    states[231] = new State(new int[]{40,232});
    states[232] = new State(new int[]{141,233});
    states[233] = new State(new int[]{40,99},new int[]{-14,234});
    states[234] = new State(new int[]{41,235});
    states[235] = new State(-96);
    states[236] = new State(-92);
    states[237] = new State(new int[]{136,142,161,21,140,164,142,175,156,192,152,223,153,225,154,230},new int[]{-15,238,-19,241,-20,140,-25,161,-13,162,-21,163,-22,174,-23,191,-24,220,-40,236});
    states[238] = new State(new int[]{151,239,136,142,161,21,140,164,142,175,156,192,152,223,153,225,154,230},new int[]{-19,139,-20,140,-25,161,-13,162,-21,163,-22,174,-23,191,-24,220,-40,236});
    states[239] = new State(new int[]{59,240});
    states[240] = new State(-18);
    states[241] = new State(-33);
    states[242] = new State(-9);
    states[243] = new State(new int[]{136,244});
    states[244] = new State(new int[]{126,245});
    states[245] = new State(new int[]{158,246});
    states[246] = new State(new int[]{59,247});
    states[247] = new State(-97);
    states[248] = new State(-10);
    states[249] = new State(new int[]{136,250});
    states[250] = new State(new int[]{138,251});
    states[251] = new State(new int[]{126,252});
    states[252] = new State(new int[]{160,253});
    states[253] = new State(new int[]{59,254});
    states[254] = new State(-98);
    states[255] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{144,136,59,-3,145,59});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-4, new int[]{-8});
    rules[9] = new Rule(-4, new int[]{-9});
    rules[10] = new Rule(-4, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{146,136,61,-11,59,147,59});
    rules[12] = new Rule(-5, new int[]{146,136,61,-12,137,-11,59,147,59});
    rules[13] = new Rule(-5, new int[]{146,136,61,-11,59,-13,147,59});
    rules[14] = new Rule(-5, new int[]{146,136,61,-12,137,-11,59,-13,147,59});
    rules[15] = new Rule(-6, new int[]{146,136,61,148,-14,59,147,59});
    rules[16] = new Rule(-7, new int[]{146,136,61,149,-14,59,147,59});
    rules[17] = new Rule(-8, new int[]{150,136,-15,151,59});
    rules[18] = new Rule(-8, new int[]{150,136,59,-15,151,59});
    rules[19] = new Rule(-14, new int[]{40,-16,41});
    rules[20] = new Rule(-16, new int[]{136});
    rules[21] = new Rule(-16, new int[]{-16,44,136});
    rules[22] = new Rule(-17, new int[]{132});
    rules[23] = new Rule(-17, new int[]{130});
    rules[24] = new Rule(-17, new int[]{131});
    rules[25] = new Rule(-17, new int[]{129});
    rules[26] = new Rule(-17, new int[]{128});
    rules[27] = new Rule(-17, new int[]{-17,40,128,41});
    rules[28] = new Rule(-17, new int[]{-17,40,128,41,139});
    rules[29] = new Rule(-11, new int[]{136});
    rules[30] = new Rule(-11, new int[]{-17});
    rules[31] = new Rule(-18, new int[]{128});
    rules[32] = new Rule(-18, new int[]{132});
    rules[33] = new Rule(-15, new int[]{-19});
    rules[34] = new Rule(-15, new int[]{-15,-19});
    rules[35] = new Rule(-19, new int[]{-20});
    rules[36] = new Rule(-19, new int[]{-13});
    rules[37] = new Rule(-19, new int[]{-21});
    rules[38] = new Rule(-19, new int[]{-22});
    rules[39] = new Rule(-19, new int[]{-23});
    rules[40] = new Rule(-19, new int[]{-24,59});
    rules[41] = new Rule(-20, new int[]{-25});
    rules[42] = new Rule(-20, new int[]{-20,-25});
    rules[43] = new Rule(-25, new int[]{136,58,-26,59});
    rules[44] = new Rule(-25, new int[]{136,58,143,-26,59});
    rules[45] = new Rule(-26, new int[]{-11});
    rules[46] = new Rule(-26, new int[]{-12,137,-11});
    rules[47] = new Rule(-26, new int[]{-12,137,140,-11});
    rules[48] = new Rule(-26, new int[]{-12,137,-12,137,-11});
    rules[49] = new Rule(-26, new int[]{-12,137,140,-12,137,-11});
    rules[50] = new Rule(-13, new int[]{161,-27});
    rules[51] = new Rule(-27, new int[]{-28});
    rules[52] = new Rule(-27, new int[]{-27,-28});
    rules[53] = new Rule(-28, new int[]{136,58,126,59});
    rules[54] = new Rule(-28, new int[]{136,58,162,163,-29,59});
    rules[55] = new Rule(-28, new int[]{136,58,162,-30,-18,59});
    rules[56] = new Rule(-28, new int[]{136,58,162,-30,136,59});
    rules[57] = new Rule(-28, new int[]{136,58,-31,-30,-18,59});
    rules[58] = new Rule(-28, new int[]{136,58,-31,-30,136,59});
    rules[59] = new Rule(-28, new int[]{136,58,123,-18,-30,162,-30,-18,125,59});
    rules[60] = new Rule(-30, new int[]{172});
    rules[61] = new Rule(-30, new int[]{173});
    rules[62] = new Rule(-30, new int[]{174});
    rules[63] = new Rule(-30, new int[]{175});
    rules[64] = new Rule(-30, new int[]{176});
    rules[65] = new Rule(-30, new int[]{61});
    rules[66] = new Rule(-29, new int[]{91,-32,93});
    rules[67] = new Rule(-32, new int[]{129});
    rules[68] = new Rule(-32, new int[]{-32,44,129});
    rules[69] = new Rule(-21, new int[]{140,-33});
    rules[70] = new Rule(-34, new int[]{136,58,136,59});
    rules[71] = new Rule(-34, new int[]{136,58,-16,59});
    rules[72] = new Rule(-33, new int[]{-34});
    rules[73] = new Rule(-33, new int[]{-33,-34});
    rules[74] = new Rule(-22, new int[]{142,-35});
    rules[75] = new Rule(-35, new int[]{-36});
    rules[76] = new Rule(-35, new int[]{-35,-36});
    rules[77] = new Rule(-36, new int[]{136,58,-12,137,136,138,136,59});
    rules[78] = new Rule(-36, new int[]{136,58,136,138,136,59});
    rules[79] = new Rule(-23, new int[]{156,-37});
    rules[80] = new Rule(-37, new int[]{-38});
    rules[81] = new Rule(-37, new int[]{-37,-38});
    rules[82] = new Rule(-38, new int[]{136,58,-11,171,126,59});
    rules[83] = new Rule(-38, new int[]{136,58,-12,137,-11,171,126,59});
    rules[84] = new Rule(-38, new int[]{136,58,-12,137,-12,137,-11,171,126,59});
    rules[85] = new Rule(-38, new int[]{-31,58,-11,171,126,59});
    rules[86] = new Rule(-39, new int[]{128});
    rules[87] = new Rule(-39, new int[]{136});
    rules[88] = new Rule(-39, new int[]{63});
    rules[89] = new Rule(-12, new int[]{135,91,128,58,-39,93});
    rules[90] = new Rule(-12, new int[]{134,91,128,58,-39,93});
    rules[91] = new Rule(-12, new int[]{133,91,128,58,-39,93});
    rules[92] = new Rule(-24, new int[]{-40});
    rules[93] = new Rule(-24, new int[]{-24,-40});
    rules[94] = new Rule(-40, new int[]{152,-14});
    rules[95] = new Rule(-40, new int[]{153,40,141,-14,41});
    rules[96] = new Rule(-40, new int[]{154,153,40,141,-14,41});
    rules[97] = new Rule(-9, new int[]{157,136,126,158,59});
    rules[98] = new Rule(-10, new int[]{159,136,138,126,160,59});
    rules[99] = new Rule(-31, new int[]{136,46,136});
    rules[100] = new Rule(-31, new int[]{-31,46,136});
    rules[101] = new Rule(-31, new int[]{162,177,-31});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // schema_definition -> SCHEMA, IDENTIFIER, ';', definitions, END_SCHEMA, ';'
#line 86 "Parser.y"
{ Finish(); }
        break;
      case 11: // type_definition -> TYPE, IDENTIFIER, '=', identifier_or_type, ';', END_TYPE, 
               //                    ';'
#line 104 "Parser.y"
{ }
        break;
      case 12: // type_definition -> TYPE, IDENTIFIER, '=', enumerable, OF, identifier_or_type, 
               //                    ';', END_TYPE, ';'
#line 105 "Parser.y"
{ }
        break;
      case 13: // type_definition -> TYPE, IDENTIFIER, '=', identifier_or_type, ';', 
               //                    where_section, END_TYPE, ';'
#line 106 "Parser.y"
{ }
        break;
      case 14: // type_definition -> TYPE, IDENTIFIER, '=', enumerable, OF, identifier_or_type, 
               //                    ';', where_section, END_TYPE, ';'
#line 107 "Parser.y"
{ }
        break;
      case 15: // enumeration -> TYPE, IDENTIFIER, '=', ENUMERATION_OF, identifier_list, ';', 
               //                END_TYPE, ';'
#line 111 "Parser.y"
{ CreateEnumeration(ValueStack[ValueStack.Depth-7].strVal, (List<string>)(ValueStack[ValueStack.Depth-4].val));  }
        break;
      case 16: // select_type -> TYPE, IDENTIFIER, '=', SELECT, identifier_list, ';', END_TYPE, 
               //                ';'
#line 115 "Parser.y"
{  }
        break;
      case 17: // entity -> ENTITY, IDENTIFIER, sections, END_ENTITY, ';'
#line 119 "Parser.y"
{ CreateEntity(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-3].val as IEnumerable<Section>); }
        break;
      case 18: // entity -> ENTITY, IDENTIFIER, ';', sections, END_ENTITY, ';'
#line 120 "Parser.y"
{ CreateEntity(ValueStack[ValueStack.Depth-5].strVal, ValueStack[ValueStack.Depth-3].val as IEnumerable<Section>); }
        break;
      case 19: // identifier_list -> '(', identifiers, ')'
#line 124 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; }
        break;
      case 20: // identifiers -> IDENTIFIER
#line 128 "Parser.y"
{ CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal}; }
        break;
      case 21: // identifiers -> identifiers, ',', IDENTIFIER
#line 129 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 33: // sections -> section
#line 153 "Parser.y"
{var sections = new List<Section>(); if (ValueStack[ValueStack.Depth-1].val != null) sections.Add((Section)(ValueStack[ValueStack.Depth-1].val)); CurrentSemanticValue.val = sections;}
        break;
      case 34: // sections -> sections, section
#line 154 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; if (ValueStack[ValueStack.Depth-1].val != null) ((List<Section>)ValueStack[ValueStack.Depth-2].val).Add((Section)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 35: // section -> parameter_section
#line 158 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 40: // section -> inheritance_section, ';'
#line 163 "Parser.y"
{ var inheritance = new Inheritance(); inheritance.SubtypeOf = ValueStack[ValueStack.Depth-2].val as IEnumerable<string>; inheritance.IsAbstract = (ValueStack[ValueStack.Depth-2].tokVal == Tokens.ABSTRACT); CurrentSemanticValue.val = inheritance;}
        break;
      case 41: // parameter_section -> parameter_definition
#line 167 "Parser.y"
{var section = new PropertySection(); CurrentSemanticValue.val = section; section.Add((PropertyDefinition)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 42: // parameter_section -> parameter_section, parameter_definition
#line 168 "Parser.y"
{((PropertySection)(ValueStack[ValueStack.Depth-2].val)).Add((PropertyDefinition)(ValueStack[ValueStack.Depth-1].val)); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val;}
        break;
      case 43: // parameter_definition -> IDENTIFIER, ':', parameter_definition_right, ';'
#line 172 "Parser.y"
{var definition = new PropertyDefinition(); CurrentSemanticValue.val = definition; definition.Name = ValueStack[ValueStack.Depth-4].strVal; definition.Type = ValueStack[ValueStack.Depth-2].strVal;}
        break;
      case 44: // parameter_definition -> IDENTIFIER, ':', OPTIONAL, parameter_definition_right, 
               //                         ';'
#line 173 "Parser.y"
{var definition = new PropertyDefinition(); CurrentSemanticValue.val = definition; definition.Name = ValueStack[ValueStack.Depth-5].strVal; definition.Type = ValueStack[ValueStack.Depth-2].strVal;}
        break;
      case 45: // parameter_definition_right -> identifier_or_type
#line 177 "Parser.y"
{CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal;}
        break;
      case 53: // where_rule -> IDENTIFIER, ':', error, ';'
#line 194 "Parser.y"
{ yyerrok(); }
        break;
      case 66: // string_array -> '[', strings, ']'
#line 213 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; }
        break;
      case 67: // strings -> STRING
#line 217 "Parser.y"
{ CurrentSemanticValue.val = new List<string>() { ValueStack[ValueStack.Depth-1].strVal }; }
        break;
      case 68: // strings -> strings, ',', STRING
#line 218 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 82: // derive_rule -> IDENTIFIER, ':', identifier_or_type, ASSIGNMENT, error, ';'
#line 259 "Parser.y"
{ yyerrok(); }
        break;
      case 83: // derive_rule -> IDENTIFIER, ':', enumerable, OF, identifier_or_type, ASSIGNMENT, 
               //                error, ';'
#line 260 "Parser.y"
{ yyerrok(); }
        break;
      case 84: // derive_rule -> IDENTIFIER, ':', enumerable, OF, enumerable, OF, 
               //                identifier_or_type, ASSIGNMENT, error, ';'
#line 261 "Parser.y"
{ yyerrok(); }
        break;
      case 85: // derive_rule -> accessor, ':', identifier_or_type, ASSIGNMENT, error, ';'
#line 262 "Parser.y"
{ yyerrok(); }
        break;
      case 92: // inheritance_section -> inheritance_definition
#line 278 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = ValueStack[ValueStack.Depth-1].tokVal; }
        break;
      case 93: // inheritance_section -> inheritance_section, inheritance_definition
#line 279 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val ?? ValueStack[ValueStack.Depth-1].val; if (ValueStack[ValueStack.Depth-2].tokVal == Tokens.ABSTRACT || ValueStack[ValueStack.Depth-1].tokVal == Tokens.ABSTRACT) CurrentSemanticValue.tokVal = Tokens.ABSTRACT; else CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT;}
        break;
      case 94: // inheritance_definition -> SUBTYPE_OF, identifier_list
#line 283 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT; }
        break;
      case 95: // inheritance_definition -> SUPERTYPE_OF, '(', ONEOF, identifier_list, ')'
#line 284 "Parser.y"
{ CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT;  }
        break;
      case 96: // inheritance_definition -> ABSTRACT, SUPERTYPE_OF, '(', ONEOF, identifier_list, 
               //                           ')'
#line 285 "Parser.y"
{ CurrentSemanticValue.tokVal = Tokens.ABSTRACT;  }
        break;
      case 97: // function -> FUNCTION, IDENTIFIER, error, END_FUNCTION, ';'
#line 289 "Parser.y"
{ yyerrok(); }
        break;
      case 98: // rule -> RULE, IDENTIFIER, FOR, error, END_RULE, ';'
#line 294 "Parser.y"
{ yyerrok(); }
        break;
      case 99: // accessor -> IDENTIFIER, '.', IDENTIFIER
#line 298 "Parser.y"
{ CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-2].strVal}; }
        break;
      case 100: // accessor -> accessor, '.', IDENTIFIER
#line 299 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 101: // accessor -> SELF, BACKSLASH, accessor
#line 300 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
