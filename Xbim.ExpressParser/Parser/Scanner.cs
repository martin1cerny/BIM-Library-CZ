//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.2.0
//  Machine:  CENTAURUS
//  DateTime: 26.1.2015 21:01:23
//  UserName: Martin
//  GPLEX input file <Scanner.lex - 19.9.2014 15:50:02>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, minimize
//  Option settings: compressNext, noPersistBuffer, embedbuffers
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.Xbim.Gppg;

namespace Xbim.ExpressParser
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 241;
        const int initial = 1;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {1, 0};

    static Table[] NxS = new Table[259] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string ""
      new Table(0, 126, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, 3, 4, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 242, -1, -1, -1, 
          -1, 243, 7, 8, -1, 244, 9, 244, 10, 245, 11, 11, 11, 11, 11, 11, 
          11, 11, 11, 11, 12, 13, 14, 15, 16, 17, -1, 18, 19, 20, 21, 22, 
          23, 20, 20, 24, 20, 20, 25, 20, 26, 27, 20, 28, 29, 30, 31, 32, 
          20, 33, 34, 20, 20, 35, 36, 37, -1, 20, -1, 18, 19, 20, 21, 22, 
          23, 20, 20, 24, 20, 20, 25, 20, 26, 27, 20, 28, 29, 30, 31, 32, 
          20, 33, 34, 20, 20, 38, -1, 39}),
/* NxS[   2] */ // Shortest string ""
      new Table(0, 1, -1, new short[] {2}),
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "\t"
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string "\r"
/* NxS[   6] */ new Table(0, 0, -1, null), // Shortest string "\x20"
/* NxS[   7] */ // Shortest string "("
      new Table(42, 1, -1, new short[] {255}),
/* NxS[   8] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[   9] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  10] */ // Shortest string "."
      new Table(46, 71, -1, new short[] {252, -1, 231, 231, 231, 231, 
          231, 231, 231, 231, 231, 231, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          254}),
/* NxS[  11] */ // Shortest string "0"
      new Table(46, 77, -1, new short[] {231, -1, 232, 232, 232, 232, 
          232, 232, 232, 232, 232, 232, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20}),
/* NxS[  12] */ // Shortest string ":"
      new Table(61, 1, -1, new short[] {230}),
/* NxS[  13] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  14] */ // Shortest string "<"
      new Table(61, 2, -1, new short[] {228, 229}),
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "="
/* NxS[  16] */ // Shortest string ">"
      new Table(61, 1, -1, new short[] {227}),
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "?"
/* NxS[  18] */ // Shortest string "A"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 214, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 215, 20, 20, 20, 216, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 214, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 215, 20, 20, 20, 216, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  19] */ // Shortest string "B"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 203, 20, 20, 20, 20, 20, 204, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 203, 20, 20, 20, 20, 20, 204, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  20] */ // Shortest string "C"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  21] */ // Shortest string "D"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 198, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 198, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  22] */ // Shortest string "E"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 148, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 149, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 148, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 149, 20, 20}),
/* NxS[  23] */ // Shortest string "F"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 133, 20, 20, 20, 20, 
          20, 20, 20, 134, 20, 20, 20, 20, 20, 135, 20, 20, 20, 20, 20, 136, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 133, 20, 20, 20, 20, 
          20, 20, 20, 134, 20, 20, 20, 20, 20, 135, 20, 20, 20, 20, 20, 136, 
          20, 20, 20, 20, 20}),
/* NxS[  24] */ // Shortest string "I"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 122, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 122, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  25] */ // Shortest string "L"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 119, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 119, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  26] */ // Shortest string "N"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 117, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 117, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  27] */ // Shortest string "O"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          104, 20, 20, 20, 20, 20, 20, 20, 105, 20, 106, 20, 107, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          104, 20, 20, 20, 20, 20, 20, 20, 105, 20, 106, 20, 107, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  28] */ // Shortest string "Q"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 
          20, 20, 20, 20, 20}),
/* NxS[  29] */ // Shortest string "R"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 94, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 95, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 94, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 95, 
          20, 20, 20, 20, 20}),
/* NxS[  30] */ // Shortest string "S"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 57, 20, 58, 
          20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 61, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 57, 20, 58, 
          20, 20, 20, 59, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 61, 
          20, 20, 20, 20, 20}),
/* NxS[  31] */ // Shortest string "T"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 51, 20, 20, 20, 
          20, 20, 20, 52, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 51, 20, 20, 20, 
          20, 20, 20, 52, 20}),
/* NxS[  32] */ // Shortest string "U"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 46, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 46, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  33] */ // Shortest string "W"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 42, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 42, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  34] */ // Shortest string "X"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "\\"
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  38] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  40] */ // Shortest string "XO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 41, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 41, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  41] */ // Shortest string "XOR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  42] */ // Shortest string "WH"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 43, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 43, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  43] */ // Shortest string "WHE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 44, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 44, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  44] */ // Shortest string "WHER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 45, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 45, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  45] */ // Shortest string "WHERE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  46] */ // Shortest string "UN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 47, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 47, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  47] */ // Shortest string "UNI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 48, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 48, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  48] */ // Shortest string "UNIQ"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49, 
          20, 20, 20, 20, 20}),
/* NxS[  49] */ // Shortest string "UNIQU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 50, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 50, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  50] */ // Shortest string "UNIQUE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  51] */ // Shortest string "TR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 
          20, 20, 20, 20, 20}),
/* NxS[  52] */ // Shortest string "TY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 53, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 53, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  53] */ // Shortest string "TYP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 54, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 54, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  54] */ // Shortest string "TYPE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  55] */ // Shortest string "TRU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 56, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 56, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  56] */ // Shortest string "TRUE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  57] */ // Shortest string "SC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  58] */ // Shortest string "SE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 84, 20, 20, 20, 20, 20, 20, 20, 85, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 84, 20, 20, 20, 20, 20, 20, 20, 85, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  59] */ // Shortest string "SI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 80, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 80}),
/* NxS[  60] */ // Shortest string "ST"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 76, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 76, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  61] */ // Shortest string "SU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 62, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 63, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 62, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 63, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  62] */ // Shortest string "SUB"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  63] */ // Shortest string "SUP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 64, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 64, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  64] */ // Shortest string "SUPE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 65, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 65, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  65] */ // Shortest string "SUPER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 66, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 66, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  66] */ // Shortest string "SUPERT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 67, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 67, 20}),
/* NxS[  67] */ // Shortest string "SUPERTY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 68, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 68, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  68] */ // Shortest string "SUPERTYP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 69, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 69, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  69] */ // Shortest string "SUPERTYPE"
      new Table(32, 91, -1, new short[] {246, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  70] */ new Table(0, 0, -1, null), // Shortest string "SUPERTYPE\x20OF"
/* NxS[  71] */ // Shortest string "SUBT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 72, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 72, 20}),
/* NxS[  72] */ // Shortest string "SUBTY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 73, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 73, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  73] */ // Shortest string "SUBTYP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 74, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 74, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  74] */ // Shortest string "SUBTYPE"
      new Table(32, 91, -1, new short[] {248, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "SUBTYPE\x20OF"
/* NxS[  76] */ // Shortest string "STR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 77, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 77, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  77] */ // Shortest string "STRI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 78, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 78, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  78] */ // Shortest string "STRIN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 79, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 79, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  79] */ // Shortest string "STRING"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  80] */ // Shortest string "SIZ"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 81, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 81, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  81] */ // Shortest string "SIZE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 82, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 82, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  82] */ // Shortest string "SIZEO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          83, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          83, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  83] */ // Shortest string "SIZEOF"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  84] */ // Shortest string "SEL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 86, 
          87, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 86, 
          87, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  85] */ // Shortest string "SET"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  86] */ // Shortest string "SELE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 88, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 88, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  87] */ // Shortest string "SELF"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  88] */ // Shortest string "SELEC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  89] */ // Shortest string "SELECT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  90] */ // Shortest string "SCH"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 91, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 91, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  91] */ // Shortest string "SCHE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  92] */ // Shortest string "SCHEM"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 93, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 93, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  93] */ // Shortest string "SCHEMA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  94] */ // Shortest string "RE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 98, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 98, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  95] */ // Shortest string "RU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 96, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 96, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  96] */ // Shortest string "RUL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 97, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 97, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  97] */ // Shortest string "RULE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  98] */ // Shortest string "REA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[  99] */ // Shortest string "REAL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 100] */ // Shortest string "QU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 101, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 101, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 101] */ // Shortest string "QUE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 102, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 102, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 102] */ // Shortest string "QUER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 103, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 103, 20}),
/* NxS[ 103] */ // Shortest string "QUERY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 104] */ // Shortest string "OF"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 105] */ // Shortest string "ON"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 114, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 114, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 106] */ // Shortest string "OP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 108, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 108, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 107] */ // Shortest string "OR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 108] */ // Shortest string "OPT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 109, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 109, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 109] */ // Shortest string "OPTI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 110, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 110, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 110] */ // Shortest string "OPTIO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 111, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 111, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 111] */ // Shortest string "OPTION"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 112, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 112, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 112] */ // Shortest string "OPTIONA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 113, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 113, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 113] */ // Shortest string "OPTIONAL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 114] */ // Shortest string "ONE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 115, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 115, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 115] */ // Shortest string "ONEO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          116, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          116, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 116] */ // Shortest string "ONEOF"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 117] */ // Shortest string "NO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 118, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 118, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 118] */ // Shortest string "NOT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 119] */ // Shortest string "LI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 120, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 120, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 120] */ // Shortest string "LIS"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 121, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 121, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 121] */ // Shortest string "LIST"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 122] */ // Shortest string "IN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 123, 20, 
          124, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 123, 20, 
          124, 20, 20, 20, 20}),
/* NxS[ 123] */ // Shortest string "INT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 129, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 129, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 124] */ // Shortest string "INV"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 125, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 125, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 125] */ // Shortest string "INVE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 126, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 126, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 126] */ // Shortest string "INVER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 127, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 127, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 127] */ // Shortest string "INVERS"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 128, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 128, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 128] */ // Shortest string "INVERSE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 129] */ // Shortest string "INTE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 130, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 130, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 130] */ // Shortest string "INTEG"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 131, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 131, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 131] */ // Shortest string "INTEGE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 132, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 132, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 132] */ // Shortest string "INTEGER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 133] */ // Shortest string "FA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 147, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 147, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 134] */ // Shortest string "FI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 144, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 144, 20, 20}),
/* NxS[ 135] */ // Shortest string "FO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 143, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 143, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 136] */ // Shortest string "FU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 137, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 137, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 137] */ // Shortest string "FUN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 138, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 138, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 138] */ // Shortest string "FUNC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 139, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 139, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 139] */ // Shortest string "FUNCT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 140, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 140, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 140] */ // Shortest string "FUNCTI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 141, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 141, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 141] */ // Shortest string "FUNCTIO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 142, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 142, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 142] */ // Shortest string "FUNCTION"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 143] */ // Shortest string "FOR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 144] */ // Shortest string "FIX"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 145, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 145, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 145] */ // Shortest string "FIXE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 146, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 146, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 146] */ // Shortest string "FIXED"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 147] */ // Shortest string "FAL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 55, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 148] */ // Shortest string "EN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 154, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 155, 156, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 154, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 155, 156, 
          20, 20, 20, 20, 20}),
/* NxS[ 149] */ // Shortest string "EX"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 150, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 150, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 150] */ // Shortest string "EXI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 151, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 151, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 151] */ // Shortest string "EXIS"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 152, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 152, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 152] */ // Shortest string "EXIST"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 153, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 153, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 153] */ // Shortest string "EXISTS"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 154] */ // Shortest string "END"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 169, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 155] */ // Shortest string "ENT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 166, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 166, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 156] */ // Shortest string "ENU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 157, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 157, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 157] */ // Shortest string "ENUM"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 158, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 158, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 158] */ // Shortest string "ENUME"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 159, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 159, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 159] */ // Shortest string "ENUMER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 160, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 160, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 160] */ // Shortest string "ENUMERA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 161, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 161, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 161] */ // Shortest string "ENUMERAT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 162, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 162, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 162] */ // Shortest string "ENUMERATI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 163, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 163, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 163] */ // Shortest string "ENUMERATIO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 164, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 164, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 164] */ // Shortest string "ENUMERATION"
      new Table(32, 91, -1, new short[] {250, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 165] */ new Table(0, 0, -1, null), // Shortest string "ENUMERATION\x20OF"
/* NxS[ 166] */ // Shortest string "ENTI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 167, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 167, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 167] */ // Shortest string "ENTIT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 168, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 168, 20}),
/* NxS[ 168] */ // Shortest string "ENTITY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 169] */ // Shortest string "END_"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 170, 
          171, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 172, 173, 174, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 170, 
          171, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 172, 173, 174, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 170] */ // Shortest string "END_E"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 193, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 193, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 171] */ // Shortest string "END_F"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 186, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 186, 
          20, 20, 20, 20, 20}),
/* NxS[ 172] */ // Shortest string "END_R"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 183, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 183, 
          20, 20, 20, 20, 20}),
/* NxS[ 173] */ // Shortest string "END_S"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 178, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 178, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 174] */ // Shortest string "END_T"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 175, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 175, 20}),
/* NxS[ 175] */ // Shortest string "END_TY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 176, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 176] */ // Shortest string "END_TYP"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 177, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 177, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 177] */ // Shortest string "END_TYPE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 178] */ // Shortest string "END_SC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 179, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 179] */ // Shortest string "END_SCH"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 180, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 180, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 180] */ // Shortest string "END_SCHE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 181, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 181, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 181] */ // Shortest string "END_SCHEM"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 182, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 182, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 182] */ // Shortest string "END_SCHEMA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 183] */ // Shortest string "END_RU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 184, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 184, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 184] */ // Shortest string "END_RUL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 185, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 185, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 185] */ // Shortest string "END_RULE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 186] */ // Shortest string "END_FU"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 187, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 187, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 187] */ // Shortest string "END_FUN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 188, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 188, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 188] */ // Shortest string "END_FUNC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 189, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 189, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 189] */ // Shortest string "END_FUNCT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 190, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 190, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 190] */ // Shortest string "END_FUNCTI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 191, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 191, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 191] */ // Shortest string "END_FUNCTIO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 192, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 192, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 192] */ // Shortest string "END_FUNCTION"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 193] */ // Shortest string "END_EN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 194, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 194, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 194] */ // Shortest string "END_ENT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 195, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 195, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 195] */ // Shortest string "END_ENTI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 196, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 196, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 196] */ // Shortest string "END_ENTIT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 197, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 197, 20}),
/* NxS[ 197] */ // Shortest string "END_ENTITY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 198] */ // Shortest string "DE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 199, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 199, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 199] */ // Shortest string "DER"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 200, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 200, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 200] */ // Shortest string "DERI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          201, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          201, 20, 20, 20, 20}),
/* NxS[ 201] */ // Shortest string "DERIV"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 202, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 202, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 202] */ // Shortest string "DERIVE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 203] */ // Shortest string "BI"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 210, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 210, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 204] */ // Shortest string "BO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 205, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 205, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 205] */ // Shortest string "BOO"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 206, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 206, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 206] */ // Shortest string "BOOL"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 207, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 207, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 207] */ // Shortest string "BOOLE"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 208, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 208, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 208] */ // Shortest string "BOOLEA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 209, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 209, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 209] */ // Shortest string "BOOLEAN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 210] */ // Shortest string "BIN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 211, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 211, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 211] */ // Shortest string "BINA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 212, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 212, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 212] */ // Shortest string "BINAR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 213, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 213, 20}),
/* NxS[ 213] */ // Shortest string "BINARY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 214] */ // Shortest string "AB"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 221, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 221, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 215] */ // Shortest string "AN"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 220, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 220, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 216] */ // Shortest string "AR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 217, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 217, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 217] */ // Shortest string "ARR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 218, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 218, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 218] */ // Shortest string "ARRA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 219, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 219, 20}),
/* NxS[ 219] */ // Shortest string "ARRAY"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 220] */ // Shortest string "AND"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 221] */ // Shortest string "ABS"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 222, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 222, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 222] */ // Shortest string "ABST"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 223, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 223, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 223] */ // Shortest string "ABSTR"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 224, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 224, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 224] */ // Shortest string "ABSTRA"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 225, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 225, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 225] */ // Shortest string "ABSTRAC"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 226, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 226, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 226] */ // Shortest string "ABSTRACT"
      new Table(48, 75, -1, new short[] {20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 227] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 228] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[ 229] */ new Table(0, 0, -1, null), // Shortest string "<>"
/* NxS[ 230] */ new Table(0, 0, -1, null), // Shortest string ":="
/* NxS[ 231] */ // Shortest string "+."
      new Table(46, 56, -1, new short[] {252, -1, 231, 231, 231, 231, 
          231, 231, 231, 231, 231, 231, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253}),
/* NxS[ 232] */ // Shortest string "00"
      new Table(46, 77, -1, new short[] {231, -1, 232, 232, 232, 232, 
          232, 232, 232, 232, 232, 232, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 
          20, 233, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 
          20, 233, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20}),
/* NxS[ 233] */ // Shortest string "00E"
      new Table(43, 80, -1, new short[] {234, -1, 234, -1, -1, 235, 
          235, 235, 235, 235, 235, 235, 235, 235, 235, -1, -1, -1, -1, -1, -1, -1, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20}),
/* NxS[ 234] */ // Shortest string "+.E+"
      new Table(48, 10, -1, new short[] {234, 234, 234, 234, 234, 234, 
          234, 234, 234, 234}),
/* NxS[ 235] */ // Shortest string "00E0"
      new Table(48, 75, -1, new short[] {235, 235, 235, 235, 235, 235, 
          235, 235, 235, 235, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20}),
/* NxS[ 236] */ // Shortest string "//"
      new Table(10, 4, 236, new short[] {-1, 236, 236, -1}),
/* NxS[ 237] */ new Table(0, 0, -1, null), // Shortest string ".F."
/* NxS[ 238] */ // Shortest string "+0"
      new Table(46, 56, -1, new short[] {231, -1, 238, 238, 238, 238, 
          238, 238, 238, 238, 238, 238, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253}),
/* NxS[ 239] */ // Shortest string "(**)"
      new Table(10, 33, 255, new short[] {-1, 255, 255, 256, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 257}),
/* NxS[ 240] */ // Shortest string "''"
      new Table(39, 1, -1, new short[] {243}),
/* NxS[ 241] */ // Shortest string "\"\""
      new Table(1, 128, 242, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 241, 242, 242, 242, 242, 
          258, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, -1, -1}),
/* NxS[ 242] */ // Shortest string "\""
      new Table(1, 128, 242, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 241, 242, 242, 242, 242, 
          258, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 
          242, 242, 242, 242, 242, 242, 242, 242, -1, -1}),
/* NxS[ 243] */ // Shortest string "'"
      new Table(1, 128, 243, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          240, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 
          243, 243, 243, 243, 243, 243, 243, 243, -1, -1}),
/* NxS[ 244] */ // Shortest string "+"
      new Table(46, 12, -1, new short[] {231, -1, 238, 238, 238, 238, 
          238, 238, 238, 238, 238, 238}),
/* NxS[ 245] */ // Shortest string "/"
      new Table(47, 1, -1, new short[] {236}),
/* NxS[ 246] */ // Shortest string "SUPERTYPE\x20"
      new Table(79, 33, -1, new short[] {247, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 247}),
/* NxS[ 247] */ // Shortest string "SUPERTYPE\x20O"
      new Table(70, 33, -1, new short[] {70, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70}),
/* NxS[ 248] */ // Shortest string "SUBTYPE\x20"
      new Table(79, 33, -1, new short[] {249, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249}),
/* NxS[ 249] */ // Shortest string "SUBTYPE\x20O"
      new Table(70, 33, -1, new short[] {75, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75}),
/* NxS[ 250] */ // Shortest string "ENUMERATION\x20"
      new Table(79, 33, -1, new short[] {251, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251}),
/* NxS[ 251] */ // Shortest string "ENUMERATION\x20O"
      new Table(70, 33, -1, new short[] {165, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 165}),
/* NxS[ 252] */ // Shortest string ".."
      new Table(46, 56, -1, new short[] {252, -1, 252, 252, 252, 252, 
          252, 252, 252, 252, 252, 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 253}),
/* NxS[ 253] */ // Shortest string "+.E"
      new Table(43, 15, -1, new short[] {234, -1, 234, -1, -1, 234, 
          234, 234, 234, 234, 234, 234, 234, 234, 234}),
/* NxS[ 254] */ // Shortest string ".F"
      new Table(46, 1, -1, new short[] {237}),
/* NxS[ 255] */ // Shortest string "(*"
      new Table(10, 33, 255, new short[] {-1, 255, 255, 256, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 257}),
/* NxS[ 256] */ // Shortest string "(*\r"
      new Table(13, 30, 255, new short[] {256, 255, 255, 255, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 257}),
/* NxS[ 257] */ // Shortest string "(**"
      new Table(10, 33, 255, new short[] {-1, 255, 255, 256, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 
          255, 255, 255, 255, 255, 255, 255, 255, 255, 239, 257}),
/* NxS[ 258] */ // Shortest string "\"'"
      new Table(39, 1, -1, new short[] {242}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file); // no unicode option
        }   
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[a-zA-Z0-9_]*',	Shortest string ""
        case 18: // Recognized '[a-zA-Z0-9_]*',	Shortest string "A"
        case 19: // Recognized '[a-zA-Z0-9_]*',	Shortest string "B"
        case 20: // Recognized '[a-zA-Z0-9_]*',	Shortest string "C"
        case 21: // Recognized '[a-zA-Z0-9_]*',	Shortest string "D"
        case 22: // Recognized '[a-zA-Z0-9_]*',	Shortest string "E"
        case 23: // Recognized '[a-zA-Z0-9_]*',	Shortest string "F"
        case 24: // Recognized '[a-zA-Z0-9_]*',	Shortest string "I"
        case 25: // Recognized '[a-zA-Z0-9_]*',	Shortest string "L"
        case 26: // Recognized '[a-zA-Z0-9_]*',	Shortest string "N"
        case 27: // Recognized '[a-zA-Z0-9_]*',	Shortest string "O"
        case 28: // Recognized '[a-zA-Z0-9_]*',	Shortest string "Q"
        case 29: // Recognized '[a-zA-Z0-9_]*',	Shortest string "R"
        case 30: // Recognized '[a-zA-Z0-9_]*',	Shortest string "S"
        case 31: // Recognized '[a-zA-Z0-9_]*',	Shortest string "T"
        case 32: // Recognized '[a-zA-Z0-9_]*',	Shortest string "U"
        case 33: // Recognized '[a-zA-Z0-9_]*',	Shortest string "W"
        case 34: // Recognized '[a-zA-Z0-9_]*',	Shortest string "X"
        case 40: // Recognized '[a-zA-Z0-9_]*',	Shortest string "XO"
        case 42: // Recognized '[a-zA-Z0-9_]*',	Shortest string "WH"
        case 43: // Recognized '[a-zA-Z0-9_]*',	Shortest string "WHE"
        case 44: // Recognized '[a-zA-Z0-9_]*',	Shortest string "WHER"
        case 46: // Recognized '[a-zA-Z0-9_]*',	Shortest string "UN"
        case 47: // Recognized '[a-zA-Z0-9_]*',	Shortest string "UNI"
        case 48: // Recognized '[a-zA-Z0-9_]*',	Shortest string "UNIQ"
        case 49: // Recognized '[a-zA-Z0-9_]*',	Shortest string "UNIQU"
        case 51: // Recognized '[a-zA-Z0-9_]*',	Shortest string "TR"
        case 52: // Recognized '[a-zA-Z0-9_]*',	Shortest string "TY"
        case 53: // Recognized '[a-zA-Z0-9_]*',	Shortest string "TYP"
        case 55: // Recognized '[a-zA-Z0-9_]*',	Shortest string "TRU"
        case 57: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SC"
        case 58: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SE"
        case 59: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SI"
        case 60: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ST"
        case 61: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SU"
        case 62: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUB"
        case 63: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUP"
        case 64: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPE"
        case 65: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPER"
        case 66: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPERT"
        case 67: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPERTY"
        case 68: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPERTYP"
        case 69: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUPERTYPE"
        case 71: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUBT"
        case 72: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUBTY"
        case 73: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUBTYP"
        case 74: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SUBTYPE"
        case 76: // Recognized '[a-zA-Z0-9_]*',	Shortest string "STR"
        case 77: // Recognized '[a-zA-Z0-9_]*',	Shortest string "STRI"
        case 78: // Recognized '[a-zA-Z0-9_]*',	Shortest string "STRIN"
        case 80: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SIZ"
        case 81: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SIZE"
        case 82: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SIZEO"
        case 84: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SEL"
        case 86: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SELE"
        case 88: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SELEC"
        case 90: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SCH"
        case 91: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SCHE"
        case 92: // Recognized '[a-zA-Z0-9_]*',	Shortest string "SCHEM"
        case 94: // Recognized '[a-zA-Z0-9_]*',	Shortest string "RE"
        case 95: // Recognized '[a-zA-Z0-9_]*',	Shortest string "RU"
        case 96: // Recognized '[a-zA-Z0-9_]*',	Shortest string "RUL"
        case 98: // Recognized '[a-zA-Z0-9_]*',	Shortest string "REA"
        case 100: // Recognized '[a-zA-Z0-9_]*',	Shortest string "QU"
        case 101: // Recognized '[a-zA-Z0-9_]*',	Shortest string "QUE"
        case 102: // Recognized '[a-zA-Z0-9_]*',	Shortest string "QUER"
        case 105: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ON"
        case 106: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OP"
        case 108: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OPT"
        case 109: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OPTI"
        case 110: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OPTIO"
        case 111: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OPTION"
        case 112: // Recognized '[a-zA-Z0-9_]*',	Shortest string "OPTIONA"
        case 114: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ONE"
        case 115: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ONEO"
        case 117: // Recognized '[a-zA-Z0-9_]*',	Shortest string "NO"
        case 119: // Recognized '[a-zA-Z0-9_]*',	Shortest string "LI"
        case 120: // Recognized '[a-zA-Z0-9_]*',	Shortest string "LIS"
        case 123: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INT"
        case 124: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INV"
        case 125: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INVE"
        case 126: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INVER"
        case 127: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INVERS"
        case 129: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INTE"
        case 130: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INTEG"
        case 131: // Recognized '[a-zA-Z0-9_]*',	Shortest string "INTEGE"
        case 133: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FA"
        case 134: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FI"
        case 135: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FO"
        case 136: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FU"
        case 137: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FUN"
        case 138: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FUNC"
        case 139: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FUNCT"
        case 140: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FUNCTI"
        case 141: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FUNCTIO"
        case 144: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FIX"
        case 145: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FIXE"
        case 147: // Recognized '[a-zA-Z0-9_]*',	Shortest string "FAL"
        case 148: // Recognized '[a-zA-Z0-9_]*',	Shortest string "EN"
        case 149: // Recognized '[a-zA-Z0-9_]*',	Shortest string "EX"
        case 150: // Recognized '[a-zA-Z0-9_]*',	Shortest string "EXI"
        case 151: // Recognized '[a-zA-Z0-9_]*',	Shortest string "EXIS"
        case 152: // Recognized '[a-zA-Z0-9_]*',	Shortest string "EXIST"
        case 154: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END"
        case 155: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENT"
        case 156: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENU"
        case 157: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUM"
        case 158: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUME"
        case 159: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMER"
        case 160: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMERA"
        case 161: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMERAT"
        case 162: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMERATI"
        case 163: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMERATIO"
        case 164: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENUMERATION"
        case 166: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENTI"
        case 167: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ENTIT"
        case 169: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_"
        case 170: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_E"
        case 171: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_F"
        case 172: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_R"
        case 173: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_S"
        case 174: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_T"
        case 175: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_TY"
        case 176: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_TYP"
        case 178: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_SC"
        case 179: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_SCH"
        case 180: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_SCHE"
        case 181: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_SCHEM"
        case 183: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_RU"
        case 184: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_RUL"
        case 186: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FU"
        case 187: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FUN"
        case 188: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FUNC"
        case 189: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FUNCT"
        case 190: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FUNCTI"
        case 191: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_FUNCTIO"
        case 193: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_EN"
        case 194: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_ENT"
        case 195: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_ENTI"
        case 196: // Recognized '[a-zA-Z0-9_]*',	Shortest string "END_ENTIT"
        case 198: // Recognized '[a-zA-Z0-9_]*',	Shortest string "DE"
        case 199: // Recognized '[a-zA-Z0-9_]*',	Shortest string "DER"
        case 200: // Recognized '[a-zA-Z0-9_]*',	Shortest string "DERI"
        case 201: // Recognized '[a-zA-Z0-9_]*',	Shortest string "DERIV"
        case 203: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BI"
        case 204: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BO"
        case 205: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BOO"
        case 206: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BOOL"
        case 207: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BOOLE"
        case 208: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BOOLEA"
        case 210: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BIN"
        case 211: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BINA"
        case 212: // Recognized '[a-zA-Z0-9_]*',	Shortest string "BINAR"
        case 214: // Recognized '[a-zA-Z0-9_]*',	Shortest string "AB"
        case 215: // Recognized '[a-zA-Z0-9_]*',	Shortest string "AN"
        case 216: // Recognized '[a-zA-Z0-9_]*',	Shortest string "AR"
        case 217: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ARR"
        case 218: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ARRA"
        case 221: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ABS"
        case 222: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ABST"
        case 223: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ABSTR"
        case 224: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ABSTRA"
        case 225: // Recognized '[a-zA-Z0-9_]*',	Shortest string "ABSTRAC"
        case 233: // Recognized '[a-zA-Z0-9_]*',	Shortest string "00E"
yylval.strVal = yytext; return (int)(Tokens.IDENTIFIER);
            break;
        case 2: // Recognized '[\0]+',	Shortest string ""
{}
            break;
        case 3: // Recognized '"\t"',	Shortest string "\t"
{}
            break;
        case 4: // Recognized '[\n]',	Shortest string "\n"
{}
            break;
        case 5: // Recognized '[\r]',	Shortest string "\r"
{}
            break;
        case 6: // Recognized '" "',	Shortest string "\x20"
{}
            break;
        case 7: // Recognized '"("',	Shortest string "("
return ('(');
            break;
        case 8: // Recognized '")"',	Shortest string ")"
return (')');
            break;
        case 9: // Recognized '","',	Shortest string ","
return (',');
            break;
        case 10: // Recognized '"."',	Shortest string "."
return ('.');
            break;
        case 11: // Recognized '[\-\+]?[0-9]+',	Shortest string "0"
        case 232: // Recognized '[\-\+]?[0-9]+',	Shortest string "00"
        case 238: // Recognized '[\-\+]?[0-9]+',	Shortest string "+0"
return (int)SetValue(Tokens.INTEGER);
            break;
        case 12: // Recognized '":"',	Shortest string ":"
return (':');
            break;
        case 13: // Recognized '";"',	Shortest string ";"
return (';');
            break;
        case 14: // Recognized '"<"',	Shortest string "<"
return (int)Tokens.LT ;
            break;
        case 15: // Recognized '"="',	Shortest string "="
return '=';
            break;
        case 16: // Recognized '">"',	Shortest string ">"
return (int)Tokens.GT ;
            break;
        case 17: // Recognized '"?"',	Shortest string "?"
return ('?');
            break;
        case 35: // Recognized '"["',	Shortest string "["
return ('[');
            break;
        case 36: // Recognized '"\\"',	Shortest string "\\"
return (int)Tokens.BACKSLASH;
            break;
        case 37: // Recognized '"]"',	Shortest string "]"
return (']');
            break;
        case 38: // Recognized '"{"',	Shortest string "{"
return ('{');
            break;
        case 39: // Recognized '"}"',	Shortest string "}"
return ('}');
            break;
        case 41: // Recognized '"XOR"',	Shortest string "XOR"
return (int)(Tokens.XOR);
            break;
        case 45: // Recognized '"WHERE"',	Shortest string "WHERE"
return (int)(Tokens.WHERE);
            break;
        case 50: // Recognized '"UNIQUE"',	Shortest string "UNIQUE"
return (int)(Tokens.UNIQUE);
            break;
        case 54: // Recognized '"TYPE"',	Shortest string "TYPE"
return (int)(Tokens.TYPE);
            break;
        case 56: // Recognized 'true',	Shortest string "TRUE"
        case 237: // Recognized '".T."',	Shortest string ".F."
return (int)SetValue(Tokens.BOOLEAN);
            break;
        case 70: // Recognized '"SUPERTYPE OF"',	Shortest string "SUPERTYPE\x20OF"
return (int)(Tokens.SUPERTYPE_OF);
            break;
        case 75: // Recognized '"SUBTYPE OF"',	Shortest string "SUBTYPE\x20OF"
return (int)(Tokens.SUBTYPE_OF);
            break;
        case 79: // Recognized '"STRING"',	Shortest string "STRING"
return (int)(Tokens.STRING);
            break;
        case 83: // Recognized '"SIZEOF"',	Shortest string "SIZEOF"
return (int)(Tokens.SIZEOF);
            break;
        case 85: // Recognized '"SET"',	Shortest string "SET"
return (int)(Tokens.SET);
            break;
        case 87: // Recognized '"SELF"',	Shortest string "SELF"
return (int)(Tokens.SELF);
            break;
        case 89: // Recognized '"SELECT"',	Shortest string "SELECT"
return (int)(Tokens.SELECT);
            break;
        case 93: // Recognized '"SCHEMA"',	Shortest string "SCHEMA"
return (int)(Tokens.SCHEMA);
            break;
        case 97: // Recognized '"RULE"',	Shortest string "RULE"
return (int)(Tokens.RULE);
            break;
        case 99: // Recognized '"REAL"',	Shortest string "REAL"
return (int)(Tokens.REAL);
            break;
        case 103: // Recognized '"QUERY"',	Shortest string "QUERY"
return (int)(Tokens.QUERY);
            break;
        case 104: // Recognized '"OF"',	Shortest string "OF"
return (int)(Tokens.OF);
            break;
        case 107: // Recognized '"OR"',	Shortest string "OR"
return (int)(Tokens.OR);
            break;
        case 113: // Recognized '"OPTIONAL"',	Shortest string "OPTIONAL"
return (int)(Tokens.OPTIONAL);
            break;
        case 116: // Recognized '"ONEOF"',	Shortest string "ONEOF"
return (int)(Tokens.ONEOF);
            break;
        case 118: // Recognized '"NOT"',	Shortest string "NOT"
return (int)(Tokens.NOT);
            break;
        case 121: // Recognized '"LIST"',	Shortest string "LIST"
return (int)(Tokens.LIST);
            break;
        case 122: // Recognized '"IN"',	Shortest string "IN"
return (int)(Tokens.IN);
            break;
        case 128: // Recognized '"INVERSE"',	Shortest string "INVERSE"
return (int)(Tokens.INVERSE);
            break;
        case 132: // Recognized '"INTEGER"',	Shortest string "INTEGER"
return (int)(Tokens.INTEGER);
            break;
        case 142: // Recognized '"FUNCTION"',	Shortest string "FUNCTION"
return (int)(Tokens.FUNCTION);
            break;
        case 143: // Recognized '"FOR"',	Shortest string "FOR"
return (int)(Tokens.FOR);
            break;
        case 146: // Recognized '"FIXED"',	Shortest string "FIXED"
return (int)(Tokens.FIXED);
            break;
        case 153: // Recognized '"EXISTS"',	Shortest string "EXISTS"
return (int)(Tokens.EXISTS);
            break;
        case 165: // Recognized '"ENUMERATION OF"',	Shortest string "ENUMERATION\x20OF"
return (int)(Tokens.ENUMERATION_OF);
            break;
        case 168: // Recognized '"ENTITY"',	Shortest string "ENTITY"
return (int)(Tokens.ENTITY);
            break;
        case 177: // Recognized '"END_TYPE"',	Shortest string "END_TYPE"
return (int)(Tokens.END_TYPE);
            break;
        case 182: // Recognized '"END_SCHEMA"',	Shortest string "END_SCHEMA"
return (int)(Tokens.END_SCHEMA);
            break;
        case 185: // Recognized '"END_RULE"',	Shortest string "END_RULE"
return (int)(Tokens.END_RULE);
            break;
        case 192: // Recognized '"END_FUNCTION"',	Shortest string "END_FUNCTION"
return (int)(Tokens.END_FUNCTION);
            break;
        case 197: // Recognized '"END_ENTITY"',	Shortest string "END_ENTITY"
return (int)(Tokens.END_ENTITY);
            break;
        case 202: // Recognized '"DERIVE"',	Shortest string "DERIVE"
return (int)(Tokens.DERIVE);
            break;
        case 209: // Recognized '"BOOLEAN"',	Shortest string "BOOLEAN"
return (int)(Tokens.BOOLEAN);
            break;
        case 213: // Recognized '"BINARY"',	Shortest string "BINARY"
return (int)(Tokens.BINARY);
            break;
        case 219: // Recognized '"ARRAY"',	Shortest string "ARRAY"
return (int)(Tokens.ARRAY);
            break;
        case 220: // Recognized '"AND"',	Shortest string "AND"
return (int)(Tokens.AND);
            break;
        case 226: // Recognized '"ABSTRACT"',	Shortest string "ABSTRACT"
return (int)(Tokens.ABSTRACT);
            break;
        case 227: // Recognized '">="',	Shortest string ">="
return (int)Tokens.GTE ;
            break;
        case 228: // Recognized '"<="',	Shortest string "<="
return (int)Tokens.LTE ;
            break;
        case 229: // Recognized '"<>"',	Shortest string "<>"
return (int)Tokens.NEQ ;
            break;
        case 230: // Recognized '":="',	Shortest string ":="
return (int)Tokens.ASSIGNMENT ;
            break;
        case 231: // Recognized '[\-\+]?[0-9]*[\.][0-9]*',	Shortest string "+."
        case 234: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*',	Shortest string "+.E+"
        case 235: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*',	Shortest string "00E0"
return (int)SetValue(Tokens.REAL);
            break;
        case 236: // Recognized '\/\/[^\r\n]*',	Shortest string "//"
{}
            break;
        case 239: // Recognized '(\(\*)(.*(\r\n)*)*(\*\))',	Shortest string "(**)"
{}
            break;
        case 240: // Recognized '[\']([\n]|[\000\011-\046\050-\176\201-\237\240-\377]|[\047][\047])*[\']',	Shortest string "''"
return (int)SetValue(Tokens.STRING);
            break;
        case 241: // Recognized '[\"]([\n]|[\000\011-\046\050-\176\201-\237\240-\377]|[\047][\047])*[\"]',	Shortest string "\"\""
return (int)SetValue(Tokens.STRING);
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
            } // end try
            finally {
// User-specified epilog to scan()
yylloc = new LexLocation(tokLin,tokCol,tokELin,tokECol);
// End, user-specified epilog
            } // end finally
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
